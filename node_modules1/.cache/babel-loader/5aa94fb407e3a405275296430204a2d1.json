{"ast":null,"code":"import _defineProperty from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nvar _jsxFileName = \"D:\\\\company\\\\algo-manage\\\\src\\\\algo\\\\modules\\\\auth\\\\pages\\\\systemUser\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport CurdComponent from \"@/components/CurdComponent\";\nimport SelectOption from \"@/components/SelectOption\"; // import UploadWrap from \"@/components/UploadWrap\";\n\nimport md5 from \"js-md5\"; //全局引入\n\nimport { connect } from \"react-redux\"; // const getUpdateFormFields = () => {\n//     return []\n// };\n\nvar columns = function columns(params) {\n  return [{\n    title: \"ID\",\n    dataIndex: \"id\",\n    width: 100\n  }, {\n    title: \"系统用户ID\",\n    dataIndex: \"user_id\" // width: 100,\n\n  }, {\n    title: \"系统用户名称\",\n    dataIndex: \"user_name\" // width: 140,\n\n  }, {\n    title: \"角色编码\",\n    dataIndex: \"role_id\" // width: 100,\n\n  }, {\n    title: \"角色名称\",\n    dataIndex: \"role_name\" // width: 140,\n\n  }, {\n    title: \"系统用户状态\",\n    dataIndex: \"statusValue\" // width: 100,\n\n  }, {\n    title: \"创建时间\",\n    dataIndex: \"create_time\",\n    width: 240\n  }];\n};\n\nvar getSearchFormFields = function getSearchFormFields() {\n  return [{\n    label: \"系统用户名称\",\n    // label: <span>用&nbsp;户&nbsp;名&nbsp;称</span>,\n    id: \"user_name\",\n    component: React.createElement(_Input, {\n      placeholder: \"\\u8BF7\\u8F93\\u5165\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })\n  }];\n}; //export default\n\n\nvar systemUser =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(systemUser, _React$PureComponent);\n\n  function systemUser() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, systemUser);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(systemUser)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getInsertFormFields = function () {\n      return [{\n        label: \"系统用户ID（*ID名称只能为字母或字母与数字的组合）\",\n        id: \"user_id\",\n        initialValue: \"\",\n        rules: [{\n          required: true,\n          message: \"参数不能为空\"\n        }, {\n          message: \"请检查格式\",\n          pattern: /^(?![0-9]+$)[a-zA-Z0-9]+$/i\n        }, // {\n        //     validator: checkLength(10),\n        //     trigger: [\"change\", \"blur\"],\n        // },\n        {\n          max: 10,\n          message: \"最大长度为10\"\n        }],\n        component: React.createElement(_Input, {\n          placeholder: \"\\u8BF7\\u8F93\\u5165\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        })\n      }, {\n        label: \"系统用户名称\",\n        id: \"user_name\",\n        initialValue: \"\",\n        rules: [{\n          required: true,\n          message: \"参数不能为空\"\n        }, // {\n        //     validator: checkLength(20),\n        //     trigger: [\"change\", \"blur\"],\n        // },\n        {\n          message: \"请检查格式\",\n          pattern: /^\\S*$/i\n        }, {\n          max: 10,\n          message: \"最大长度为10\"\n        }],\n        component: // <Input placeholder=\"请输入\" readOnly disabled />\n        React.createElement(_Input, {\n          placeholder: \"\\u8BF7\\u8F93\\u5165\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        })\n      }, {\n        label: \"角色名称\",\n        id: \"role_id\",\n        // initialValue: this.state.roleList[0]\n        //     ? this.state.roleList[0].key\n        //     : \"\",\n        rules: [{\n          required: true,\n          message: \"参数不能为空\"\n        }],\n        component: SelectOption(_this.state.roleList, {\n          placeholder: \"请选择\",\n          allowClear: false,\n          style: {\n            width: 400\n          }\n        })\n      }, {\n        label: \"设置密码\",\n        id: \"password\",\n        initialValue: \"\",\n        rules: [{\n          required: true,\n          message: \"参数不能为空\"\n        }, {\n          max: 20,\n          message: \"最大长度为20\"\n        }],\n        component: React.createElement(_Input.Password, {\n          placeholder: \"\\u8BF7\\u8F93\\u5165\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        })\n      }, {\n        label: \"确认密码\",\n        id: \"password2\",\n        initialValue: \"\",\n        rules: [{\n          required: true,\n          message: \"参数不能为空\"\n        }, {\n          max: 20,\n          message: \"最大长度为20\"\n        }],\n        component: React.createElement(_Input.Password, {\n          placeholder: \"\\u8BF7\\u8F93\\u5165\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        })\n      }];\n    };\n\n    _this.getUpdateFormFields = function () {\n      return [{\n        label: \"系统用户ID（*ID名称只能为字母或字母与数字的组合）\",\n        id: \"user_id\",\n        initialValue: \"\",\n        rules: [{\n          required: true,\n          message: \"参数不能为空\"\n        }, {\n          message: \"请检查格式\",\n          pattern: /^(?![0-9]+$)[a-zA-Z0-9]+$/i\n        }, // {\n        //     validator: checkLength(20),\n        //     trigger: [\"change\", \"blur\"],\n        // },\n        {\n          max: 10,\n          message: \"最大长度为10\"\n        }],\n        component: React.createElement(_Input, {\n          placeholder: \"\\u8BF7\\u8F93\\u5165\",\n          disabled: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        })\n      }, {\n        label: \"系统用户名称\",\n        id: \"user_name\",\n        initialValue: \"\",\n        rules: [{\n          required: true,\n          message: \"参数不能为空\"\n        }, // {\n        //     validator: checkLength(20),\n        //     trigger: [\"change\", \"blur\"],\n        // },\n        {\n          message: \"请检查格式\",\n          pattern: /^\\S*$/i\n        }, {\n          max: 10,\n          message: \"最大长度为10\"\n        }],\n        component: // <Input placeholder=\"请输入\" readOnly disabled />\n        React.createElement(_Input, {\n          placeholder: \"\\u8BF7\\u8F93\\u5165\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        })\n      }, {\n        label: \"系统用户状态\",\n        id: \"status\",\n        rules: [{\n          required: true,\n          message: \"参数不能为空\"\n        }],\n        component: SelectOption(dict.authStatus, {\n          placeholder: \"请选择\",\n          allowClear: false\n        })\n      }, {\n        label: \"角色名称\",\n        id: \"role_id\",\n        // initialValue: this.state.roleList[0]\n        //     ? this.state.roleList[0].key\n        //     : \"\",\n        rules: [{\n          required: true,\n          message: \"参数不能为空\"\n        }],\n        component: SelectOption(_this.state.roleList, {\n          placeholder: \"请选择\",\n          allowClear: false,\n          style: {\n            width: 400\n          }\n        })\n      }, {\n        label: \"原密码\",\n        id: \"passwordOld\",\n        initialValue: \"\",\n        rules: [{\n          max: 20,\n          message: \"最大长度为20\"\n        }],\n        component: React.createElement(_Input.Password, {\n          placeholder: \"\\u8BF7\\u8F93\\u5165\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269\n          },\n          __self: this\n        })\n      }, {\n        label: \"设置密码\",\n        id: \"password\",\n        initialValue: \"\",\n        rules: [{\n          max: 20,\n          message: \"最大长度为20\"\n        }],\n        component: React.createElement(_Input.Password, {\n          placeholder: \"\\u8BF7\\u8F93\\u5165\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281\n          },\n          __self: this\n        })\n      }, {\n        label: \"确认密码\",\n        id: \"password2\",\n        initialValue: \"\",\n        rules: [{\n          max: 20,\n          message: \"最大长度为20\"\n        }],\n        component: React.createElement(_Input.Password, {\n          placeholder: \"\\u8BF7\\u8F93\\u5165\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          },\n          __self: this\n        })\n      }];\n    };\n\n    _this.state = {\n      searchLoading: false,\n      selectRow: [],\n      info: [],\n      pagination: {\n        total: 0\n      },\n      roleList: [] //角色列表\n\n    };\n\n    _this.handleTableChange = function (selectedRowKeys) {\n      console.log(\"批量选择\");\n\n      _this.setState({\n        selectRow: selectedRowKeys\n      });\n    };\n\n    _this.handleInsertRecord = function (formData) {\n      console.log(\"新增接口\", formData);\n\n      var role = _this.state.roleList.filter(function (item) {\n        return item.role_id == formData.role_id;\n      });\n\n      var params = {\n        oper_type: 1,\n        //oper_type // 操作类型  1-新增， 2-修改   3-删除\n        user_id: formData.user_id,\n        user_name: formData.user_name,\n        role_id: role[0].role_id,\n        role_name: role[0].role_name,\n        password: md5(formData.password)\n      }; // console.log(params);\n\n      if (formData.password != formData.password2) {\n        message.error(\"密码与确认密码不一致\");\n        window.comfirmOk = \"fail\";\n        return;\n      } // return;\n\n\n      http.post({\n        url: \"/tell-info/userModify\",\n        data: params\n      }).then(function (res) {\n        console.log(res);\n\n        if (res.code == 200) {\n          message.success(\"新增成功\"); // this.getData();\n        } else {\n          message.error(res.msg || \"新增失败\");\n          window.comfirmOk = \"fail\";\n        }\n      });\n    };\n\n    _this.handleUpdateRecord = function (_ref) {\n      var form = _ref.form;\n      var formData = form.getFieldsValue();\n      console.log(\"更新记录\", form.getFieldsValue());\n      console.log(_this.record);\n\n      if (formData.password != formData.password2) {\n        message.error(\"密码与确认密码不一致\");\n        window.comfirmOk = \"fail\";\n        return;\n      }\n\n      if (formData.passwordOld) {\n        // console.log(\"passwordOld\", formData.passwordOld);\n        _this.checkPassword(form).then(function (res) {\n          if (res.code == 200) {\n            // console.log(\"checkPassword 成功\", formData);\n            if (formData.password.length == 0) {\n              message.error(\"密码不能为空\");\n              window.comfirmOk = \"fail\";\n              return;\n            }\n\n            _this.updateUser(form);\n          } else {\n            message.error(\"原密码校验失败\");\n            window.comfirmOk = \"fail\";\n          }\n        });\n      } else {\n        // console.log(formData.passwordOld, \"不更新\");\n        _this.updateUser(form);\n      }\n    };\n\n    _this.checkPassword = function (form) {\n      var formData = form.getFieldsValue();\n      var params = {\n        user_id: formData.user_id,\n        ori_passwd: md5(formData.passwordOld)\n      }; // console.log(params);\n      // return;\n\n      return http.post({\n        url: \"/tell-info/checkPassword\",\n        data: params\n      });\n    };\n\n    _this.updateUser = function (form) {\n      var formData = form.getFieldsValue(); // console.log(\"更新记录\", form.getFieldsValue());\n\n      var role = _this.state.roleList.filter(function (item) {\n        return item.role_id == formData.role_id;\n      }); // if (formData.password.length == 0) {\n      //     message.error(\"密码不能为空\");\n      //     window.comfirmOk = \"fail\";\n      //     return;\n      // }\n\n\n      var params = {\n        oper_type: 2,\n        //oper_type // 操作类型  1-新增， 2-修改   3-删除\n        user_id: formData.user_id,\n        user_name: formData.user_name,\n        role_id: role[0].role_id,\n        role_name: role[0].role_name,\n        status: formData.status / 1,\n        // password: md5(formData.password),\n        password: formData.password ? md5(formData.password) : \"\"\n      };\n      console.log(params); // return;\n\n      http.post({\n        url: \"/tell-info/userModify\",\n        data: params\n      }).then(function (res) {\n        console.log(res); // let msg = res.message;\n\n        if (res.code == 200) {\n          message.success(\"修改成功\");\n        } else {\n          message.error(res.msg || \"修改失败\");\n          window.comfirmOk = \"fail\";\n        }\n      });\n    };\n\n    _this.handleDeleteRecord = function (record) {\n      console.log(\"删除记录 \", record);\n      var params = {\n        oper_type: 3,\n        //oper_type // 操作类型  1-新增， 2-修改   3-删除\n        user_id: record.user_id\n      };\n      http.post({\n        url: \"/tell-info/userModify\",\n        data: params\n      }).then(function (res) {\n        // console.log(res);\n        if (res.code == 200) {\n          message.success(\"删除成功\");\n        }\n\n        _this.getData();\n      });\n    };\n\n    _this.setUpdateModal = function (_ref2) {\n      var form = _ref2.form,\n          record = _ref2.record;\n      // console.log(record, form);\n      _this.record = record;\n      form.setFieldsValue({\n        user_id: record.user_id,\n        user_name: record.user_name,\n        role_id: record.role_id,\n        status: record.status + \"\",\n        // role_name: role[0].role_name,\n        passwordOld: \"\",\n        password: \"\",\n        password2: \"\"\n      });\n    };\n\n    _this.getRoleList = function () {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var pagination = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        current: 1,\n        pageSize: 10000\n      };\n      params = _objectSpread({}, params, {\n        scene: 1,\n        role_id: 0,\n        // role_name: \"\",\n        page: pagination.current,\n        limit: pagination.pageSize\n      }); // console.log(params);\n\n      http.post({\n        url: \"/tell-info/roleList\",\n        data: params\n      }).then(function (res) {\n        // console.log(\"getRoleList\", res);\n        //解析数据字典\n        if (res.list && res.list.length > 0) {\n          var roleList = res.list.filter(function (item) {\n            return item.status == 1;\n          }).map(function (item) {\n            return {\n              role_id: item.role_id,\n              role_name: item.role_name,\n              key: item.role_id,\n              value: item.role_name\n            };\n          });\n\n          if (JSON.stringify(roleList) != JSON.stringify(_this.state.roleList)) {\n            _this.setState({\n              roleList: roleList\n            });\n          } // this.setState({\n          //     roleList: roleList,\n          // });\n\n        }\n      });\n    };\n\n    _this.getData = function () {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var pagination = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        current: 1,\n        pageSize: 13\n      };\n      params = _objectSpread({}, params, {\n        page: pagination.current,\n        limit: pagination.pageSize\n      });\n      http.post({\n        // url: \"/stockHolder/list\",\n        url: \"/tell-info/authUserList\",\n        data: params\n      }).then(function (res) {\n        // console.log(res);\n        //解析数据字典\n        if (res.list && res.list.length > 0) {\n          var userList = res.list; // parseDictValue(userList);\n\n          parseArrDictValue(userList, \"status\", \"authStatus\");\n        } else {\n          message.info(\"查询结果为空\");\n        }\n\n        var pgn = {\n          current: pagination.current,\n          pageSize: pagination.pageSize,\n          total: res.total || 0\n        }; // this.setState({\n        //     info: res.list ? res.list : [],\n        //     pagination: pgn,\n        // });\n\n        if (JSON.stringify(res.list) != JSON.stringify(_this.state.info)) {\n          _this.setState({\n            info: res.list ? res.list : [],\n            pagination: pgn\n          });\n        }\n      });\n    };\n\n    _this.handleSearch = function (params, pagination) {\n      _this.getData(params, pagination);\n    };\n\n    _this.getInfo = function () {\n      // this.getData();\n      _this.getRoleList();\n    };\n\n    _this.debounceGet = function () {\n      if (window.getInfoTimer) {\n        // console.log(\"清除 请求\");\n        clearTimeout(window.getInfoTimer);\n        window.getInfoTimer = undefined;\n      }\n\n      window.getInfoTimer = setTimeout(window.login, 400);\n    };\n\n    return _this;\n  }\n\n  _createClass(systemUser, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n      this.getRoleList();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var scroll = {\n        x: 1000,\n        y: 445\n      };\n      var info = this.state.info; //批量\n      // let { selectRow } = this.state;\n      // const rowSelection = {\n      //     selectRow,\n      //     onChange: this.handleTableChange,\n      // };\n\n      window.login = this.getInfo;\n      this.debounceGet();\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573\n        },\n        __self: this\n      }, React.createElement(CurdComponent // rowKey={\"index\"}\n      // isShowSearchForm={false}\n      // btnText2=\"查全部\"\n      , {\n        onSearchClick: this.handleSearch,\n        getSearchFormFields: getSearchFormFields // searchLoading={this.state.searchLoading}\n        ,\n        insertBtnText: \"新增用户\" // 不传 就没新增按钮\n        ,\n        getInsertFormFields: this.getInsertFormFields,\n        insertRecord: this.handleInsertRecord,\n        insertModalText: \"新增用户\",\n        updateModalText: \"修改用户\" // col=\"1\"\n        ,\n        width: \"668px\",\n        pagination: this.state.pagination,\n        getUpdateFormFields: this.getUpdateFormFields,\n        setUpdateModal: this.setUpdateModal,\n        updateRecord: this.handleUpdateRecord // 不传 就没编辑\n        ,\n        deleteRecord: this.handleDeleteRecord // 不传 就没删除\n        ,\n        centered: true,\n        columns: columns,\n        dataSource: info,\n        scroll: scroll // rowSelection={rowSelection} //批量选择 操作\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return systemUser;\n}(React.PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    path: state.RouterModel.path\n  };\n};\n\nexport default connect(mapStateToProps, null)(systemUser);","map":{"version":3,"sources":["D:/company/algo-manage/src/algo/modules/auth/pages/systemUser/index.js"],"names":["React","CurdComponent","SelectOption","md5","connect","columns","params","title","dataIndex","width","getSearchFormFields","label","id","component","systemUser","getInsertFormFields","initialValue","rules","required","message","pattern","max","state","roleList","placeholder","allowClear","style","getUpdateFormFields","dict","authStatus","searchLoading","selectRow","info","pagination","total","handleTableChange","selectedRowKeys","console","log","setState","handleInsertRecord","formData","role","filter","item","role_id","oper_type","user_id","user_name","role_name","password","password2","error","window","comfirmOk","http","post","url","data","then","res","code","success","msg","handleUpdateRecord","form","getFieldsValue","record","passwordOld","checkPassword","length","updateUser","ori_passwd","status","handleDeleteRecord","getData","setUpdateModal","setFieldsValue","getRoleList","current","pageSize","scene","page","limit","list","map","key","value","JSON","stringify","userList","parseArrDictValue","pgn","handleSearch","getInfo","debounceGet","getInfoTimer","clearTimeout","undefined","setTimeout","login","scroll","x","y","PureComponent","mapStateToProps","ownProps","path","RouterModel"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport CurdComponent from \"@/components/CurdComponent\";\r\nimport SelectOption from \"@/components/SelectOption\";\r\n// import UploadWrap from \"@/components/UploadWrap\";\r\nimport { Input } from \"antd\";\r\nimport md5 from \"js-md5\"; //全局引入\r\nimport { connect } from \"react-redux\";\r\n\r\n// const getUpdateFormFields = () => {\r\n//     return []\r\n// };\r\n\r\nconst columns = (params) => {\r\n    return [\r\n        {\r\n            title: \"ID\",\r\n            dataIndex: \"id\",\r\n            width: 100,\r\n        },\r\n        {\r\n            title: \"系统用户ID\",\r\n            dataIndex: \"user_id\",\r\n            // width: 100,\r\n        },\r\n        {\r\n            title: \"系统用户名称\",\r\n            dataIndex: \"user_name\",\r\n            // width: 140,\r\n        },\r\n        {\r\n            title: \"角色编码\",\r\n            dataIndex: \"role_id\",\r\n            // width: 100,\r\n        },\r\n        {\r\n            title: \"角色名称\",\r\n            dataIndex: \"role_name\",\r\n            // width: 140,\r\n        },\r\n        {\r\n            title: \"系统用户状态\",\r\n            dataIndex: \"statusValue\",\r\n            // width: 100,\r\n        },\r\n        {\r\n            title: \"创建时间\",\r\n            dataIndex: \"create_time\",\r\n            width: 240,\r\n        },\r\n    ];\r\n};\r\n\r\nlet getSearchFormFields = () => {\r\n    return [\r\n        {\r\n            label: \"系统用户名称\",\r\n            // label: <span>用&nbsp;户&nbsp;名&nbsp;称</span>,\r\n            id: \"user_name\",\r\n            component: <Input placeholder=\"请输入\" />,\r\n        },\r\n    ];\r\n};\r\n//export default\r\nclass systemUser extends React.PureComponent {\r\n    getInsertFormFields = () => {\r\n        return [\r\n            {\r\n                label: \"系统用户ID（*ID名称只能为字母或字母与数字的组合）\",\r\n                id: \"user_id\",\r\n                initialValue: \"\",\r\n                rules: [\r\n                    {\r\n                        required: true,\r\n                        message: \"参数不能为空\",\r\n                    },\r\n                    {\r\n                        message: \"请检查格式\",\r\n                        pattern: /^(?![0-9]+$)[a-zA-Z0-9]+$/i,\r\n                    },\r\n                    // {\r\n                    //     validator: checkLength(10),\r\n                    //     trigger: [\"change\", \"blur\"],\r\n                    // },\r\n                    {\r\n                        max: 10,\r\n                        message: \"最大长度为10\",\r\n                    },\r\n                ],\r\n                component: <Input placeholder=\"请输入\" />,\r\n            },\r\n            {\r\n                label: \"系统用户名称\",\r\n                id: \"user_name\",\r\n                initialValue: \"\",\r\n                rules: [\r\n                    {\r\n                        required: true,\r\n                        message: \"参数不能为空\",\r\n                    },\r\n                    // {\r\n                    //     validator: checkLength(20),\r\n                    //     trigger: [\"change\", \"blur\"],\r\n                    // },\r\n                    {\r\n                        message: \"请检查格式\",\r\n                        pattern: /^\\S*$/i,\r\n                    },\r\n                    {\r\n                        max: 10,\r\n                        message: \"最大长度为10\",\r\n                    },\r\n                ],\r\n                component: (\r\n                    // <Input placeholder=\"请输入\" readOnly disabled />\r\n                    <Input placeholder=\"请输入\" />\r\n                ),\r\n            },\r\n            {\r\n                label: \"角色名称\",\r\n                id: \"role_id\",\r\n                // initialValue: this.state.roleList[0]\r\n                //     ? this.state.roleList[0].key\r\n                //     : \"\",\r\n                rules: [\r\n                    {\r\n                        required: true,\r\n                        message: \"参数不能为空\",\r\n                    },\r\n                ],\r\n                component: SelectOption(this.state.roleList, {\r\n                    placeholder: \"请选择\",\r\n                    allowClear: false,\r\n                    style: {\r\n                        width: 400,\r\n                    },\r\n                }),\r\n            },\r\n            {\r\n                label: \"设置密码\",\r\n                id: \"password\",\r\n                initialValue: \"\",\r\n                rules: [\r\n                    {\r\n                        required: true,\r\n                        message: \"参数不能为空\",\r\n                    },\r\n                    {\r\n                        max: 20,\r\n                        message: \"最大长度为20\",\r\n                    },\r\n                ],\r\n                component: <Input.Password placeholder=\"请输入\" />,\r\n            },\r\n            {\r\n                label: \"确认密码\",\r\n                id: \"password2\",\r\n                initialValue: \"\",\r\n                rules: [\r\n                    {\r\n                        required: true,\r\n                        message: \"参数不能为空\",\r\n                    },\r\n                    {\r\n                        max: 20,\r\n                        message: \"最大长度为20\",\r\n                    },\r\n                ],\r\n                component: <Input.Password placeholder=\"请输入\" />,\r\n            },\r\n        ];\r\n    };\r\n    getUpdateFormFields = () => {\r\n        return [\r\n            {\r\n                label: \"系统用户ID（*ID名称只能为字母或字母与数字的组合）\",\r\n                id: \"user_id\",\r\n                initialValue: \"\",\r\n                rules: [\r\n                    {\r\n                        required: true,\r\n                        message: \"参数不能为空\",\r\n                    },\r\n                    {\r\n                        message: \"请检查格式\",\r\n                        pattern: /^(?![0-9]+$)[a-zA-Z0-9]+$/i,\r\n                    },\r\n                    // {\r\n                    //     validator: checkLength(20),\r\n                    //     trigger: [\"change\", \"blur\"],\r\n                    // },\r\n                    {\r\n                        max: 10,\r\n                        message: \"最大长度为10\",\r\n                    },\r\n                ],\r\n                component: <Input placeholder=\"请输入\" disabled />,\r\n            },\r\n            {\r\n                label: \"系统用户名称\",\r\n                id: \"user_name\",\r\n                initialValue: \"\",\r\n                rules: [\r\n                    {\r\n                        required: true,\r\n                        message: \"参数不能为空\",\r\n                    },\r\n                    // {\r\n                    //     validator: checkLength(20),\r\n                    //     trigger: [\"change\", \"blur\"],\r\n                    // },\r\n                    {\r\n                        message: \"请检查格式\",\r\n                        pattern: /^\\S*$/i,\r\n                    },\r\n                    {\r\n                        max: 10,\r\n                        message: \"最大长度为10\",\r\n                    },\r\n                ],\r\n                component: (\r\n                    // <Input placeholder=\"请输入\" readOnly disabled />\r\n                    <Input placeholder=\"请输入\" />\r\n                ),\r\n            },\r\n            {\r\n                label: \"系统用户状态\",\r\n                id: \"status\",\r\n                rules: [\r\n                    {\r\n                        required: true,\r\n                        message: \"参数不能为空\",\r\n                    },\r\n                ],\r\n                component: SelectOption(dict.authStatus, {\r\n                    placeholder: \"请选择\",\r\n                    allowClear: false,\r\n                }),\r\n            },\r\n            {\r\n                label: \"角色名称\",\r\n                id: \"role_id\",\r\n                // initialValue: this.state.roleList[0]\r\n                //     ? this.state.roleList[0].key\r\n                //     : \"\",\r\n                rules: [\r\n                    {\r\n                        required: true,\r\n                        message: \"参数不能为空\",\r\n                    },\r\n                ],\r\n                component: SelectOption(this.state.roleList, {\r\n                    placeholder: \"请选择\",\r\n                    allowClear: false,\r\n                    style: {\r\n                        width: 400,\r\n                    },\r\n                }),\r\n            },\r\n            {\r\n                label: \"原密码\",\r\n                id: \"passwordOld\",\r\n                initialValue: \"\",\r\n                rules: [\r\n                    {\r\n                        max: 20,\r\n                        message: \"最大长度为20\",\r\n                    },\r\n                ],\r\n                component: <Input.Password placeholder=\"请输入\" />,\r\n            },\r\n            {\r\n                label: \"设置密码\",\r\n                id: \"password\",\r\n                initialValue: \"\",\r\n                rules: [\r\n                    {\r\n                        max: 20,\r\n                        message: \"最大长度为20\",\r\n                    },\r\n                ],\r\n                component: <Input.Password placeholder=\"请输入\" />,\r\n            },\r\n            {\r\n                label: \"确认密码\",\r\n                id: \"password2\",\r\n                initialValue: \"\",\r\n                rules: [\r\n                    {\r\n                        max: 20,\r\n                        message: \"最大长度为20\",\r\n                    },\r\n                ],\r\n                component: <Input.Password placeholder=\"请输入\" />,\r\n            },\r\n        ];\r\n    };\r\n    state = {\r\n        searchLoading: false,\r\n        selectRow: [],\r\n        info: [],\r\n        pagination: { total: 0 },\r\n        roleList: [], //角色列表\r\n    };\r\n    //批量选择\r\n    handleTableChange = (selectedRowKeys) => {\r\n        console.log(\"批量选择\");\r\n        this.setState({\r\n            selectRow: selectedRowKeys,\r\n        });\r\n    };\r\n\r\n    handleInsertRecord = (formData) => {\r\n        console.log(\"新增接口\", formData);\r\n        let role = this.state.roleList.filter(\r\n            (item) => item.role_id == formData.role_id\r\n        );\r\n        let params = {\r\n            oper_type: 1, //oper_type // 操作类型  1-新增， 2-修改   3-删除\r\n            user_id: formData.user_id,\r\n            user_name: formData.user_name,\r\n            role_id: role[0].role_id,\r\n            role_name: role[0].role_name,\r\n            password: md5(formData.password),\r\n        };\r\n        // console.log(params);\r\n        if (formData.password != formData.password2) {\r\n            message.error(\"密码与确认密码不一致\");\r\n            window.comfirmOk = \"fail\";\r\n            return;\r\n        }\r\n        // return;\r\n        http.post({\r\n            url: \"/tell-info/userModify\",\r\n            data: params,\r\n        }).then((res) => {\r\n            console.log(res);\r\n            if (res.code == 200) {\r\n                message.success(\"新增成功\");\r\n                // this.getData();\r\n            } else {\r\n                message.error(res.msg || \"新增失败\");\r\n                window.comfirmOk = \"fail\";\r\n            }\r\n        });\r\n    };\r\n    //更新记录\r\n    handleUpdateRecord = ({ form }) => {\r\n        let formData = form.getFieldsValue();\r\n        console.log(\"更新记录\", form.getFieldsValue());\r\n        console.log(this.record);\r\n        if (formData.password != formData.password2) {\r\n            message.error(\"密码与确认密码不一致\");\r\n            window.comfirmOk = \"fail\";\r\n            return;\r\n        }\r\n        if (formData.passwordOld) {\r\n            // console.log(\"passwordOld\", formData.passwordOld);\r\n            this.checkPassword(form).then((res) => {\r\n                if (res.code == 200) {\r\n                    // console.log(\"checkPassword 成功\", formData);\r\n                    if (formData.password.length == 0) {\r\n                        message.error(\"密码不能为空\");\r\n                        window.comfirmOk = \"fail\";\r\n                        return;\r\n                    }\r\n                    this.updateUser(form);\r\n                } else {\r\n                    message.error(\"原密码校验失败\");\r\n                    window.comfirmOk = \"fail\";\r\n                }\r\n            });\r\n        } else {\r\n            // console.log(formData.passwordOld, \"不更新\");\r\n            this.updateUser(form);\r\n        }\r\n    };\r\n    checkPassword = (form) => {\r\n        let formData = form.getFieldsValue();\r\n        let params = {\r\n            user_id: formData.user_id,\r\n            ori_passwd: md5(formData.passwordOld),\r\n        };\r\n        // console.log(params);\r\n        // return;\r\n        return http.post({\r\n            url: \"/tell-info/checkPassword\",\r\n            data: params,\r\n        });\r\n    };\r\n    updateUser = (form) => {\r\n        let formData = form.getFieldsValue();\r\n        // console.log(\"更新记录\", form.getFieldsValue());\r\n        let role = this.state.roleList.filter(\r\n            (item) => item.role_id == formData.role_id\r\n        );\r\n        // if (formData.password.length == 0) {\r\n        //     message.error(\"密码不能为空\");\r\n        //     window.comfirmOk = \"fail\";\r\n        //     return;\r\n        // }\r\n        let params = {\r\n            oper_type: 2, //oper_type // 操作类型  1-新增， 2-修改   3-删除\r\n            user_id: formData.user_id,\r\n            user_name: formData.user_name,\r\n            role_id: role[0].role_id,\r\n            role_name: role[0].role_name,\r\n            status: formData.status / 1,\r\n            // password: md5(formData.password),\r\n            password: formData.password ? md5(formData.password) : \"\",\r\n        };\r\n        console.log(params);\r\n        // return;\r\n        http.post({\r\n            url: \"/tell-info/userModify\",\r\n            data: params,\r\n        }).then((res) => {\r\n            console.log(res);\r\n            // let msg = res.message;\r\n            if (res.code == 200) {\r\n                message.success(\"修改成功\");\r\n            } else {\r\n                message.error(res.msg || \"修改失败\");\r\n                window.comfirmOk = \"fail\";\r\n            }\r\n        });\r\n    };\r\n    //删除记录\r\n    handleDeleteRecord = (record) => {\r\n        console.log(\"删除记录 \", record);\r\n        let params = {\r\n            oper_type: 3, //oper_type // 操作类型  1-新增， 2-修改   3-删除\r\n            user_id: record.user_id,\r\n        };\r\n        http.post({\r\n            url: \"/tell-info/userModify\",\r\n            data: params,\r\n        }).then((res) => {\r\n            // console.log(res);\r\n            if (res.code == 200) {\r\n                message.success(\"删除成功\");\r\n            }\r\n            this.getData();\r\n        });\r\n    };\r\n    //填入更新数据\r\n    setUpdateModal = ({ form, record }) => {\r\n        // console.log(record, form);\r\n        this.record = record;\r\n        form.setFieldsValue({\r\n            user_id: record.user_id,\r\n            user_name: record.user_name,\r\n            role_id: record.role_id,\r\n            status: record.status + \"\",\r\n            // role_name: role[0].role_name,\r\n            passwordOld: \"\",\r\n            password: \"\",\r\n            password2: \"\",\r\n        });\r\n    };\r\n    getRoleList = (\r\n        params = {},\r\n        pagination = { current: 1, pageSize: 10000 }\r\n    ) => {\r\n        params = {\r\n            ...params,\r\n            scene: 1,\r\n            role_id: 0,\r\n            // role_name: \"\",\r\n            page: pagination.current,\r\n            limit: pagination.pageSize,\r\n        };\r\n        // console.log(params);\r\n        http.post({\r\n            url: \"/tell-info/roleList\",\r\n            data: params,\r\n        }).then((res) => {\r\n            // console.log(\"getRoleList\", res);\r\n            //解析数据字典\r\n            if (res.list && res.list.length > 0) {\r\n                let roleList = res.list\r\n                    .filter((item) => item.status == 1)\r\n                    .map((item) => {\r\n                        return {\r\n                            role_id: item.role_id,\r\n                            role_name: item.role_name,\r\n                            key: item.role_id,\r\n                            value: item.role_name,\r\n                        };\r\n                    });\r\n                if (\r\n                    JSON.stringify(roleList) !=\r\n                    JSON.stringify(this.state.roleList)\r\n                ) {\r\n                    this.setState({\r\n                        roleList: roleList,\r\n                    });\r\n                }\r\n                // this.setState({\r\n                //     roleList: roleList,\r\n                // });\r\n            }\r\n        });\r\n    };\r\n    getData = (params = {}, pagination = { current: 1, pageSize: 13 }) => {\r\n        params = {\r\n            ...params,\r\n            page: pagination.current,\r\n            limit: pagination.pageSize,\r\n        };\r\n        http.post({\r\n            // url: \"/stockHolder/list\",\r\n            url: \"/tell-info/authUserList\",\r\n            data: params,\r\n        }).then((res) => {\r\n            // console.log(res);\r\n\r\n            //解析数据字典\r\n            if (res.list && res.list.length > 0) {\r\n                let userList = res.list;\r\n                // parseDictValue(userList);\r\n                parseArrDictValue(userList, \"status\", \"authStatus\");\r\n            } else {\r\n                message.info(\"查询结果为空\");\r\n            }\r\n            let pgn = {\r\n                current: pagination.current,\r\n                pageSize: pagination.pageSize,\r\n                total: res.total || 0,\r\n            };\r\n            // this.setState({\r\n            //     info: res.list ? res.list : [],\r\n            //     pagination: pgn,\r\n            // });\r\n            if (JSON.stringify(res.list) != JSON.stringify(this.state.info)) {\r\n                this.setState({\r\n                    info: res.list ? res.list : [],\r\n                    pagination: pgn,\r\n                });\r\n            }\r\n        });\r\n    };\r\n    handleSearch = (params, pagination) => {\r\n        this.getData(params, pagination);\r\n    };\r\n    componentDidMount() {\r\n        this.getData();\r\n        this.getRoleList();\r\n    }\r\n    getInfo = () => {\r\n        // this.getData();\r\n        this.getRoleList();\r\n    };\r\n    debounceGet = () => {\r\n        if (window.getInfoTimer) {\r\n            // console.log(\"清除 请求\");\r\n            clearTimeout(window.getInfoTimer);\r\n            window.getInfoTimer = undefined;\r\n        }\r\n        window.getInfoTimer = setTimeout(window.login, 400);\r\n    };\r\n    render() {\r\n        let scroll = { x: 1000, y: 445 };\r\n        let info = this.state.info;\r\n        //批量\r\n        // let { selectRow } = this.state;\r\n        // const rowSelection = {\r\n        //     selectRow,\r\n        //     onChange: this.handleTableChange,\r\n        // };\r\n        window.login = this.getInfo;\r\n        this.debounceGet();\r\n        return (\r\n            <div>\r\n                <CurdComponent\r\n                    // rowKey={\"index\"}\r\n                    // isShowSearchForm={false}\r\n                    // btnText2=\"查全部\"\r\n                    onSearchClick={this.handleSearch}\r\n                    getSearchFormFields={getSearchFormFields}\r\n                    // searchLoading={this.state.searchLoading}\r\n                    insertBtnText={\"新增用户\"} // 不传 就没新增按钮\r\n                    getInsertFormFields={this.getInsertFormFields}\r\n                    insertRecord={this.handleInsertRecord}\r\n                    insertModalText={\"新增用户\"}\r\n                    updateModalText={\"修改用户\"}\r\n                    // col=\"1\"\r\n                    width=\"668px\"\r\n                    pagination={this.state.pagination}\r\n                    getUpdateFormFields={this.getUpdateFormFields}\r\n                    setUpdateModal={this.setUpdateModal}\r\n                    updateRecord={this.handleUpdateRecord} // 不传 就没编辑\r\n                    deleteRecord={this.handleDeleteRecord} // 不传 就没删除\r\n                    centered={true}\r\n                    columns={columns}\r\n                    dataSource={info}\r\n                    scroll={scroll}\r\n                    // rowSelection={rowSelection} //批量选择 操作\r\n                >\r\n                    {/* <div\r\n                        urlPrefix=\"/stockHolder\"\r\n                        title=\"系统用户\"\r\n                        sucCallback={this.getData}\r\n                    ></div> */}\r\n                </CurdComponent>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        path: state.RouterModel.path,\r\n    };\r\n};\r\nexport default connect(mapStateToProps, null)(systemUser);\r\n"]},"metadata":{},"sourceType":"module"}