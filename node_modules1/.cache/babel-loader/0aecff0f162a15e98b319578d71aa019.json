{"ast":null,"code":"import _defineProperty from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nvar _jsxFileName = \"D:\\\\company\\\\algo-manage\\\\src\\\\algo\\\\modules\\\\manage\\\\pages\\\\algoGroup\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport CurdComponent from \"@/components/CurdComponent\"; // import SelectOption from \"@/components/SelectOption\";\n\nvar columns = function columns(params) {\n  return [{\n    title: \"ID\",\n    dataIndex: \"id\",\n    width: 200\n  }, {\n    title: \"权限\",\n    dataIndex: \"algoProperty\",\n    width: 200\n  }, {\n    title: \"可用算法\",\n    dataIndex: \"algoUsed\"\n  }];\n};\n\nvar getSearchFormFields = function getSearchFormFields() {\n  return [{\n    label: \"权限ID\",\n    id: \"id\",\n    component: React.createElement(_Input, {\n      placeholder: \"\\u8BF7\\u8F93\\u5165\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    })\n  }, {\n    label: \"算法名称\",\n    id: \"algoName\",\n    component: React.createElement(_Input, {\n      placeholder: \"\\u8BF7\\u8F93\\u5165\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    })\n  }];\n};\n\nvar algoGroup =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(algoGroup, _React$PureComponent);\n\n  function algoGroup() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, algoGroup);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(algoGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      searchLoading: false,\n      selectRow: [],\n      info: [],\n      pagination: {\n        total: 0\n      }\n    };\n\n    _this.handleTableChange = function (selectedRowKeys) {\n      console.log(\"批量选择\");\n\n      _this.setState({\n        selectRow: selectedRowKeys\n      });\n    };\n\n    _this.handleInsertRecord = function (params) {\n      // console.log(params);\n      http.post({\n        url: \"/algo-group-info/addAlgoGroupInfo\",\n        data: params\n      }).then(function (res) {\n        console.log(res); //解析数据字典\n\n        var msg = res.message;\n\n        if (res.code == 0) {\n          message.success(msg);\n\n          _this.getData();\n        } else if (res.code == 20000) {\n          message.error(msg.substring(msg.indexOf(\"[\") + 1, msg.indexOf(\"HTTP\")));\n        } else {\n          message.error(msg);\n        }\n      });\n    };\n\n    _this.getInsertFormFields = function () {\n      return [{\n        label: \"权限\",\n        id: \"AlgoProperty\",\n        initialValue: \"\",\n        rules: [{\n          required: true,\n          message: \"参数不能为空\"\n        }],\n        component: React.createElement(_Input, {\n          placeholder: \"\\u8BF7\\u8F93\\u5165\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        })\n      }];\n    };\n\n    _this.getUpdateFormFields = function () {\n      return [{\n        label: \"权限\",\n        id: \"AlgoProperty\",\n        initialValue: \"\",\n        rules: [{\n          required: true,\n          message: \"参数不能为空\"\n        }],\n        component: React.createElement(_Input, {\n          placeholder: \"\\u8BF7\\u8F93\\u5165\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        })\n      }];\n    };\n\n    _this.setUpdateModal = function (_ref) {\n      var form = _ref.form,\n          record = _ref.record;\n      // console.log(record, form);\n      _this.record = record;\n      form.setFieldsValue({\n        AlgoProperty: record.algoProperty\n      });\n    };\n\n    _this.handleUpdateRecord = function (_ref2) {\n      var form = _ref2.form;\n      console.log(form.getFieldsValue()); // return;\n\n      var params = form.getFieldsValue();\n      params.id = _this.record.id;\n      console.log(params); // return;\n\n      http.post({\n        url: \"/algo-group-info/updateAlgoGroupInfo\",\n        data: params\n      }).then(function (res) {\n        console.log(res);\n        var msg = res.message;\n\n        if (res.code == 0) {\n          message.success(msg);\n\n          _this.getData();\n        } else if (res.code == 20000) {\n          message.error(msg.substring(msg.indexOf(\"[\") + 1, msg.indexOf(\"HTTP\")));\n        } else {\n          message.error(msg);\n        }\n      });\n    };\n\n    _this.handleDeleteRecord = function (record) {\n      console.log(\"删除记录 \", record);\n    };\n\n    _this.getData = function () {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var pagination = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        current: 1,\n        pageSize: 11\n      };\n      params = _objectSpread({}, params, {\n        pageId: pagination.current,\n        pageNum: pagination.pageSize\n      }); // params.token = \"\";\n\n      http.post({\n        url: \"/algo-group-info/list\",\n        data: params\n      }).then(function (res) {\n        console.log(res); //解析数据字典\n\n        if (res.data.records && res.data.records.length > 0) {\n          parseDict(res.data.records); // showTip(this);\n        } else {\n          message.info(\"查询结果为空\");\n        }\n\n        var pgn = {\n          current: pagination.current,\n          pageSize: pagination.pageSize,\n          total: res.data.total || 0\n        };\n\n        _this.setState({\n          info: res.data.records,\n          pagination: pgn\n        });\n      });\n    };\n\n    _this.handleSearch = function (params, pagination) {\n      _this.getData(params, pagination);\n    };\n\n    return _this;\n  }\n\n  _createClass(algoGroup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var scroll = {\n        x: 1000,\n        y: 445\n      };\n      var info = this.state.info; //批量\n      // let { selectRow } = this.state;\n      // const rowSelection = {\n      //     selectRow,\n      //     onChange: this.handleTableChange,\n      // };\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(CurdComponent // rowKey={\"index\"}\n      // btnText2=\"查全部\"\n      // isShowSearchForm={false}\n      , {\n        onSearchClick: this.handleSearch,\n        getSearchFormFields: getSearchFormFields // searchLoading={this.state.searchLoading}\n        ,\n        insertBtnText: \"新增\" // 不传 就没新增按钮\n        ,\n        getInsertFormFields: this.getInsertFormFields,\n        insertRecord: this.handleInsertRecord,\n        insertModalText: \"新增权限\",\n        updateModalText: \"修改权限\" // col=\"2\"\n        ,\n        width: \"600px\",\n        pagination: this.state.pagination,\n        getUpdateFormFields: this.getUpdateFormFields,\n        setUpdateModal: this.setUpdateModal,\n        updateRecord: this.handleUpdateRecord // 不传 就没编辑\n        // deleteRecord={this.handleDeleteRecord} // 不传 就没删除\n        ,\n        centered: true,\n        columns: columns,\n        dataSource: info,\n        scroll: scroll // rowSelection={rowSelection} //批量选择 操作\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return algoGroup;\n}(React.PureComponent);\n\nexport { algoGroup as default };","map":{"version":3,"sources":["D:/company/algo-manage/src/algo/modules/manage/pages/algoGroup/index.js"],"names":["React","CurdComponent","columns","params","title","dataIndex","width","getSearchFormFields","label","id","component","algoGroup","state","searchLoading","selectRow","info","pagination","total","handleTableChange","selectedRowKeys","console","log","setState","handleInsertRecord","http","post","url","data","then","res","msg","message","code","success","getData","error","substring","indexOf","getInsertFormFields","initialValue","rules","required","getUpdateFormFields","setUpdateModal","form","record","setFieldsValue","AlgoProperty","algoProperty","handleUpdateRecord","getFieldsValue","handleDeleteRecord","current","pageSize","pageId","pageNum","records","length","parseDict","pgn","handleSearch","scroll","x","y","PureComponent"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport CurdComponent from \"@/components/CurdComponent\";\r\n// import SelectOption from \"@/components/SelectOption\";\r\nimport { Input } from \"antd\";\r\n\r\nconst columns = (params) => {\r\n    return [\r\n        {\r\n            title: \"ID\",\r\n            dataIndex: \"id\",\r\n            width: 200,\r\n        },\r\n        {\r\n            title: \"权限\",\r\n            dataIndex: \"algoProperty\",\r\n            width: 200,\r\n        },\r\n        {\r\n            title: \"可用算法\",\r\n            dataIndex: \"algoUsed\",\r\n        },\r\n    ];\r\n};\r\n\r\nlet getSearchFormFields = () => {\r\n    return [\r\n        {\r\n            label: \"权限ID\",\r\n            id: \"id\",\r\n            component: <Input placeholder=\"请输入\" />,\r\n        },\r\n        {\r\n            label: \"算法名称\",\r\n            id: \"algoName\",\r\n            component: <Input placeholder=\"请输入\" />,\r\n        },\r\n    ];\r\n};\r\n\r\nexport default class algoGroup extends React.PureComponent {\r\n    state = {\r\n        searchLoading: false,\r\n        selectRow: [],\r\n        info: [],\r\n        pagination: { total: 0 },\r\n    };\r\n    //批量选择\r\n    handleTableChange = (selectedRowKeys) => {\r\n        console.log(\"批量选择\");\r\n        this.setState({\r\n            selectRow: selectedRowKeys,\r\n        });\r\n    };\r\n\r\n    handleInsertRecord = (params) => {\r\n        // console.log(params);\r\n        http.post({\r\n            url: \"/algo-group-info/addAlgoGroupInfo\",\r\n            data: params,\r\n        }).then((res) => {\r\n            console.log(res);\r\n            //解析数据字典\r\n            let msg = res.message;\r\n            if (res.code == 0) {\r\n                message.success(msg);\r\n                this.getData();\r\n            } else if (res.code == 20000) {\r\n                message.error(\r\n                    msg.substring(msg.indexOf(\"[\") + 1, msg.indexOf(\"HTTP\"))\r\n                );\r\n            } else {\r\n                message.error(msg);\r\n            }\r\n        });\r\n    };\r\n    getInsertFormFields = () => {\r\n        return [\r\n            {\r\n                label: \"权限\",\r\n                id: \"AlgoProperty\",\r\n                initialValue: \"\",\r\n                rules: [\r\n                    {\r\n                        required: true,\r\n                        message: \"参数不能为空\",\r\n                    },\r\n                ],\r\n                component: <Input placeholder=\"请输入\" />,\r\n            },\r\n        ];\r\n    };\r\n    getUpdateFormFields = () => {\r\n        return [\r\n            {\r\n                label: \"权限\",\r\n                id: \"AlgoProperty\",\r\n                initialValue: \"\",\r\n                rules: [\r\n                    {\r\n                        required: true,\r\n                        message: \"参数不能为空\",\r\n                    },\r\n                ],\r\n                component: <Input placeholder=\"请输入\" />,\r\n            },\r\n        ];\r\n    };\r\n    //填入更新数据\r\n    setUpdateModal = ({ form, record }) => {\r\n        // console.log(record, form);\r\n        this.record = record;\r\n        form.setFieldsValue({\r\n            AlgoProperty: record.algoProperty,\r\n        });\r\n    };\r\n    //更新记录\r\n    handleUpdateRecord = ({ form }) => {\r\n        console.log(form.getFieldsValue());\r\n        // return;\r\n        let params = form.getFieldsValue();\r\n        params.id = this.record.id;\r\n        console.log(params);\r\n        // return;\r\n        http.post({\r\n            url: \"/algo-group-info/updateAlgoGroupInfo\",\r\n            data: params,\r\n        }).then((res) => {\r\n            console.log(res);\r\n            let msg = res.message;\r\n            if (res.code == 0) {\r\n                message.success(msg);\r\n                this.getData();\r\n            } else if (res.code == 20000) {\r\n                message.error(\r\n                    msg.substring(msg.indexOf(\"[\") + 1, msg.indexOf(\"HTTP\"))\r\n                );\r\n            } else {\r\n                message.error(msg);\r\n            }\r\n        });\r\n    };\r\n    //删除记录\r\n    handleDeleteRecord = (record) => {\r\n        console.log(\"删除记录 \", record);\r\n    };\r\n\r\n    getData = (params = {}, pagination = { current: 1, pageSize: 11 }) => {\r\n        params = {\r\n            ...params,\r\n            pageId: pagination.current,\r\n            pageNum: pagination.pageSize,\r\n        };\r\n        // params.token = \"\";\r\n        http.post({\r\n            url: \"/algo-group-info/list\",\r\n            data: params,\r\n        }).then((res) => {\r\n            console.log(res);\r\n            //解析数据字典\r\n            if (res.data.records && res.data.records.length > 0) {\r\n                parseDict(res.data.records);\r\n                // showTip(this);\r\n            } else {\r\n                message.info(\"查询结果为空\");\r\n            }\r\n            let pgn = {\r\n                current: pagination.current,\r\n                pageSize: pagination.pageSize,\r\n                total: res.data.total || 0,\r\n            };\r\n            this.setState({\r\n                info: res.data.records,\r\n                pagination: pgn,\r\n            });\r\n        });\r\n    };\r\n    handleSearch = (params, pagination) => {\r\n        this.getData(params, pagination);\r\n    };\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n    render() {\r\n        let scroll = { x: 1000, y: 445 };\r\n        let info = this.state.info;\r\n        //批量\r\n        // let { selectRow } = this.state;\r\n        // const rowSelection = {\r\n        //     selectRow,\r\n        //     onChange: this.handleTableChange,\r\n        // };\r\n        return (\r\n            <div>\r\n                <CurdComponent\r\n                    // rowKey={\"index\"}\r\n                    // btnText2=\"查全部\"\r\n                    // isShowSearchForm={false}\r\n                    onSearchClick={this.handleSearch}\r\n                    getSearchFormFields={getSearchFormFields}\r\n                    // searchLoading={this.state.searchLoading}\r\n                    insertBtnText={\"新增\"} // 不传 就没新增按钮\r\n                    getInsertFormFields={this.getInsertFormFields}\r\n                    insertRecord={this.handleInsertRecord}\r\n                    insertModalText={\"新增权限\"}\r\n                    updateModalText={\"修改权限\"}\r\n                    // col=\"2\"\r\n                    width=\"600px\"\r\n                    pagination={this.state.pagination}\r\n                    getUpdateFormFields={this.getUpdateFormFields}\r\n                    setUpdateModal={this.setUpdateModal}\r\n                    updateRecord={this.handleUpdateRecord} // 不传 就没编辑\r\n                    // deleteRecord={this.handleDeleteRecord} // 不传 就没删除\r\n                    centered={true}\r\n                    columns={columns}\r\n                    dataSource={info}\r\n                    scroll={scroll}\r\n                    // rowSelection={rowSelection} //批量选择 操作\r\n                >\r\n                    {/* <div\r\n                        urlPrefix=\"/security\"\r\n                        title=\"证券信息\"\r\n                        sucCallback={this.getData}\r\n                    ></div> */}\r\n                </CurdComponent>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}