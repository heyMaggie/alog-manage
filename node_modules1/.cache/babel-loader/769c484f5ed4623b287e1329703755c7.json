{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport _defineProperty from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nvar _jsxFileName = \"D:\\\\company\\\\algo-manage\\\\src\\\\algo\\\\modules\\\\algostatis\\\\pages\\\\algoStatis\\\\index.js\";\nimport React from \"react\";\nimport styles from \"./style.module.less\";\nimport echarts from \"echarts\";\nvar RangePicker = _DatePicker.RangePicker;\nvar Option = _Select.Option;\n\nvar AlgorithmStatistical =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(AlgorithmStatistical, _React$PureComponent);\n\n  function AlgorithmStatistical() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AlgorithmStatistical);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AlgorithmStatistical)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        var noTime = values[\"pickerTime\"].length < 1;\n        var params = {\n          algorithmId: values.algorithmId,\n          startTime: noTime ? \"\" : Date.parse(values[\"pickerTime\"][0]),\n          endTime: noTime ? \"\" : Date.parse(values[\"pickerTime\"][1])\n        };\n\n        _this.getData(params);\n      });\n    };\n\n    _this.getData = function (params) {\n      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      http.post({\n        data: params,\n        url: \"/statistics/algorithmStatistics\"\n      }).then(function (res) {\n        if (res.code == 0) {\n          if (res.data.length == 0) {\n            message.error(\"该时间段暂无数据\");\n          } else {\n            var option = {\n              textStyle: {\n                color: \"#333\"\n              },\n              dataset: {\n                dimensions: [\"x\", \"y1\", \"y2\"],\n                source: res.data\n              },\n              tooltip: {\n                trigger: \"axis\",\n                backgroundColor: \"#1F2329\",\n                boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\n                borderColor: \"#1F2329\",\n                textStyle: {\n                  color: \"#fff\"\n                }\n              },\n              legend: {\n                data: [\"股票数量\", \"人数\"],\n                left: 0\n              },\n              grid: {\n                left: \"1%\",\n                right: \"0%\",\n                bottom: \"9%\",\n                top: \"60px\",\n                containLabel: true\n              },\n              xAxis: {\n                type: \"category\",\n                boundaryGap: false,\n                splitLine: {\n                  show: true,\n                  lineStyle: {\n                    color: \"#E9E9E9\",\n                    type: \"dashed\"\n                  }\n                },\n                axisTick: {\n                  show: true,\n                  //显示X轴刻度\n                  lineStyle: {\n                    color: \"#E9E9E9\"\n                  }\n                },\n                axisLine: {\n                  // 刻度线的颜色\n                  show: false\n                },\n                axisPointer: {\n                  type: \"line\",\n                  lineStyle: {\n                    color: \"#BDBEBF\"\n                  }\n                }\n              },\n              yAxis: [_defineProperty({\n                type: \"value\",\n                name: \"单位：（股）\",\n                nameLocation: \"end\",\n                axisLine: {\n                  show: false\n                },\n                nameTextStyle: {\n                  color: \"#666\"\n                },\n                axisTick: {\n                  show: false //隐藏X轴刻度\n\n                },\n                splitLine: {\n                  show: true,\n                  lineStyle: {\n                    color: \"#E9E9E9\",\n                    type: \"dashed\"\n                  }\n                }\n              }, \"nameTextStyle\", {\n                padding: [0, 83, 0, 0]\n              }), {\n                gridIndex: 0,\n                type: \"value\",\n                name: \"单位：（个）\",\n                splitLine: {\n                  show: false\n                },\n                axisTick: {\n                  show: false //隐藏X轴刻度\n\n                },\n                axisLine: {\n                  show: false\n                },\n                min: \"0\",\n                max: \"100\"\n              }],\n              series: [{\n                name: \"股票数量\",\n                type: \"line\",\n                smooth: true,\n                showSymbol: false,\n                itemStyle: {\n                  normal: {\n                    color: \"#83BDFF\"\n                  }\n                },\n                areaStyle: {\n                  normal: {\n                    color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                      offset: 0,\n                      color: \"rgba(50, 129, 255, 0.2)\"\n                    }, {\n                      offset: 1,\n                      color: \"rgba(255,255,255,0)\"\n                    }], false),\n                    shadowColor: \"rgba(0, 0, 0, 0.1)\",\n                    shadowBlur: 10\n                  }\n                }\n              }, {\n                name: \"人数\",\n                type: \"line\",\n                stack: \"总量\",\n                smooth: true,\n                showSymbol: false,\n                itemStyle: {\n                  normal: {\n                    color: \"#FFD747\"\n                  }\n                },\n                areaStyle: {\n                  normal: {\n                    color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                      offset: 0,\n                      color: \"rgba(255, 215, 71, 0.2)\"\n                    }, {\n                      offset: 1,\n                      color: \"rgba(255, 255, 255, 0)\"\n                    }], false),\n                    shadowColor: \"rgba(0, 0, 0, 0.1)\",\n                    shadowBlur: 10\n                  }\n                }\n              }]\n            };\n            var myChart = echarts.init(document.getElementById(\"main4\"));\n            myChart.resize();\n            myChart.setOption(option);\n          }\n        } else {\n          message.error(\"服务异常\");\n        }\n      });\n    };\n\n    _this.chartResize = function () {\n      var dom1 = document.getElementById(\"main4\");\n      echarts.init(dom1).resize();\n    };\n\n    return _this;\n  }\n\n  _createClass(AlgorithmStatistical, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.getData({\n        algorithmId: \"\",\n        startTime: \"\",\n        endTime: \"\"\n      });\n      window.addEventListener(\"resize\", function () {\n        _this2.chartResize();\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.chartResize, false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      return React.createElement(\"div\", {\n        className: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: styles.search,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(_Form, {\n        layout: \"inline\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, React.createElement(_Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, getFieldDecorator(\"algorithmId\", {\n        initialValue: \"\"\n      })(React.createElement(_Select, {\n        showSearch: true,\n        style: {\n          width: 160\n        },\n        placeholder: \"\\u9009\\u62E9\\u7B97\\u6CD5\",\n        optionFilterProp: \"children\",\n        filterOption: function filterOption(input, option) {\n          return option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(Option, {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, \"\\u5168\\u90E8\"), React.createElement(Option, {\n        value: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, \"\\u65E5\\u5185\\u56DE\\u8F6C\")))), React.createElement(_Form.Item, {\n        style: {\n          marginLeft: \"12px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, getFieldDecorator(\"pickerTime\", {\n        initialValue: []\n      })(React.createElement(RangePicker, {\n        style: {\n          width: 432\n        },\n        showTime: true,\n        format: \"YYYY-MM-DD HH:mm:ss\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, {\n        style: {\n          float: \"right\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(_Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        style: {\n          width: 76\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, \"\\u786E\\u5B9A\")))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main4\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AlgorithmStatistical;\n}(React.PureComponent);\n\nexport default _Form.create()(AlgorithmStatistical);","map":{"version":3,"sources":["D:/company/algo-manage/src/algo/modules/algostatis/pages/algoStatis/index.js"],"names":["React","styles","echarts","RangePicker","Option","AlgorithmStatistical","state","handleSubmit","e","preventDefault","props","form","validateFields","err","values","noTime","length","params","algorithmId","startTime","Date","parse","endTime","getData","count","http","post","data","url","then","res","code","message","error","option","textStyle","color","dataset","dimensions","source","tooltip","trigger","backgroundColor","boxShadow","borderColor","legend","left","grid","right","bottom","top","containLabel","xAxis","type","boundaryGap","splitLine","show","lineStyle","axisTick","axisLine","axisPointer","yAxis","name","nameLocation","nameTextStyle","padding","gridIndex","min","max","series","smooth","showSymbol","itemStyle","normal","areaStyle","graphic","LinearGradient","offset","shadowColor","shadowBlur","stack","myChart","init","document","getElementById","resize","setOption","chartResize","dom1","window","addEventListener","removeEventListener","getFieldDecorator","container","search","initialValue","width","input","children","toLowerCase","indexOf","marginLeft","float","height","PureComponent","create"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styles from \"./style.module.less\";\r\nimport echarts from \"echarts\";\r\nimport {\r\n    SearchForm,\r\n    Input,\r\n    TimePicker,\r\n    Form,\r\n    Button,\r\n    Icon,\r\n    DatePicker,\r\n    Select,\r\n} from \"antd\";\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\nclass AlgorithmStatistical extends React.PureComponent {\r\n    state = {};\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            let noTime = values[\"pickerTime\"].length < 1;\r\n            let params = {\r\n                algorithmId: values.algorithmId,\r\n                startTime: noTime ? \"\" : Date.parse(values[\"pickerTime\"][0]),\r\n                endTime: noTime ? \"\" : Date.parse(values[\"pickerTime\"][1]),\r\n            };\r\n            this.getData(params);\r\n        });\r\n    };\r\n    getData = (params, count = 0) => {\r\n        http.post({\r\n            data: params,\r\n            url: \"/statistics/algorithmStatistics\",\r\n        }).then((res) => {\r\n            if (res.code == 0) {\r\n                if (res.data.length == 0) {\r\n                    message.error(\"该时间段暂无数据\");\r\n                } else {\r\n                    let option = {\r\n                        textStyle: {\r\n                            color: \"#333\",\r\n                        },\r\n                        dataset: {\r\n                            dimensions: [\"x\", \"y1\", \"y2\"],\r\n                            source: res.data,\r\n                        },\r\n                        tooltip: {\r\n                            trigger: \"axis\",\r\n                            backgroundColor: \"#1F2329\",\r\n                            boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\r\n                            borderColor: \"#1F2329\",\r\n                            textStyle: {\r\n                                color: \"#fff\",\r\n                            },\r\n                        },\r\n                        legend: {\r\n                            data: [\"股票数量\", \"人数\"],\r\n                            left: 0,\r\n                        },\r\n                        grid: {\r\n                            left: \"1%\",\r\n                            right: \"0%\",\r\n                            bottom: \"9%\",\r\n                            top: \"60px\",\r\n                            containLabel: true,\r\n                        },\r\n                        xAxis: {\r\n                            type: \"category\",\r\n                            boundaryGap: false,\r\n                            splitLine: {\r\n                                show: true,\r\n                                lineStyle: {\r\n                                    color: \"#E9E9E9\",\r\n                                    type: \"dashed\",\r\n                                },\r\n                            },\r\n                            axisTick: {\r\n                                show: true, //显示X轴刻度\r\n                                lineStyle: {\r\n                                    color: \"#E9E9E9\",\r\n                                },\r\n                            },\r\n                            axisLine: {\r\n                                // 刻度线的颜色\r\n                                show: false,\r\n                            },\r\n                            axisPointer: {\r\n                                type: \"line\",\r\n                                lineStyle: { color: \"#BDBEBF\" },\r\n                            },\r\n                        },\r\n                        yAxis: [\r\n                            {\r\n                                type: \"value\",\r\n                                name: \"单位：（股）\",\r\n                                nameLocation: \"end\",\r\n                                axisLine: {\r\n                                    show: false,\r\n                                },\r\n                                nameTextStyle: {\r\n                                    color: \"#666\",\r\n                                },\r\n                                axisTick: {\r\n                                    show: false, //隐藏X轴刻度\r\n                                },\r\n                                splitLine: {\r\n                                    show: true,\r\n                                    lineStyle: {\r\n                                        color: \"#E9E9E9\",\r\n                                        type: \"dashed\",\r\n                                    },\r\n                                },\r\n                                nameTextStyle: {\r\n                                    padding: [0, 83, 0, 0],\r\n                                },\r\n                            },\r\n                            {\r\n                                gridIndex: 0,\r\n                                type: \"value\",\r\n                                name: \"单位：（个）\",\r\n                                splitLine: {\r\n                                    show: false,\r\n                                },\r\n                                axisTick: {\r\n                                    show: false, //隐藏X轴刻度\r\n                                },\r\n                                axisLine: {\r\n                                    show: false,\r\n                                },\r\n                                min: \"0\",\r\n                                max: \"100\",\r\n                            },\r\n                        ],\r\n                        series: [\r\n                            {\r\n                                name: \"股票数量\",\r\n                                type: \"line\",\r\n                                smooth: true,\r\n                                showSymbol: false,\r\n                                itemStyle: {\r\n                                    normal: {\r\n                                        color: \"#83BDFF\",\r\n                                    },\r\n                                },\r\n                                areaStyle: {\r\n                                    normal: {\r\n                                        color: new echarts.graphic.LinearGradient(\r\n                                            0,\r\n                                            0,\r\n                                            0,\r\n                                            1,\r\n                                            [\r\n                                                {\r\n                                                    offset: 0,\r\n                                                    color: \"rgba(50, 129, 255, 0.2)\",\r\n                                                },\r\n                                                {\r\n                                                    offset: 1,\r\n                                                    color: \"rgba(255,255,255,0)\",\r\n                                                },\r\n                                            ],\r\n                                            false\r\n                                        ),\r\n                                        shadowColor: \"rgba(0, 0, 0, 0.1)\",\r\n                                        shadowBlur: 10,\r\n                                    },\r\n                                },\r\n                            },\r\n                            {\r\n                                name: \"人数\",\r\n                                type: \"line\",\r\n                                stack: \"总量\",\r\n                                smooth: true,\r\n                                showSymbol: false,\r\n                                itemStyle: {\r\n                                    normal: {\r\n                                        color: \"#FFD747\",\r\n                                    },\r\n                                },\r\n                                areaStyle: {\r\n                                    normal: {\r\n                                        color: new echarts.graphic.LinearGradient(\r\n                                            0,\r\n                                            0,\r\n                                            0,\r\n                                            1,\r\n                                            [\r\n                                                {\r\n                                                    offset: 0,\r\n                                                    color: \"rgba(255, 215, 71, 0.2)\",\r\n                                                },\r\n                                                {\r\n                                                    offset: 1,\r\n                                                    color: \"rgba(255, 255, 255, 0)\",\r\n                                                },\r\n                                            ],\r\n                                            false\r\n                                        ),\r\n                                        shadowColor: \"rgba(0, 0, 0, 0.1)\",\r\n                                        shadowBlur: 10,\r\n                                    },\r\n                                },\r\n                            },\r\n                        ],\r\n                    };\r\n                    var myChart = echarts.init(\r\n                        document.getElementById(\"main4\")\r\n                    );\r\n                    myChart.resize();\r\n                    myChart.setOption(option);\r\n                }\r\n            } else {\r\n                message.error(\"服务异常\");\r\n            }\r\n        });\r\n    };\r\n    chartResize = () => {\r\n        var dom1 = document.getElementById(\"main4\");\r\n        echarts.init(dom1).resize();\r\n    };\r\n    componentDidMount() {\r\n        this.getData({ algorithmId: \"\", startTime: \"\", endTime: \"\" });\r\n        window.addEventListener(\"resize\", () => {\r\n            this.chartResize();\r\n        });\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.chartResize, false);\r\n    }\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <div className={styles.container}>\r\n                <div className={styles.search}>\r\n                    <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"algorithmId\", {\r\n                                initialValue: \"\",\r\n                            })(\r\n                                <Select\r\n                                    showSearch\r\n                                    style={{ width: 160 }}\r\n                                    placeholder=\"选择算法\"\r\n                                    optionFilterProp=\"children\"\r\n                                    filterOption={(input, option) =>\r\n                                        option.props.children\r\n                                            .toLowerCase()\r\n                                            .indexOf(input.toLowerCase()) >= 0\r\n                                    }\r\n                                >\r\n                                    <Option value=\"\">全部</Option>\r\n                                    <Option value=\"1\">日内回转</Option>\r\n                                </Select>\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item style={{ marginLeft: \"12px\" }}>\r\n                            {getFieldDecorator(\"pickerTime\", {\r\n                                initialValue: [],\r\n                            })(\r\n                                <RangePicker\r\n                                    style={{ width: 432 }}\r\n                                    showTime\r\n                                    format=\"YYYY-MM-DD HH:mm:ss\"\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item style={{ float: \"right\" }}>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                style={{ width: 76 }}\r\n                            >\r\n                                确定\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <div\r\n                        id=\"main4\"\r\n                        style={{ width: \"100%\", height: \"500px\" }}\r\n                    ></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Form.create()(AlgorithmStatistical);\r\n"]},"metadata":{},"sourceType":"module"}