{"ast":null,"code":"import \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport _classCallCheck from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\company\\\\algo-manage\\\\src\\\\algo\\\\modules\\\\algostatis\\\\pages\\\\algoStatis\\\\index.js\";\nimport React from \"react\";\nimport CurdComponent from \"@/components/CurdComponent\"; // import SelectOption from \"@/components/SelectOption\";\n\nvar Cccx =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Cccx, _React$PureComponent);\n\n  function Cccx() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Cccx);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Cccx)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      searchLoading: false,\n      info: [],\n      pagination: {\n        total: 0\n      }\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          console.log(\"Received values of form: \", values);\n        }\n      });\n    };\n\n    _this.getData = function (params) {\n      var pagination = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        current: 1,\n        pageSize: 20\n      };\n      // console.log(pagination);\n      http.get({\n        url: \"/user-position/list\",\n        data: params\n      }).then(function (res) {\n        console.log(res); //解析数据字典\n\n        if (res.data.length > 0) {\n          parseDict(res.data);\n          showStip(_assertThisInitialized(_this));\n        } else {\n          message.info(\"查询结果为空\");\n        }\n\n        _this.setState({\n          info: res.data\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Cccx, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$form = this.props.form,\n          getFieldDecorator = _this$props$form.getFieldDecorator,\n          getFieldsError = _this$props$form.getFieldsError,\n          getFieldError = _this$props$form.getFieldError,\n          isFieldTouched = _this$props$form.isFieldTouched; // Only show error after a field is touched.\n\n      var usernameError = isFieldTouched(\"username\") && getFieldError(\"username\");\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(_Form, {\n        layout: \"inline\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(_Form.Item, {\n        validateStatus: usernameError ? \"error\" : \"\",\n        help: usernameError || \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, getFieldDecorator(\"username\", {\n        rules: [{\n          required: true,\n          message: \"Please input your username!\"\n        }]\n      })(React.createElement(_Input, {\n        prefix: React.createElement(Icon, {\n          type: \"user\",\n          style: {\n            color: \"rgba(0,0,0,.25)\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }),\n        placeholder: \"Username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return Cccx;\n}(React.PureComponent);\n\nexport { Cccx as default };","map":{"version":3,"sources":["D:/company/algo-manage/src/algo/modules/algostatis/pages/algoStatis/index.js"],"names":["React","CurdComponent","Cccx","state","searchLoading","info","pagination","total","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","getData","params","current","pageSize","http","get","url","data","then","res","length","parseDict","showStip","message","setState","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","usernameError","rules","required","color","PureComponent"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAOC,aAAP,MAA0B,4BAA1B,C,CACA;;IAEqBC,I;;;;;;;;;;;;;;;;;UACjBC,K,GAAQ;AACJC,MAAAA,aAAa,EAAE,KADX;AAEJC,MAAAA,IAAI,EAAE,EAFF;AAGJC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AAHR,K;;UAKRC,Y,GAAe,UAACC,CAAD,EAAO;AAClBA,MAAAA,CAAC,CAACC,cAAF;;AACA,YAAKC,KAAL,CAAWC,IAAX,CAAgBC,cAAhB,CAA+B,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC5C,YAAI,CAACD,GAAL,EAAU;AACNE,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,MAAzC;AACH;AACJ,OAJD;AAKH,K;;UACDG,O,GAAU,UAACC,MAAD,EAAuD;AAAA,UAA9Cb,UAA8C,uEAAjC;AAAEc,QAAAA,OAAO,EAAE,CAAX;AAAcC,QAAAA,QAAQ,EAAE;AAAxB,OAAiC;AAC7D;AACAC,MAAAA,IAAI,CAACC,GAAL,CAAS;AACLC,QAAAA,GAAG,EAAE,qBADA;AAELC,QAAAA,IAAI,EAAEN;AAFD,OAAT,EAGGO,IAHH,CAGQ,UAACC,GAAD,EAAS;AACbX,QAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ,EADa,CAEb;;AACA,YAAIA,GAAG,CAACF,IAAJ,CAASG,MAAT,GAAkB,CAAtB,EAAyB;AACrBC,UAAAA,SAAS,CAACF,GAAG,CAACF,IAAL,CAAT;AACAK,UAAAA,QAAQ,+BAAR;AACH,SAHD,MAGO;AACHC,UAAAA,OAAO,CAAC1B,IAAR,CAAa,QAAb;AACH;;AACD,cAAK2B,QAAL,CAAc;AACV3B,UAAAA,IAAI,EAAEsB,GAAG,CAACF;AADA,SAAd;AAGH,OAfD;AAgBH,K;;;;;;;wCAEmB;AAChB,WAAKP,OAAL;AACH;;;6BACQ;AAAA,6BAMD,KAAKP,KAAL,CAAWC,IANV;AAAA,UAEDqB,iBAFC,oBAEDA,iBAFC;AAAA,UAGDC,cAHC,oBAGDA,cAHC;AAAA,UAIDC,aAJC,oBAIDA,aAJC;AAAA,UAKDC,cALC,oBAKDA,cALC,EAQL;;AACA,UAAMC,aAAa,GACfD,cAAc,CAAC,UAAD,CAAd,IAA8BD,aAAa,CAAC,UAAD,CAD/C;AAEA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,MAAM,EAAC,QAAb;AAAsB,QAAA,QAAQ,EAAE,KAAK3B,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,0BAAM,IAAN;AACI,QAAA,cAAc,EAAE6B,aAAa,GAAG,OAAH,GAAa,EAD9C;AAEI,QAAA,IAAI,EAAEA,aAAa,IAAI,EAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIKJ,iBAAiB,CAAC,UAAD,EAAa;AAC3BK,QAAAA,KAAK,EAAE,CACH;AACIC,UAAAA,QAAQ,EAAE,IADd;AAEIR,UAAAA,OAAO,EAAE;AAFb,SADG;AADoB,OAAb,CAAjB,CAQG;AACI,QAAA,MAAM,EACF,oBAAC,IAAD;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,KAAK,EAAE;AAAES,YAAAA,KAAK,EAAE;AAAT,WAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFR;AAOI,QAAA,WAAW,EAAC,UAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARH,CAJL,CADJ,CADJ,CADJ;AA6BH;;;;EA7E6BxC,KAAK,CAACyC,a;;SAAnBvC,I","sourcesContent":["import React from \"react\";\r\nimport { SearchForm, Input, TimePicker, Form, Button } from \"antd\";\r\n\r\nimport CurdComponent from \"@/components/CurdComponent\";\r\n// import SelectOption from \"@/components/SelectOption\";\r\n\r\nexport default class Cccx extends React.PureComponent {\r\n    state = {\r\n        searchLoading: false,\r\n        info: [],\r\n        pagination: { total: 0 },\r\n    };\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log(\"Received values of form: \", values);\r\n            }\r\n        });\r\n    };\r\n    getData = (params, pagination = { current: 1, pageSize: 20 }) => {\r\n        // console.log(pagination);\r\n        http.get({\r\n            url: \"/user-position/list\",\r\n            data: params,\r\n        }).then((res) => {\r\n            console.log(res);\r\n            //解析数据字典\r\n            if (res.data.length > 0) {\r\n                parseDict(res.data);\r\n                showStip(this);\r\n            } else {\r\n                message.info(\"查询结果为空\");\r\n            }\r\n            this.setState({\r\n                info: res.data,\r\n            });\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n    render() {\r\n        const {\r\n            getFieldDecorator,\r\n            getFieldsError,\r\n            getFieldError,\r\n            isFieldTouched,\r\n        } = this.props.form;\r\n\r\n        // Only show error after a field is touched.\r\n        const usernameError =\r\n            isFieldTouched(\"username\") && getFieldError(\"username\");\r\n        return (\r\n            <div>\r\n                <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n                    <Form.Item\r\n                        validateStatus={usernameError ? \"error\" : \"\"}\r\n                        help={usernameError || \"\"}\r\n                    >\r\n                        {getFieldDecorator(\"username\", {\r\n                            rules: [\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Please input your username!\",\r\n                                },\r\n                            ],\r\n                        })(\r\n                            <Input\r\n                                prefix={\r\n                                    <Icon\r\n                                        type=\"user\"\r\n                                        style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                                    />\r\n                                }\r\n                                placeholder=\"Username\"\r\n                            />\r\n                        )}\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}