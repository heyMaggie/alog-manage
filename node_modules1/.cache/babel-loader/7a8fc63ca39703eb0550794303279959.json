{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport _classCallCheck from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nvar _jsxFileName = \"D:\\\\company\\\\algo-manage\\\\src\\\\algo\\\\modules\\\\chart\\\\pages\\\\cpu\\\\index.js\";\nimport React from \"react\";\nimport styles from \"./style.module.less\";\nimport echarts from \"echarts\";\nvar RangePicker = _DatePicker.RangePicker;\nvar Option = _Select.Option;\n\nvar Cpu =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Cpu, _React$PureComponent);\n\n  function Cpu() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Cpu);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Cpu)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      searchLoading: false,\n      info: [],\n      pagination: {\n        total: 0\n      },\n      username: \"\"\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          console.log(\"Received values of form: \", values);\n        }\n      });\n    };\n\n    _this.getData = function (params) {\n      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      http.get({\n        url: \"/ssh/cpu\"\n      }).then(function (res) {\n        console.log(res.data, \"请求成功\");\n        var list = res.data;\n\n        if (res.code == 0) {\n          var option = {\n            textStyle: {\n              color: \"#333\"\n            },\n            // title: {\n            //     text: \"折线图堆叠\",\n            // },\n            tooltip: {\n              trigger: \"axis\",\n              backgroundColor: \"#1F2329\",\n              boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\n              borderColor: \"#1F2329\",\n              textStyle: {\n                color: \"#fff\"\n              }\n            },\n            legend: {\n              data: [\"CPU1\", \"CPU2\", \"CPU3\"],\n              left: 0\n            },\n            grid: {\n              left: \"1%\",\n              right: \"4%\",\n              bottom: \"9%\",\n              containLabel: true\n            },\n            xAxis: {\n              type: \"category\",\n              boundaryGap: false,\n              data: list.x,\n              splitLine: {\n                show: true,\n                lineStyle: {\n                  color: \"#E9E9E9\",\n                  type: \"dashed\"\n                }\n              },\n              axisTick: {\n                show: true,\n                //显示X轴刻度\n                lineStyle: {\n                  color: \"#E9E9E9\"\n                }\n              },\n              axisLine: {\n                // 刻度线的颜色\n                show: false\n              },\n              axisPointer: {\n                type: \"line\",\n                lineStyle: {\n                  color: \"#BDBEBF\"\n                }\n              }\n            },\n            yAxis: [{\n              type: \"value\",\n              name: \"单位：（GB）\",\n              nameLocation: \"end\",\n              axisLine: {\n                show: false\n              },\n              nameTextStyle: {\n                color: \"#666\"\n              },\n              axisTick: {\n                show: false //隐藏X轴刻度\n\n              },\n              splitLine: {\n                show: true,\n                lineStyle: {\n                  color: \"#E9E9E9\"\n                }\n              }\n            }, {\n              gridIndex: 0,\n              type: \"value\",\n              name: \"单位（%）\",\n              splitLine: {\n                show: false\n              },\n              axisTick: {\n                show: false //隐藏X轴刻度\n\n              },\n              axisLine: {\n                show: false\n              },\n              min: \"0\",\n              max: \"100\"\n            }],\n            series: [{\n              name: \"CPU1\",\n              type: \"line\",\n              data: list.y,\n              smooth: true,\n              showSymbol: false,\n              itemStyle: {\n                normal: {\n                  color: \"#83BDFF\"\n                }\n              }\n            }, {\n              name: \"CPU2\",\n              type: \"line\",\n              data: [220, 182, 191, 234, 290, 330, 310],\n              smooth: true,\n              showSymbol: false,\n              itemStyle: {\n                normal: {\n                  color: \"#3EC231\"\n                }\n              }\n            }, {\n              name: \"CPU3\",\n              type: \"line\",\n              data: [320, 82, 291, 234, 190, 330, 410],\n              smooth: true,\n              showSymbol: false,\n              itemStyle: {\n                normal: {\n                  color: \"#FFD747\"\n                }\n              }\n            }],\n            dataZoom: [{\n              type: \"inside\"\n            }, {\n              type: \"slider\",\n              height: \"20px\"\n            }]\n          };\n\n          _this.setState({\n            info: option\n          });\n\n          var myChart = echarts.init(document.getElementById(\"main\"));\n          myChart.setOption(option);\n        } else {\n          message.error(\"服务异常\");\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Cpu, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n\n      function onChange(value) {\n        console.log(\"selected \".concat(value));\n      }\n\n      function onSearch(val) {\n        console.log(\"search:\", val);\n      }\n\n      return React.createElement(\"div\", {\n        className: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: styles.search,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(_Form, {\n        layout: \"inline\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(_Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, getFieldDecorator(\"arithmetic\")(React.createElement(_Select, {\n        showSearch: true,\n        style: {\n          width: 160\n        },\n        placeholder: \"\\u9009\\u62E9CPU\",\n        optionFilterProp: \"children\",\n        onChange: onChange,\n        onSearch: onSearch,\n        filterOption: function filterOption(input, option) {\n          return option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(Option, {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \"\\u5168\\u90E8\"), React.createElement(Option, {\n        value: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, \"CPU1\"), React.createElement(Option, {\n        value: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, \"CPU2\"), React.createElement(Option, {\n        value: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, \"CPU3\")))), React.createElement(_Form.Item, {\n        style: {\n          marginLeft: \"12px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, getFieldDecorator(\"range-time-picker\")(React.createElement(RangePicker, {\n        showTime: true,\n        format: \"YYYY-MM-DD HH:mm:ss\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, {\n        style: {\n          float: \"right\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(_Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, \"\\u786E\\u5B9A\")))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Cpu;\n}(React.PureComponent);\n\nexport default _Form.create()(Cpu); // import React from \"react\";\n// // import { DatePicker, Select } from \"antd\";\n// import ChartComponent from \"@/components/ChartComponent\";\n// import SelectOption from \"@/components/SelectOption\";\n// let secArr = [\n//     { key: \"0\", value: \"多核\" },\n//     // { key: \"1\", value: \"买入\" },\n//     // { key: \"2\", value: \"卖出\" },\n// ];\n// export default class cpu extends React.PureComponent {\n//     state = {\n//         info: {},\n//         formArr: [\n//             {\n//                 label: \"CPU\",\n//                 id: \"cpu\",\n//                 initialValue: \"0\",\n//                 component: SelectOption(secArr, { width: \"200px\" }),\n//             },\n//         ],\n//     };\n//     getSearchList = (params, form) => {\n//         if (params.side == 0) {\n//             params.side = \"\";\n//         }\n//         // console.log(params);\n//         this.getData(params);\n//     };\n//     getData = (params, count = 0) => {\n//         http.get({\n//             url: \"/sshInfo/cpu\",\n//             data: params,\n//         }).then((res) => {\n//             console.log(res);\n//             let list = res.data;\n//             let params = {\n//                 theme: \"light\",\n//                 title: {\n//                     text: \"CPU使用率\",\n//                 },\n//                 data: list,\n//                 xAxis: {\n//                     name: \"时间\",\n//                 },\n//                 yAxis: {\n//                     name: \"使用率\",\n//                 },\n//                 // xSeriesUnit:\"\",  //x轴单位\n//                 ySeriesUnit: \"%\",\n//                 gridRight: \"10%\",\n//                 // level:[200,400,600,800,1000]\n//             };\n//             let option = getLineOption(params);\n//             // console.log(option);\n//             this.setState({\n//                 info: option,\n//             });\n//         });\n//     };\n//     componentDidMount() {\n//         this.getData();\n//     }\n//     render() {\n//         let info = this.state.info;\n//         return (\n//             <div>\n//                 <ChartComponent\n//                     isShowSearchForm={false}\n//                     // getSearchFormFields={this.state.formArr}\n//                     getSearchList={this.getSearchList}\n//                     dataSource={this.state.info}\n//                 ></ChartComponent>\n//             </div>\n//         );\n//     }\n// }","map":{"version":3,"sources":["D:/company/algo-manage/src/algo/modules/chart/pages/cpu/index.js"],"names":["React","styles","echarts","RangePicker","Option","Cpu","state","searchLoading","info","pagination","total","username","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","getData","params","count","http","get","url","then","res","data","list","code","option","textStyle","color","tooltip","trigger","backgroundColor","boxShadow","borderColor","legend","left","grid","right","bottom","containLabel","xAxis","type","boundaryGap","x","splitLine","show","lineStyle","axisTick","axisLine","axisPointer","yAxis","name","nameLocation","nameTextStyle","gridIndex","min","max","series","y","smooth","showSymbol","itemStyle","normal","dataZoom","height","setState","myChart","init","document","getElementById","setOption","message","error","getFieldDecorator","onChange","value","onSearch","val","container","search","width","input","children","toLowerCase","indexOf","marginLeft","float","PureComponent","create"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,OAAP,MAAoB,SAApB;IAYQC,W,eAAAA,W;IACAC,M,WAAAA,M;;IACFC,G;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,aAAa,EAAE,KADX;AAEJC,MAAAA,IAAI,EAAE,EAFF;AAGJC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAHR;AAIJC,MAAAA,QAAQ,EAAE;AAJN,K;;UAMRC,Y,GAAe,UAACC,CAAD,EAAO;AAClBA,MAAAA,CAAC,CAACC,cAAF;;AACA,YAAKC,KAAL,CAAWC,IAAX,CAAgBC,cAAhB,CAA+B,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC5C,YAAI,CAACD,GAAL,EAAU;AACNE,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,MAAzC;AACH;AACJ,OAJD;AAKH,K;;UACDG,O,GAAU,UAACC,MAAD,EAAuB;AAAA,UAAdC,KAAc,uEAAN,CAAM;AAC7BC,MAAAA,IAAI,CAACC,GAAL,CAAS;AACLC,QAAAA,GAAG,EAAE;AADA,OAAT,EAEGC,IAFH,CAEQ,UAACC,GAAD,EAAS;AACbT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAG,CAACC,IAAhB,EAAsB,MAAtB;AACA,YAAIC,IAAI,GAAGF,GAAG,CAACC,IAAf;;AACA,YAAID,GAAG,CAACG,IAAJ,IAAY,CAAhB,EAAmB;AACf,cAAIC,MAAM,GAAG;AACTC,YAAAA,SAAS,EAAE;AACPC,cAAAA,KAAK,EAAE;AADA,aADF;AAIT;AACA;AACA;AACAC,YAAAA,OAAO,EAAE;AACLC,cAAAA,OAAO,EAAE,MADJ;AAELC,cAAAA,eAAe,EAAE,SAFZ;AAGLC,cAAAA,SAAS,EAAE,qCAHN;AAILC,cAAAA,WAAW,EAAE,SAJR;AAKLN,cAAAA,SAAS,EAAE;AACPC,gBAAAA,KAAK,EAAE;AADA;AALN,aAPA;AAgBTM,YAAAA,MAAM,EAAE;AACJX,cAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CADF;AAEJY,cAAAA,IAAI,EAAE;AAFF,aAhBC;AAoBTC,YAAAA,IAAI,EAAE;AACFD,cAAAA,IAAI,EAAE,IADJ;AAEFE,cAAAA,KAAK,EAAE,IAFL;AAGFC,cAAAA,MAAM,EAAE,IAHN;AAIFC,cAAAA,YAAY,EAAE;AAJZ,aApBG;AA0BTC,YAAAA,KAAK,EAAE;AACHC,cAAAA,IAAI,EAAE,UADH;AAEHC,cAAAA,WAAW,EAAE,KAFV;AAGHnB,cAAAA,IAAI,EAAEC,IAAI,CAACmB,CAHR;AAIHC,cAAAA,SAAS,EAAE;AACPC,gBAAAA,IAAI,EAAE,IADC;AAEPC,gBAAAA,SAAS,EAAE;AACPlB,kBAAAA,KAAK,EAAE,SADA;AAEPa,kBAAAA,IAAI,EAAE;AAFC;AAFJ,eAJR;AAWHM,cAAAA,QAAQ,EAAE;AACNF,gBAAAA,IAAI,EAAE,IADA;AACM;AACZC,gBAAAA,SAAS,EAAE;AACPlB,kBAAAA,KAAK,EAAE;AADA;AAFL,eAXP;AAiBHoB,cAAAA,QAAQ,EAAE;AACN;AACAH,gBAAAA,IAAI,EAAE;AAFA,eAjBP;AAqBHI,cAAAA,WAAW,EAAE;AACTR,gBAAAA,IAAI,EAAE,MADG;AAETK,gBAAAA,SAAS,EAAE;AAAElB,kBAAAA,KAAK,EAAE;AAAT;AAFF;AArBV,aA1BE;AAoDTsB,YAAAA,KAAK,EAAE,CACH;AACIT,cAAAA,IAAI,EAAE,OADV;AAEIU,cAAAA,IAAI,EAAE,SAFV;AAGIC,cAAAA,YAAY,EAAE,KAHlB;AAIIJ,cAAAA,QAAQ,EAAE;AACNH,gBAAAA,IAAI,EAAE;AADA,eAJd;AAOIQ,cAAAA,aAAa,EAAE;AACXzB,gBAAAA,KAAK,EAAE;AADI,eAPnB;AAUImB,cAAAA,QAAQ,EAAE;AACNF,gBAAAA,IAAI,EAAE,KADA,CACO;;AADP,eAVd;AAaID,cAAAA,SAAS,EAAE;AACPC,gBAAAA,IAAI,EAAE,IADC;AAEPC,gBAAAA,SAAS,EAAE;AACPlB,kBAAAA,KAAK,EAAE;AADA;AAFJ;AAbf,aADG,EAqBH;AACI0B,cAAAA,SAAS,EAAE,CADf;AAEIb,cAAAA,IAAI,EAAE,OAFV;AAGIU,cAAAA,IAAI,EAAE,OAHV;AAIIP,cAAAA,SAAS,EAAE;AACPC,gBAAAA,IAAI,EAAE;AADC,eAJf;AAOIE,cAAAA,QAAQ,EAAE;AACNF,gBAAAA,IAAI,EAAE,KADA,CACO;;AADP,eAPd;AAUIG,cAAAA,QAAQ,EAAE;AACNH,gBAAAA,IAAI,EAAE;AADA,eAVd;AAaIU,cAAAA,GAAG,EAAE,GAbT;AAcIC,cAAAA,GAAG,EAAE;AAdT,aArBG,CApDE;AA0FTC,YAAAA,MAAM,EAAE,CACJ;AACIN,cAAAA,IAAI,EAAE,MADV;AAEIV,cAAAA,IAAI,EAAE,MAFV;AAGIlB,cAAAA,IAAI,EAAEC,IAAI,CAACkC,CAHf;AAIIC,cAAAA,MAAM,EAAE,IAJZ;AAKIC,cAAAA,UAAU,EAAE,KALhB;AAMIC,cAAAA,SAAS,EAAE;AACPC,gBAAAA,MAAM,EAAE;AACJlC,kBAAAA,KAAK,EAAE;AADH;AADD;AANf,aADI,EAaJ;AACIuB,cAAAA,IAAI,EAAE,MADV;AAEIV,cAAAA,IAAI,EAAE,MAFV;AAGIlB,cAAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CAHV;AAIIoC,cAAAA,MAAM,EAAE,IAJZ;AAKIC,cAAAA,UAAU,EAAE,KALhB;AAMIC,cAAAA,SAAS,EAAE;AACPC,gBAAAA,MAAM,EAAE;AACJlC,kBAAAA,KAAK,EAAE;AADH;AADD;AANf,aAbI,EAyBJ;AACIuB,cAAAA,IAAI,EAAE,MADV;AAEIV,cAAAA,IAAI,EAAE,MAFV;AAGIlB,cAAAA,IAAI,EAAE,CAAC,GAAD,EAAM,EAAN,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,CAHV;AAIIoC,cAAAA,MAAM,EAAE,IAJZ;AAKIC,cAAAA,UAAU,EAAE,KALhB;AAMIC,cAAAA,SAAS,EAAE;AACPC,gBAAAA,MAAM,EAAE;AACJlC,kBAAAA,KAAK,EAAE;AADH;AADD;AANf,aAzBI,CA1FC;AAgITmC,YAAAA,QAAQ,EAAE,CACN;AACItB,cAAAA,IAAI,EAAE;AADV,aADM,EAIN;AACIA,cAAAA,IAAI,EAAE,QADV;AAEIuB,cAAAA,MAAM,EAAE;AAFZ,aAJM;AAhID,WAAb;;AA0IA,gBAAKC,QAAL,CAAc;AACVhE,YAAAA,IAAI,EAAEyB;AADI,WAAd;;AAGA,cAAIwC,OAAO,GAAGvE,OAAO,CAACwE,IAAR,CAAaC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAb,CAAd;AAEAH,UAAAA,OAAO,CAACI,SAAR,CAAkB5C,MAAlB;AACH,SAjJD,MAiJO;AACH6C,UAAAA,OAAO,CAACC,KAAR,CAAc,MAAd;AACH;AACJ,OAzJD;AA0JH,K;;;;;;;wCACmB;AAChB,WAAKzD,OAAL;AACH;;;6BACQ;AAAA,UACG0D,iBADH,GACyB,KAAKjE,KAAL,CAAWC,IADpC,CACGgE,iBADH;;AAEL,eAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB9D,QAAAA,OAAO,CAACC,GAAR,oBAAwB6D,KAAxB;AACH;;AAED,eAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACnBhE,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB+D,GAAvB;AACH;;AACD,aACI;AAAK,QAAA,SAAS,EAAEnF,MAAM,CAACoF,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAEpF,MAAM,CAACqF,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,MAAM,EAAC,QAAb;AAAsB,QAAA,QAAQ,EAAE,KAAK1E,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,0BAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKoE,iBAAiB,CAAC,YAAD,CAAjB,CACG;AACI,QAAA,UAAU,MADd;AAEI,QAAA,KAAK,EAAE;AAAEO,UAAAA,KAAK,EAAE;AAAT,SAFX;AAGI,QAAA,WAAW,EAAC,iBAHhB;AAII,QAAA,gBAAgB,EAAC,UAJrB;AAKI,QAAA,QAAQ,EAAEN,QALd;AAMI,QAAA,QAAQ,EAAEE,QANd;AAOI,QAAA,YAAY,EAAE,sBAACK,KAAD,EAAQvD,MAAR;AAAA,iBACVA,MAAM,CAAClB,KAAP,CAAa0E,QAAb,CACKC,WADL,GAEKC,OAFL,CAEaH,KAAK,CAACE,WAAN,EAFb,KAEqC,CAH3B;AAAA,SAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAaI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAbJ,EAcI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdJ,EAeI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAfJ,EAgBI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBJ,CADH,CADL,CADJ,EAuBI,0BAAM,IAAN;AAAW,QAAA,KAAK,EAAE;AAAEE,UAAAA,UAAU,EAAE;AAAd,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKZ,iBAAiB,CAAC,mBAAD,CAAjB,CACG,oBAAC,WAAD;AACI,QAAA,QAAQ,MADZ;AAEI,QAAA,MAAM,EAAC,qBAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,CADL,CAvBJ,EA+BI,0BAAM,IAAN;AAAW,QAAA,KAAK,EAAE;AAAEa,UAAAA,KAAK,EAAE;AAAT,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CA/BJ,CADJ,CADJ,EAwCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACI,QAAA,EAAE,EAAC,MADP;AAEI,QAAA,KAAK,EAAE;AAAEN,UAAAA,KAAK,EAAE,MAAT;AAAiBhB,UAAAA,MAAM,EAAE;AAAzB,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAxCJ,CADJ;AAiDH;;;;EAxOavE,KAAK,CAAC8F,a;;AA0OxB,eAAe,MAAKC,MAAL,GAAc1F,GAAd,CAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\r\nimport styles from \"./style.module.less\";\r\nimport echarts from \"echarts\";\r\nimport {\r\n    SearchForm,\r\n    Input,\r\n    TimePicker,\r\n    Form,\r\n    Button,\r\n    Icon,\r\n    DatePicker,\r\n    Select,\r\n} from \"antd\";\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\nclass Cpu extends React.PureComponent {\r\n    state = {\r\n        searchLoading: false,\r\n        info: [],\r\n        pagination: { total: 0 },\r\n        username: \"\",\r\n    };\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log(\"Received values of form: \", values);\r\n            }\r\n        });\r\n    };\r\n    getData = (params, count = 0) => {\r\n        http.get({\r\n            url: \"/ssh/cpu\",\r\n        }).then((res) => {\r\n            console.log(res.data, \"请求成功\");\r\n            let list = res.data;\r\n            if (res.code == 0) {\r\n                let option = {\r\n                    textStyle: {\r\n                        color: \"#333\",\r\n                    },\r\n                    // title: {\r\n                    //     text: \"折线图堆叠\",\r\n                    // },\r\n                    tooltip: {\r\n                        trigger: \"axis\",\r\n                        backgroundColor: \"#1F2329\",\r\n                        boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\r\n                        borderColor: \"#1F2329\",\r\n                        textStyle: {\r\n                            color: \"#fff\",\r\n                        },\r\n                    },\r\n                    legend: {\r\n                        data: [\"CPU1\", \"CPU2\", \"CPU3\"],\r\n                        left: 0,\r\n                    },\r\n                    grid: {\r\n                        left: \"1%\",\r\n                        right: \"4%\",\r\n                        bottom: \"9%\",\r\n                        containLabel: true,\r\n                    },\r\n                    xAxis: {\r\n                        type: \"category\",\r\n                        boundaryGap: false,\r\n                        data: list.x,\r\n                        splitLine: {\r\n                            show: true,\r\n                            lineStyle: {\r\n                                color: \"#E9E9E9\",\r\n                                type: \"dashed\",\r\n                            },\r\n                        },\r\n                        axisTick: {\r\n                            show: true, //显示X轴刻度\r\n                            lineStyle: {\r\n                                color: \"#E9E9E9\",\r\n                            },\r\n                        },\r\n                        axisLine: {\r\n                            // 刻度线的颜色\r\n                            show: false,\r\n                        },\r\n                        axisPointer: {\r\n                            type: \"line\",\r\n                            lineStyle: { color: \"#BDBEBF\" },\r\n                        },\r\n                    },\r\n                    yAxis: [\r\n                        {\r\n                            type: \"value\",\r\n                            name: \"单位：（GB）\",\r\n                            nameLocation: \"end\",\r\n                            axisLine: {\r\n                                show: false,\r\n                            },\r\n                            nameTextStyle: {\r\n                                color: \"#666\",\r\n                            },\r\n                            axisTick: {\r\n                                show: false, //隐藏X轴刻度\r\n                            },\r\n                            splitLine: {\r\n                                show: true,\r\n                                lineStyle: {\r\n                                    color: \"#E9E9E9\",\r\n                                },\r\n                            },\r\n                        },\r\n                        {\r\n                            gridIndex: 0,\r\n                            type: \"value\",\r\n                            name: \"单位（%）\",\r\n                            splitLine: {\r\n                                show: false,\r\n                            },\r\n                            axisTick: {\r\n                                show: false, //隐藏X轴刻度\r\n                            },\r\n                            axisLine: {\r\n                                show: false,\r\n                            },\r\n                            min: \"0\",\r\n                            max: \"100\",\r\n                        },\r\n                    ],\r\n                    series: [\r\n                        {\r\n                            name: \"CPU1\",\r\n                            type: \"line\",\r\n                            data: list.y,\r\n                            smooth: true,\r\n                            showSymbol: false,\r\n                            itemStyle: {\r\n                                normal: {\r\n                                    color: \"#83BDFF\",\r\n                                },\r\n                            },\r\n                        },\r\n                        {\r\n                            name: \"CPU2\",\r\n                            type: \"line\",\r\n                            data: [220, 182, 191, 234, 290, 330, 310],\r\n                            smooth: true,\r\n                            showSymbol: false,\r\n                            itemStyle: {\r\n                                normal: {\r\n                                    color: \"#3EC231\",\r\n                                },\r\n                            },\r\n                        },\r\n                        {\r\n                            name: \"CPU3\",\r\n                            type: \"line\",\r\n                            data: [320, 82, 291, 234, 190, 330, 410],\r\n                            smooth: true,\r\n                            showSymbol: false,\r\n                            itemStyle: {\r\n                                normal: {\r\n                                    color: \"#FFD747\",\r\n                                },\r\n                            },\r\n                        },\r\n                    ],\r\n                    dataZoom: [\r\n                        {\r\n                            type: \"inside\",\r\n                        },\r\n                        {\r\n                            type: \"slider\",\r\n                            height: \"20px\",\r\n                        },\r\n                    ],\r\n                };\r\n                this.setState({\r\n                    info: option,\r\n                });\r\n                var myChart = echarts.init(document.getElementById(\"main\"));\r\n\r\n                myChart.setOption(option);\r\n            } else {\r\n                message.error(\"服务异常\");\r\n            }\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        function onChange(value) {\r\n            console.log(`selected ${value}`);\r\n        }\r\n\r\n        function onSearch(val) {\r\n            console.log(\"search:\", val);\r\n        }\r\n        return (\r\n            <div className={styles.container}>\r\n                <div className={styles.search}>\r\n                    <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"arithmetic\")(\r\n                                <Select\r\n                                    showSearch\r\n                                    style={{ width: 160 }}\r\n                                    placeholder=\"选择CPU\"\r\n                                    optionFilterProp=\"children\"\r\n                                    onChange={onChange}\r\n                                    onSearch={onSearch}\r\n                                    filterOption={(input, option) =>\r\n                                        option.props.children\r\n                                            .toLowerCase()\r\n                                            .indexOf(input.toLowerCase()) >= 0\r\n                                    }\r\n                                >\r\n                                    <Option value=\"0\">全部</Option>\r\n                                    <Option value=\"1\">CPU1</Option>\r\n                                    <Option value=\"2\">CPU2</Option>\r\n                                    <Option value=\"3\">CPU3</Option>\r\n                                </Select>\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item style={{ marginLeft: \"12px\" }}>\r\n                            {getFieldDecorator(\"range-time-picker\")(\r\n                                <RangePicker\r\n                                    showTime\r\n                                    format=\"YYYY-MM-DD HH:mm:ss\"\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item style={{ float: \"right\" }}>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                确定\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <div\r\n                        id=\"main\"\r\n                        style={{ width: \"100%\", height: \"500px\" }}\r\n                    ></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Form.create()(Cpu);\r\n\r\n// import React from \"react\";\r\n// // import { DatePicker, Select } from \"antd\";\r\n// import ChartComponent from \"@/components/ChartComponent\";\r\n// import SelectOption from \"@/components/SelectOption\";\r\n\r\n// let secArr = [\r\n//     { key: \"0\", value: \"多核\" },\r\n//     // { key: \"1\", value: \"买入\" },\r\n//     // { key: \"2\", value: \"卖出\" },\r\n// ];\r\n// export default class cpu extends React.PureComponent {\r\n//     state = {\r\n//         info: {},\r\n//         formArr: [\r\n//             {\r\n//                 label: \"CPU\",\r\n//                 id: \"cpu\",\r\n//                 initialValue: \"0\",\r\n//                 component: SelectOption(secArr, { width: \"200px\" }),\r\n//             },\r\n//         ],\r\n//     };\r\n//     getSearchList = (params, form) => {\r\n//         if (params.side == 0) {\r\n//             params.side = \"\";\r\n//         }\r\n//         // console.log(params);\r\n//         this.getData(params);\r\n//     };\r\n//     getData = (params, count = 0) => {\r\n//         http.get({\r\n//             url: \"/sshInfo/cpu\",\r\n//             data: params,\r\n//         }).then((res) => {\r\n//             console.log(res);\r\n//             let list = res.data;\r\n//             let params = {\r\n//                 theme: \"light\",\r\n//                 title: {\r\n//                     text: \"CPU使用率\",\r\n//                 },\r\n//                 data: list,\r\n//                 xAxis: {\r\n//                     name: \"时间\",\r\n//                 },\r\n//                 yAxis: {\r\n//                     name: \"使用率\",\r\n//                 },\r\n//                 // xSeriesUnit:\"\",  //x轴单位\r\n//                 ySeriesUnit: \"%\",\r\n//                 gridRight: \"10%\",\r\n//                 // level:[200,400,600,800,1000]\r\n//             };\r\n//             let option = getLineOption(params);\r\n//             // console.log(option);\r\n//             this.setState({\r\n//                 info: option,\r\n//             });\r\n//         });\r\n//     };\r\n//     componentDidMount() {\r\n//         this.getData();\r\n//     }\r\n\r\n//     render() {\r\n//         let info = this.state.info;\r\n//         return (\r\n//             <div>\r\n//                 <ChartComponent\r\n//                     isShowSearchForm={false}\r\n//                     // getSearchFormFields={this.state.formArr}\r\n//                     getSearchList={this.getSearchList}\r\n//                     dataSource={this.state.info}\r\n//                 ></ChartComponent>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}