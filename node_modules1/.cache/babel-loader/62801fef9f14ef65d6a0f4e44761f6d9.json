{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport _defineProperty from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nvar _jsxFileName = \"D:\\\\company\\\\algo-manage\\\\src\\\\algo\\\\modules\\\\algostatis\\\\pages\\\\algoStatis\\\\index.js\";\nimport React from \"react\";\nimport styles from \"./style.module.less\";\nimport echarts from \"echarts\";\nvar RangePicker = _DatePicker.RangePicker;\nvar Option = _Select.Option;\n\nvar AlgorithmStatistical =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(AlgorithmStatistical, _React$PureComponent);\n\n  function AlgorithmStatistical() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AlgorithmStatistical);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AlgorithmStatistical)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          console.log(\"查询的条件 \", values);\n        }\n      });\n    };\n\n    _this.getData = function (params) {\n      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      http.post({\n        url: \"/statistics/algorithmStatistics\"\n      }).then(function (res) {\n        console.log(res.data, \"请求成功999\");\n\n        if (res.code == 0) {\n          var option = {\n            textStyle: {\n              color: \"#333\"\n            },\n            // title: {\n            //     text: \"折线图堆叠\",\n            // },\n            dataset: {\n              dimensions: [\"x\", \"y1\", \"y2\"],\n              source: res.data\n            },\n            tooltip: {\n              trigger: \"axis\",\n              backgroundColor: \"#1F2329\",\n              boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\n              borderColor: \"#1F2329\",\n              textStyle: {\n                color: \"#fff\"\n              }\n            },\n            legend: {\n              data: [\"股票数量\", \"人数\"],\n              left: 0\n            },\n            grid: {\n              left: \"1%\",\n              right: \"4%\",\n              bottom: \"9%\",\n              top: \"60px\",\n              containLabel: true\n            },\n            xAxis: {\n              type: \"category\",\n              boundaryGap: false,\n              splitLine: {\n                show: true,\n                lineStyle: {\n                  color: \"#E9E9E9\",\n                  type: \"dashed\"\n                }\n              },\n              axisTick: {\n                show: true,\n                //显示X轴刻度\n                lineStyle: {\n                  color: \"#E9E9E9\"\n                }\n              },\n              axisLine: {\n                // 刻度线的颜色\n                show: false\n              },\n              axisPointer: {\n                type: \"line\",\n                lineStyle: {\n                  color: \"#BDBEBF\"\n                }\n              }\n            },\n            yAxis: [_defineProperty({\n              type: \"value\",\n              name: \"单位：（股）\",\n              nameLocation: \"end\",\n              axisLine: {\n                show: false\n              },\n              nameTextStyle: {\n                color: \"#666\"\n              },\n              axisTick: {\n                show: false //隐藏X轴刻度\n\n              },\n              splitLine: {\n                show: true,\n                lineStyle: {\n                  color: \"#E9E9E9\",\n                  type: \"dashed\"\n                }\n              }\n            }, \"nameTextStyle\", {\n              padding: [0, 83, 0, 0]\n            }), {\n              gridIndex: 0,\n              type: \"value\",\n              name: \"单位：（个）\",\n              splitLine: {\n                show: false\n              },\n              axisTick: {\n                show: false //隐藏X轴刻度\n\n              },\n              axisLine: {\n                show: false\n              },\n              min: \"0\",\n              max: \"100\"\n            }],\n            series: [{\n              name: \"股票数量\",\n              type: \"line\",\n              smooth: true,\n              showSymbol: false,\n              itemStyle: {\n                normal: {\n                  color: \"#83BDFF\"\n                }\n              },\n              areaStyle: {\n                normal: {\n                  color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                    offset: 0,\n                    color: \"rgba(50, 129, 255, 0.2)\"\n                  }, {\n                    offset: 1,\n                    color: \"rgba(255,255,255,0)\"\n                  }], false),\n                  shadowColor: \"rgba(0, 0, 0, 0.1)\",\n                  shadowBlur: 10\n                }\n              }\n            }, {\n              name: \"人数\",\n              type: \"line\",\n              stack: \"总量\",\n              smooth: true,\n              showSymbol: false,\n              itemStyle: {\n                normal: {\n                  color: \"#FFD747\"\n                }\n              },\n              areaStyle: {\n                normal: {\n                  color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                    offset: 0,\n                    color: \"rgba(255, 215, 71, 0.2)\"\n                  }, {\n                    offset: 1,\n                    color: \"rgba(255, 255, 255, 0)\"\n                  }], false),\n                  shadowColor: \"rgba(0, 0, 0, 0.1)\",\n                  shadowBlur: 10\n                }\n              }\n            }]\n          };\n          var myChart = echarts.init(document.getElementById(\"main4\"));\n          myChart.setOption(option);\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AlgorithmStatistical, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n\n      function onChange(value) {\n        console.log(\"selected \".concat(value));\n      }\n\n      function onSearch(val) {\n        console.log(\"search:\", val);\n      }\n\n      return React.createElement(\"div\", {\n        className: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: styles.search,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(_Form, {\n        layout: \"inline\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(_Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, getFieldDecorator(\"arithmetic\")(React.createElement(_Select, {\n        showSearch: true,\n        style: {\n          width: 160\n        },\n        placeholder: \"\\u9009\\u62E9\\u7B97\\u6CD5\",\n        optionFilterProp: \"children\",\n        onChange: onChange,\n        onSearch: onSearch,\n        filterOption: function filterOption(input, option) {\n          return option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(Option, {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, \"\\u5168\\u90E8\"), React.createElement(Option, {\n        value: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"\\u65E5\\u5185\\u65E5\\u56DE\\u8F6C\")))), React.createElement(_Form.Item, {\n        style: {\n          marginLeft: \"12px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, getFieldDecorator(\"range-time-picker\")(React.createElement(RangePicker, {\n        style: {\n          width: 432\n        },\n        showTime: true,\n        format: \"YYYY-MM-DD HH:mm:ss\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, {\n        style: {\n          float: \"right\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(_Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        style: {\n          width: 76\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, \"\\u786E\\u5B9A\")))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main4\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AlgorithmStatistical;\n}(React.PureComponent);\n\nexport default _Form.create()(AlgorithmStatistical);","map":{"version":3,"sources":["D:/company/algo-manage/src/algo/modules/algostatis/pages/algoStatis/index.js"],"names":["React","styles","echarts","RangePicker","Option","AlgorithmStatistical","state","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","getData","params","count","http","post","url","then","res","data","code","option","textStyle","color","dataset","dimensions","source","tooltip","trigger","backgroundColor","boxShadow","borderColor","legend","left","grid","right","bottom","top","containLabel","xAxis","type","boundaryGap","splitLine","show","lineStyle","axisTick","axisLine","axisPointer","yAxis","name","nameLocation","nameTextStyle","padding","gridIndex","min","max","series","smooth","showSymbol","itemStyle","normal","areaStyle","graphic","LinearGradient","offset","shadowColor","shadowBlur","stack","myChart","init","document","getElementById","setOption","getFieldDecorator","onChange","value","onSearch","val","container","search","width","input","children","toLowerCase","indexOf","marginLeft","float","height","PureComponent","create"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styles from \"./style.module.less\";\r\nimport echarts from \"echarts\";\r\nimport {\r\n    SearchForm,\r\n    Input,\r\n    TimePicker,\r\n    Form,\r\n    Button,\r\n    Icon,\r\n    DatePicker,\r\n    Select,\r\n} from \"antd\";\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\nclass AlgorithmStatistical extends React.PureComponent {\r\n    state = {};\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log(\"查询的条件 \", values);\r\n            }\r\n        });\r\n    };\r\n    getData = (params, count = 0) => {\r\n        http.post({\r\n            url: \"/statistics/algorithmStatistics\",\r\n        }).then((res) => {\r\n            console.log(res.data, \"请求成功999\");\r\n            if (res.code == 0) {\r\n                let option = {\r\n                    textStyle: {\r\n                        color: \"#333\",\r\n                    },\r\n                    // title: {\r\n                    //     text: \"折线图堆叠\",\r\n                    // },\r\n                    dataset: {\r\n                        dimensions: [\"x\", \"y1\", \"y2\"],\r\n                        source: res.data,\r\n                    },\r\n                    tooltip: {\r\n                        trigger: \"axis\",\r\n                        backgroundColor: \"#1F2329\",\r\n                        boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\r\n                        borderColor: \"#1F2329\",\r\n                        textStyle: {\r\n                            color: \"#fff\",\r\n                        },\r\n                    },\r\n                    legend: {\r\n                        data: [\"股票数量\", \"人数\"],\r\n                        left: 0,\r\n                    },\r\n                    grid: {\r\n                        left: \"1%\",\r\n                        right: \"4%\",\r\n                        bottom: \"9%\",\r\n                        top: \"60px\",\r\n                        containLabel: true,\r\n                    },\r\n                    xAxis: {\r\n                        type: \"category\",\r\n                        boundaryGap: false,\r\n                        splitLine: {\r\n                            show: true,\r\n                            lineStyle: {\r\n                                color: \"#E9E9E9\",\r\n                                type: \"dashed\",\r\n                            },\r\n                        },\r\n                        axisTick: {\r\n                            show: true, //显示X轴刻度\r\n                            lineStyle: {\r\n                                color: \"#E9E9E9\",\r\n                            },\r\n                        },\r\n                        axisLine: {\r\n                            // 刻度线的颜色\r\n                            show: false,\r\n                        },\r\n                        axisPointer: {\r\n                            type: \"line\",\r\n                            lineStyle: { color: \"#BDBEBF\" },\r\n                        },\r\n                    },\r\n                    yAxis: [\r\n                        {\r\n                            type: \"value\",\r\n                            name: \"单位：（股）\",\r\n                            nameLocation: \"end\",\r\n                            axisLine: {\r\n                                show: false,\r\n                            },\r\n                            nameTextStyle: {\r\n                                color: \"#666\",\r\n                            },\r\n                            axisTick: {\r\n                                show: false, //隐藏X轴刻度\r\n                            },\r\n                            splitLine: {\r\n                                show: true,\r\n                                lineStyle: {\r\n                                    color: \"#E9E9E9\",\r\n                                    type: \"dashed\",\r\n                                },\r\n                            },\r\n                            nameTextStyle: {\r\n                                padding: [0, 83, 0, 0],\r\n                            },\r\n                        },\r\n                        {\r\n                            gridIndex: 0,\r\n                            type: \"value\",\r\n                            name: \"单位：（个）\",\r\n                            splitLine: {\r\n                                show: false,\r\n                            },\r\n                            axisTick: {\r\n                                show: false, //隐藏X轴刻度\r\n                            },\r\n                            axisLine: {\r\n                                show: false,\r\n                            },\r\n                            min: \"0\",\r\n                            max: \"100\",\r\n                        },\r\n                    ],\r\n                    series: [\r\n                        {\r\n                            name: \"股票数量\",\r\n                            type: \"line\",\r\n                            smooth: true,\r\n                            showSymbol: false,\r\n                            itemStyle: {\r\n                                normal: {\r\n                                    color: \"#83BDFF\",\r\n                                },\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: new echarts.graphic.LinearGradient(\r\n                                        0,\r\n                                        0,\r\n                                        0,\r\n                                        1,\r\n                                        [\r\n                                            {\r\n                                                offset: 0,\r\n                                                color: \"rgba(50, 129, 255, 0.2)\",\r\n                                            },\r\n                                            {\r\n                                                offset: 1,\r\n                                                color: \"rgba(255,255,255,0)\",\r\n                                            },\r\n                                        ],\r\n                                        false\r\n                                    ),\r\n                                    shadowColor: \"rgba(0, 0, 0, 0.1)\",\r\n                                    shadowBlur: 10,\r\n                                },\r\n                            },\r\n                        },\r\n                        {\r\n                            name: \"人数\",\r\n                            type: \"line\",\r\n                            stack: \"总量\",\r\n                            smooth: true,\r\n                            showSymbol: false,\r\n                            itemStyle: {\r\n                                normal: {\r\n                                    color: \"#FFD747\",\r\n                                },\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: new echarts.graphic.LinearGradient(\r\n                                        0,\r\n                                        0,\r\n                                        0,\r\n                                        1,\r\n                                        [\r\n                                            {\r\n                                                offset: 0,\r\n                                                color: \"rgba(255, 215, 71, 0.2)\",\r\n                                            },\r\n                                            {\r\n                                                offset: 1,\r\n                                                color: \"rgba(255, 255, 255, 0)\",\r\n                                            },\r\n                                        ],\r\n                                        false\r\n                                    ),\r\n                                    shadowColor: \"rgba(0, 0, 0, 0.1)\",\r\n                                    shadowBlur: 10,\r\n                                },\r\n                            },\r\n                        },\r\n                    ],\r\n                };\r\n                var myChart = echarts.init(document.getElementById(\"main4\"));\r\n                myChart.setOption(option);\r\n            }\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        function onChange(value) {\r\n            console.log(`selected ${value}`);\r\n        }\r\n        function onSearch(val) {\r\n            console.log(\"search:\", val);\r\n        }\r\n        return (\r\n            <div className={styles.container}>\r\n                <div className={styles.search}>\r\n                    <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"arithmetic\")(\r\n                                <Select\r\n                                    showSearch\r\n                                    style={{ width: 160 }}\r\n                                    placeholder=\"选择算法\"\r\n                                    optionFilterProp=\"children\"\r\n                                    onChange={onChange}\r\n                                    onSearch={onSearch}\r\n                                    filterOption={(input, option) =>\r\n                                        option.props.children\r\n                                            .toLowerCase()\r\n                                            .indexOf(input.toLowerCase()) >= 0\r\n                                    }\r\n                                >\r\n                                    <Option value=\"0\">全部</Option>\r\n                                    <Option value=\"1\">日内日回转</Option>\r\n                                </Select>\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item style={{ marginLeft: \"12px\" }}>\r\n                            {getFieldDecorator(\"range-time-picker\")(\r\n                                <RangePicker\r\n                                    style={{ width: 432 }}\r\n                                    showTime\r\n                                    format=\"YYYY-MM-DD HH:mm:ss\"\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item style={{ float: \"right\" }}>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                style={{ width: 76 }}\r\n                            >\r\n                                确定\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <div\r\n                        id=\"main4\"\r\n                        style={{ width: \"100%\", height: \"500px\" }}\r\n                    ></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Form.create()(AlgorithmStatistical);\r\n"]},"metadata":{},"sourceType":"module"}