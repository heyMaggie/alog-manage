{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport _defineProperty from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nvar _jsxFileName = \"D:\\\\company\\\\algo-manage\\\\src\\\\algo\\\\modules\\\\algostatis\\\\pages\\\\algoStatis\\\\index.js\";\nimport React from \"react\";\nimport styles from \"./style.module.less\";\nimport echarts from \"echarts\";\nvar RangePicker = _DatePicker.RangePicker;\nvar Option = _Select.Option;\n\nvar AlgorithmStatistical =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(AlgorithmStatistical, _React$PureComponent);\n\n  function AlgorithmStatistical() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AlgorithmStatistical);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AlgorithmStatistical)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      searchLoading: false,\n      info: [],\n      pagination: {\n        total: 0\n      },\n      username: \"\"\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          console.log(\"查询的条件 \", values);\n        }\n      });\n    };\n\n    _this.getData = function (params) {\n      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      http.post({\n        url: \"/statistics/algo\"\n      }).then(function (res) {\n        var option = {\n          textStyle: {\n            color: \"#333\"\n          },\n          // title: {\n          //     text: \"折线图堆叠\",\n          // },\n          tooltip: {\n            trigger: \"axis\",\n            backgroundColor: \"#1F2329\",\n            boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\n            borderColor: \"#1F2329\",\n            textStyle: {\n              color: \"#fff\"\n            }\n          },\n          legend: {\n            data: [\"人数\", \"股票数量\"],\n            left: 0\n          },\n          grid: {\n            left: \"1%\",\n            right: \"4%\",\n            bottom: \"9%\",\n            top: \"60px\",\n            containLabel: true\n          },\n          xAxis: {\n            type: \"category\",\n            boundaryGap: false,\n            data: [\"9-12 10:00\", \"9-13 10:00\", \"9-14 10:00\", \"9-15 10:00\", \"9-16 10:00\", \"9-17 10:00\", \"9-18 10:00\"],\n            splitLine: {\n              show: true,\n              lineStyle: {\n                color: \"#E9E9E9\",\n                type: \"dashed\"\n              }\n            },\n            axisTick: {\n              show: true,\n              //显示X轴刻度\n              lineStyle: {\n                color: \"#E9E9E9\"\n              }\n            },\n            axisLine: {\n              // 刻度线的颜色\n              show: false\n            },\n            axisPointer: {\n              type: \"line\",\n              lineStyle: {\n                color: \"#BDBEBF\"\n              }\n            }\n          },\n          yAxis: [_defineProperty({\n            type: \"value\",\n            name: \"单位：（股）\",\n            nameLocation: \"end\",\n            axisLine: {\n              show: false\n            },\n            nameTextStyle: {\n              color: \"#666\"\n            },\n            axisTick: {\n              show: false //隐藏X轴刻度\n\n            },\n            splitLine: {\n              show: true,\n              lineStyle: {\n                color: \"#E9E9E9\",\n                type: \"dashed\"\n              }\n            }\n          }, \"nameTextStyle\", {\n            padding: [0, 0, 0, 12]\n          }), {\n            gridIndex: 0,\n            type: \"value\",\n            name: \"单位：（个）\",\n            splitLine: {\n              show: false\n            },\n            axisTick: {\n              show: false //隐藏X轴刻度\n\n            },\n            axisLine: {\n              show: false\n            },\n            min: \"0\",\n            max: \"100\"\n          }],\n          series: [{\n            name: \"人数\",\n            type: \"line\",\n            stack: \"总量\",\n            data: [120, 132, 101, 134, 90, 230, 210],\n            smooth: true,\n            showSymbol: false,\n            itemStyle: {\n              normal: {\n                color: \"#83BDFF\"\n              }\n            },\n            areaStyle: {\n              normal: {\n                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                  offset: 0,\n                  color: \"rgba(50, 129, 255, 0.2)\"\n                }, {\n                  offset: 1,\n                  color: \"rgba(255,255,255,0)\"\n                }], false),\n                shadowColor: \"rgba(0, 0, 0, 0.1)\",\n                shadowBlur: 10\n              }\n            }\n          }, {\n            name: \"股票数量\",\n            type: \"line\",\n            stack: \"总量\",\n            data: [220, 182, 191, 234, 290, 330, 310],\n            smooth: true,\n            showSymbol: false,\n            itemStyle: {\n              normal: {\n                color: \"#FFD747\"\n              }\n            },\n            areaStyle: {\n              // background: linear-gradient(360deg, rgba(255, 255, 255, 0) 0%, rgba(50, 129, 255, 0.06) 100%);\n              // background: linear-gradient(360deg, rgba(255, 255, 255, 0) 0%, rgba(255, 215, 71, 0.06) 100%);\n              normal: {\n                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                  offset: 0,\n                  color: \"rgba(255, 215, 71, 0.2)\"\n                }, {\n                  offset: 1,\n                  color: \"rgba(255, 255, 255, 0)\"\n                }], false),\n                shadowColor: \"rgba(0, 0, 0, 0.1)\",\n                shadowBlur: 10\n              }\n            }\n          }] // dataZoom: [\n          //     {\n          //         type: \"inside\",\n          //     },\n          //     {\n          //         type: \"slider\",\n          //         height: \"20px\",\n          //     },\n          // ],\n\n        };\n        var myChart = echarts.init(document.getElementById(\"main4\"));\n        myChart.setOption(option);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AlgorithmStatistical, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n\n      function onChange(value) {\n        console.log(\"selected \".concat(value));\n      }\n\n      function onSearch(val) {\n        console.log(\"search:\", val);\n      }\n\n      return React.createElement(\"div\", {\n        className: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: styles.search,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(_Form, {\n        layout: \"inline\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(_Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, getFieldDecorator(\"arithmetic\", {\n        rules: [{\n          required: true,\n          message: \"Please select your gender!\"\n        }]\n      })(React.createElement(_Select, {\n        showSearch: true,\n        style: {\n          width: 160\n        },\n        placeholder: \"\\u9009\\u62E9\\u7B97\\u6CD5\",\n        optionFilterProp: \"children\",\n        onChange: onChange,\n        onSearch: onSearch,\n        filterOption: function filterOption(input, option) {\n          return option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(Option, {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, \"\\u5168\\u90E8\"), React.createElement(Option, {\n        value: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, \"Lucy\"), React.createElement(Option, {\n        value: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, \"Tom\")))), React.createElement(_Form.Item, {\n        style: {\n          marginLeft: \"12px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, getFieldDecorator(\"range-time-picker\")(React.createElement(RangePicker, {\n        style: {\n          width: 432\n        },\n        showTime: true,\n        format: \"YYYY-MM-DD HH:mm:ss\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, {\n        style: {\n          float: \"right\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, React.createElement(_Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        style: {\n          width: 76\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, \"\\u786E\\u5B9A\")))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main4\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AlgorithmStatistical;\n}(React.PureComponent);\n\nexport default _Form.create()(AlgorithmStatistical);","map":{"version":3,"sources":["D:/company/algo-manage/src/algo/modules/algostatis/pages/algoStatis/index.js"],"names":["React","styles","echarts","RangePicker","Option","AlgorithmStatistical","state","searchLoading","info","pagination","total","username","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","getData","params","count","http","post","url","then","res","option","textStyle","color","tooltip","trigger","backgroundColor","boxShadow","borderColor","legend","data","left","grid","right","bottom","top","containLabel","xAxis","type","boundaryGap","splitLine","show","lineStyle","axisTick","axisLine","axisPointer","yAxis","name","nameLocation","nameTextStyle","padding","gridIndex","min","max","series","stack","smooth","showSymbol","itemStyle","normal","areaStyle","graphic","LinearGradient","offset","shadowColor","shadowBlur","myChart","init","document","getElementById","setOption","getFieldDecorator","onChange","value","onSearch","val","container","search","rules","required","message","width","input","children","toLowerCase","indexOf","marginLeft","float","height","PureComponent","create"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styles from \"./style.module.less\";\r\nimport echarts from \"echarts\";\r\nimport {\r\n    SearchForm,\r\n    Input,\r\n    TimePicker,\r\n    Form,\r\n    Button,\r\n    Icon,\r\n    DatePicker,\r\n    Select,\r\n} from \"antd\";\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\nclass AlgorithmStatistical extends React.PureComponent {\r\n    state = {\r\n        searchLoading: false,\r\n        info: [],\r\n        pagination: { total: 0 },\r\n        username: \"\",\r\n    };\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log(\"查询的条件 \", values);\r\n            }\r\n        });\r\n    };\r\n    getData = (params, count = 0) => {\r\n        http.post({\r\n            url: \"/statistics/algo\",\r\n        }).then((res) => {\r\n            let option = {\r\n                textStyle: {\r\n                    color: \"#333\",\r\n                },\r\n                // title: {\r\n                //     text: \"折线图堆叠\",\r\n                // },\r\n                tooltip: {\r\n                    trigger: \"axis\",\r\n                    backgroundColor: \"#1F2329\",\r\n                    boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\r\n                    borderColor: \"#1F2329\",\r\n                    textStyle: {\r\n                        color: \"#fff\",\r\n                    },\r\n                },\r\n                legend: {\r\n                    data: [\"人数\", \"股票数量\"],\r\n                    left: 0,\r\n                },\r\n                grid: {\r\n                    left: \"1%\",\r\n                    right: \"4%\",\r\n                    bottom: \"9%\",\r\n                    top: \"60px\",\r\n                    containLabel: true,\r\n                },\r\n                xAxis: {\r\n                    type: \"category\",\r\n                    boundaryGap: false,\r\n                    data: [\r\n                        \"9-12 10:00\",\r\n                        \"9-13 10:00\",\r\n                        \"9-14 10:00\",\r\n                        \"9-15 10:00\",\r\n                        \"9-16 10:00\",\r\n                        \"9-17 10:00\",\r\n                        \"9-18 10:00\",\r\n                    ],\r\n                    splitLine: {\r\n                        show: true,\r\n                        lineStyle: {\r\n                            color: \"#E9E9E9\",\r\n                            type: \"dashed\",\r\n                        },\r\n                    },\r\n                    axisTick: {\r\n                        show: true, //显示X轴刻度\r\n                        lineStyle: {\r\n                            color: \"#E9E9E9\",\r\n                        },\r\n                    },\r\n                    axisLine: {\r\n                        // 刻度线的颜色\r\n                        show: false,\r\n                    },\r\n                    axisPointer: {\r\n                        type: \"line\",\r\n                        lineStyle: { color: \"#BDBEBF\" },\r\n                    },\r\n                },\r\n                yAxis: [\r\n                    {\r\n                        type: \"value\",\r\n                        name: \"单位：（股）\",\r\n                        nameLocation: \"end\",\r\n                        axisLine: {\r\n                            show: false,\r\n                        },\r\n                        nameTextStyle: {\r\n                            color: \"#666\",\r\n                        },\r\n                        axisTick: {\r\n                            show: false, //隐藏X轴刻度\r\n                        },\r\n                        splitLine: {\r\n                            show: true,\r\n                            lineStyle: {\r\n                                color: \"#E9E9E9\",\r\n                                type: \"dashed\",\r\n                            },\r\n                        },\r\n                        nameTextStyle: {\r\n                            padding: [0, 0, 0, 12],\r\n                        },\r\n                    },\r\n                    {\r\n                        gridIndex: 0,\r\n                        type: \"value\",\r\n                        name: \"单位：（个）\",\r\n                        splitLine: {\r\n                            show: false,\r\n                        },\r\n                        axisTick: {\r\n                            show: false, //隐藏X轴刻度\r\n                        },\r\n                        axisLine: {\r\n                            show: false,\r\n                        },\r\n                        min: \"0\",\r\n                        max: \"100\",\r\n                    },\r\n                ],\r\n                series: [\r\n                    {\r\n                        name: \"人数\",\r\n                        type: \"line\",\r\n                        stack: \"总量\",\r\n                        data: [120, 132, 101, 134, 90, 230, 210],\r\n                        smooth: true,\r\n                        showSymbol: false,\r\n                        itemStyle: {\r\n                            normal: {\r\n                                color: \"#83BDFF\",\r\n                            },\r\n                        },\r\n                        areaStyle: {\r\n                            normal: {\r\n                                color: new echarts.graphic.LinearGradient(\r\n                                    0,\r\n                                    0,\r\n                                    0,\r\n                                    1,\r\n                                    [\r\n                                        {\r\n                                            offset: 0,\r\n                                            color: \"rgba(50, 129, 255, 0.2)\",\r\n                                        },\r\n                                        {\r\n                                            offset: 1,\r\n                                            color: \"rgba(255,255,255,0)\",\r\n                                        },\r\n                                    ],\r\n                                    false\r\n                                ),\r\n                                shadowColor: \"rgba(0, 0, 0, 0.1)\",\r\n                                shadowBlur: 10,\r\n                            },\r\n                        },\r\n                    },\r\n                    {\r\n                        name: \"股票数量\",\r\n                        type: \"line\",\r\n                        stack: \"总量\",\r\n                        data: [220, 182, 191, 234, 290, 330, 310],\r\n                        smooth: true,\r\n                        showSymbol: false,\r\n                        itemStyle: {\r\n                            normal: {\r\n                                color: \"#FFD747\",\r\n                            },\r\n                        },\r\n                        areaStyle: {\r\n                            // background: linear-gradient(360deg, rgba(255, 255, 255, 0) 0%, rgba(50, 129, 255, 0.06) 100%);\r\n                            // background: linear-gradient(360deg, rgba(255, 255, 255, 0) 0%, rgba(255, 215, 71, 0.06) 100%);\r\n                            normal: {\r\n                                color: new echarts.graphic.LinearGradient(\r\n                                    0,\r\n                                    0,\r\n                                    0,\r\n                                    1,\r\n                                    [\r\n                                        {\r\n                                            offset: 0,\r\n                                            color: \"rgba(255, 215, 71, 0.2)\",\r\n                                        },\r\n                                        {\r\n                                            offset: 1,\r\n                                            color: \"rgba(255, 255, 255, 0)\",\r\n                                        },\r\n                                    ],\r\n                                    false\r\n                                ),\r\n                                shadowColor: \"rgba(0, 0, 0, 0.1)\",\r\n                                shadowBlur: 10,\r\n                            },\r\n                        },\r\n                    },\r\n                ],\r\n                // dataZoom: [\r\n                //     {\r\n                //         type: \"inside\",\r\n                //     },\r\n                //     {\r\n                //         type: \"slider\",\r\n                //         height: \"20px\",\r\n                //     },\r\n                // ],\r\n            };\r\n            var myChart = echarts.init(document.getElementById(\"main4\"));\r\n            myChart.setOption(option);\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        function onChange(value) {\r\n            console.log(`selected ${value}`);\r\n        }\r\n        function onSearch(val) {\r\n            console.log(\"search:\", val);\r\n        }\r\n        return (\r\n            <div className={styles.container}>\r\n                <div className={styles.search}>\r\n                    <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"arithmetic\", {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please select your gender!\",\r\n                                    },\r\n                                ],\r\n                            })(\r\n                                <Select\r\n                                    showSearch\r\n                                    style={{ width: 160 }}\r\n                                    placeholder=\"选择算法\"\r\n                                    optionFilterProp=\"children\"\r\n                                    onChange={onChange}\r\n                                    onSearch={onSearch}\r\n                                    filterOption={(input, option) =>\r\n                                        option.props.children\r\n                                            .toLowerCase()\r\n                                            .indexOf(input.toLowerCase()) >= 0\r\n                                    }\r\n                                >\r\n                                    <Option value=\"0\">全部</Option>\r\n                                    <Option value=\"1\">Lucy</Option>\r\n                                    <Option value=\"2\">Tom</Option>\r\n                                </Select>\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item style={{ marginLeft: \"12px\" }}>\r\n                            {getFieldDecorator(\"range-time-picker\")(\r\n                                <RangePicker\r\n                                    style={{ width: 432 }}\r\n                                    showTime\r\n                                    format=\"YYYY-MM-DD HH:mm:ss\"\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item style={{ float: \"right\" }}>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                style={{ width: 76 }}\r\n                            >\r\n                                确定\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <div\r\n                        id=\"main4\"\r\n                        style={{ width: \"100%\", height: \"500px\" }}\r\n                    ></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Form.create()(AlgorithmStatistical);\r\n"]},"metadata":{},"sourceType":"module"}