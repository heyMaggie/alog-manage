{"ast":null,"code":"import _defineProperty from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import { graphic } from \"echarts\";\nvar getBarOption = function getBarOption(params) {\n  var list = params.data;\n  var xArr = list.map(function (item) {\n    return item.x;\n  });\n  var yArr = list.map(function (item) {\n    return item.y;\n  });\n  var option = {\n    // color:\"rgba(24,144,255,0.7)\"\n    grid: {\n      left: \"4%\",\n      right: \"25%\",\n      containLabel: true\n    },\n    tooltip: {\n      trigger: \"axis\",\n      formatter: function formatter(params) {\n        return params[0].name + xunit + \"<br />\" + params[0].marker + params.seriesName + \":\" + params[0].value + yunit;\n      }\n    },\n    dataZoom: [{\n      type: \"inside\"\n    }, {\n      type: \"slider\"\n    }],\n    xAxis: {\n      data: xArr,\n      name: params.xAxis.name,\n      type: \"category\",\n      nameGap: \"5\",\n      splitLine: {\n        show: false\n      }\n    },\n    yAxis: {\n      name: params.yAxis.name,\n      type: \"value\",\n      boundaryGap: [0, \"100%\"],\n      splitLine: {\n        show: false\n      },\n      max: function max(value) {\n        return Math.ceil(value.max * 1.1);\n      }\n    },\n    series: {\n      name: params.seriesName ? params.seriesName : \"时延\",\n      type: \"bar\",\n      showSymbol: false,\n      data: yArr,\n      barMaxWidth: 40,\n      smooth: true,\n      areaStyle: {\n        normal: {\n          color: \"#ddd\"\n        }\n      } // itemStyle: {\n      //     color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n      //         { offset: 0, color: \"#83bff6\" },\n      //         { offset: 0.5, color: \"#188df0\" },\n      //         { offset: 1, color: \"#188df0\" },\n      //     ]),\n      // },\n      // emphasis: {\n      //     itemStyle: {\n      //         color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n      //             { offset: 0, color: \"#2378f7\" },\n      //             { offset: 0.7, color: \"#2378f7\" },\n      //             { offset: 1, color: \"#83bff6\" },\n      //         ]),\n      //     },\n      // },\n\n    }\n  };\n  return Object.assign(params, option);\n};\n\nvar getLineOption = function getLineOption(params) {\n  var xunit = params.xSeriesUnit ? params.xSeriesUnit : \"\";\n  var yunit = params.ySeriesUnit ? params.ySeriesUnit : \"\";\n  var gridRight = params.gridRight ? params.gridRight : \"13%\";\n  var list = params.data; // for (let i = 0; i < 100; i++) {\n  //     list.push({\n  //         x: Math.ceil(Math.random() * 10 + 11),\n  //         y: Math.ceil(Math.random() * 300),\n  //     });\n  // }\n\n  var xArr = list.map(function (item) {\n    return item.x;\n  });\n  var yArr = list.map(function (item) {\n    return item.y;\n  }); // let yMax = Math.max.apply(Math, yArr) * 0.95;\n  // let level = params.level;\n  // if (yMax > 0) {\n  //     level = [\n  //         Math.ceil(yMax * 0.2),\n  //         Math.ceil(yMax * 0.4),\n  //         Math.ceil(yMax * 0.6),\n  //         Math.ceil(yMax * 0.8),\n  //         Math.ceil(yMax),\n  //     ];\n  // } else {\n  //     level = [10000, 20000, 30000, 40000, 50000];\n  // }\n\n  var option = {\n    // title: {\n    //   text: \"深市解析后未知行情数目\"\n    // },\n    tooltip: {\n      trigger: \"axis\",\n      formatter: function formatter(params) {\n        return params[0].name + xunit + \"<br />\" + params[0].marker + params[0].seriesName + \":\" + params[0].value + yunit;\n      }\n    },\n    grid: {\n      left: \"2%\",\n      right: gridRight // containLabel: true,\n\n    },\n    xAxis: {\n      name: params.xAxis.name,\n      boundaryGap: false,\n      data: xArr\n    },\n    yAxis: {\n      name: params.yAxis.name // splitLine: {\n      //     show: false,\n      // },\n      // max: function (value) {\n      //     return Math.ceil(value.max * 1.1);\n      // },\n\n    },\n    dataZoom: [{\n      type: \"inside\"\n    }, {\n      type: \"slider\"\n    }],\n    // visualMap: {\n    //     top: 10,\n    //     right: 10,\n    //     pieces: [\n    //         {\n    //             gt: 0,\n    //             lte: level[0],\n    //             color: \"#096\",\n    //         },\n    //         {\n    //             gt: level[0],\n    //             lte: level[1],\n    //             color: \"#ffde33\",\n    //         },\n    //         {\n    //             gt: level[1],\n    //             lte: level[2],\n    //             color: \"#ff9933\",\n    //         },\n    //         {\n    //             gt: level[2],\n    //             lte: level[3],\n    //             color: \"#cc0033\",\n    //         },\n    //         {\n    //             gt: level[3],\n    //             lte: level[4],\n    //             color: \"#660099\",\n    //         },\n    //         {\n    //             gt: level[4],\n    //             color: \"#7e0023\",\n    //         },\n    //     ],\n    //     outOfRange: {\n    //         color: \"#999\",\n    //     },\n    // },\n    series: {\n      type: \"line\",\n      data: yArr,\n      name: params.yAxis.name ? params.yAxis.name : \"\",\n      itemStyle: {\n        normal: {\n          // color: \"#8cd5c2\", //改变折线点的颜色\n          lineStyle: {\n            color: \"#18a0ff\" //改变折线颜色\n\n          }\n        }\n      } // markLine: {\n      //     silent: true,\n      //     data: [\n      //         {\n      //             yAxis: level[0],\n      //         },\n      //         {\n      //             yAxis: level[1],\n      //         },\n      //         {\n      //             yAxis: level[2],\n      //         },\n      //         {\n      //             yAxis: level[3],\n      //         },\n      //         {\n      //             yAxis: level[4],\n      //         },\n      //     ],\n      // },\n\n    }\n  };\n  return Object.assign(params, option);\n};\n\nvar getMulLineOption = function getMulLineOption(params) {\n  var gridRight = params.gridRight ? params.gridRight : \"6%\";\n  var list = params.data;\n  var xArr = list.x;\n  var legendArr = [];\n  var series = list.y.map(function (item) {\n    // console.log(item);\n    legendArr.push(item.name);\n    return _objectSpread({}, item, {\n      type: \"line\"\n    });\n  });\n  var option = {\n    theme: \"light\",\n    tooltip: {\n      trigger: \"axis\"\n    },\n    legend: {\n      data: legendArr\n    },\n    grid: {\n      left: \"4%\",\n      right: gridRight,\n      boundaryGap: false,\n      containLabel: true\n    },\n    xAxis: {\n      name: params.xAxis.name,\n      type: \"category\",\n      boundaryGap: false,\n      data: xArr\n    },\n    yAxis: {\n      name: params.yAxis.name,\n      type: \"value\"\n    },\n    series: series\n  };\n  return Object.assign(params, option);\n};\n\nexport { getBarOption, getLineOption, getMulLineOption };","map":{"version":3,"sources":["D:/company/algo-manage/src/utils/echartOption.js"],"names":["getBarOption","params","list","data","xArr","map","item","x","yArr","y","option","grid","left","right","containLabel","tooltip","trigger","formatter","name","xunit","marker","seriesName","value","yunit","dataZoom","type","xAxis","nameGap","splitLine","show","yAxis","boundaryGap","max","Math","ceil","series","showSymbol","barMaxWidth","smooth","areaStyle","normal","color","Object","assign","getLineOption","xSeriesUnit","ySeriesUnit","gridRight","itemStyle","lineStyle","getMulLineOption","legendArr","push","theme","legend"],"mappings":"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","sourcesContent":["// import { graphic } from \"echarts\";\r\n\r\nlet getBarOption = (params) => {\r\n    let list = params.data;\r\n    let xArr = list.map((item) => item.x);\r\n    let yArr = list.map((item) => item.y);\r\n    let option = {\r\n        // color:\"rgba(24,144,255,0.7)\"\r\n        grid: {\r\n            left: \"4%\",\r\n            right: \"25%\",\r\n            containLabel: true,\r\n        },\r\n        tooltip: {\r\n            trigger: \"axis\",\r\n            formatter: function (params) {\r\n                return (\r\n                    params[0].name +\r\n                    xunit +\r\n                    \"<br />\" +\r\n                    params[0].marker +\r\n                    params.seriesName +\r\n                    \":\" +\r\n                    params[0].value +\r\n                    yunit\r\n                );\r\n            },\r\n        },\r\n        dataZoom: [\r\n            {\r\n                type: \"inside\",\r\n            },\r\n            {\r\n                type: \"slider\",\r\n            },\r\n        ],\r\n        xAxis: {\r\n            data: xArr,\r\n            name: params.xAxis.name,\r\n            type: \"category\",\r\n            nameGap: \"5\",\r\n            splitLine: {\r\n                show: false,\r\n            },\r\n        },\r\n        yAxis: {\r\n            name: params.yAxis.name,\r\n            type: \"value\",\r\n            boundaryGap: [0, \"100%\"],\r\n            splitLine: {\r\n                show: false,\r\n            },\r\n            max: function (value) {\r\n                return Math.ceil(value.max * 1.1);\r\n            },\r\n        },\r\n        series: {\r\n            name: params.seriesName ? params.seriesName : \"时延\",\r\n            type: \"bar\",\r\n            showSymbol: false,\r\n            data: yArr,\r\n            barMaxWidth: 40,\r\n            smooth: true,\r\n            areaStyle: {\r\n                normal: {\r\n                    color: \"#ddd\",\r\n                },\r\n            },\r\n            // itemStyle: {\r\n            //     color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n            //         { offset: 0, color: \"#83bff6\" },\r\n            //         { offset: 0.5, color: \"#188df0\" },\r\n            //         { offset: 1, color: \"#188df0\" },\r\n            //     ]),\r\n            // },\r\n            // emphasis: {\r\n            //     itemStyle: {\r\n            //         color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n            //             { offset: 0, color: \"#2378f7\" },\r\n            //             { offset: 0.7, color: \"#2378f7\" },\r\n            //             { offset: 1, color: \"#83bff6\" },\r\n            //         ]),\r\n            //     },\r\n            // },\r\n        },\r\n    };\r\n    return Object.assign(params, option);\r\n};\r\nlet getLineOption = (params) => {\r\n    let xunit = params.xSeriesUnit ? params.xSeriesUnit : \"\";\r\n    let yunit = params.ySeriesUnit ? params.ySeriesUnit : \"\";\r\n    let gridRight = params.gridRight ? params.gridRight : \"13%\";\r\n    let list = params.data;\r\n    // for (let i = 0; i < 100; i++) {\r\n    //     list.push({\r\n    //         x: Math.ceil(Math.random() * 10 + 11),\r\n    //         y: Math.ceil(Math.random() * 300),\r\n    //     });\r\n    // }\r\n    let xArr = list.map((item) => item.x);\r\n    let yArr = list.map((item) => item.y);\r\n    // let yMax = Math.max.apply(Math, yArr) * 0.95;\r\n    // let level = params.level;\r\n    // if (yMax > 0) {\r\n    //     level = [\r\n    //         Math.ceil(yMax * 0.2),\r\n    //         Math.ceil(yMax * 0.4),\r\n    //         Math.ceil(yMax * 0.6),\r\n    //         Math.ceil(yMax * 0.8),\r\n    //         Math.ceil(yMax),\r\n    //     ];\r\n    // } else {\r\n    //     level = [10000, 20000, 30000, 40000, 50000];\r\n    // }\r\n    let option = {\r\n        // title: {\r\n        //   text: \"深市解析后未知行情数目\"\r\n        // },\r\n        tooltip: {\r\n            trigger: \"axis\",\r\n            formatter: function (params) {\r\n                return (\r\n                    params[0].name +\r\n                    xunit +\r\n                    \"<br />\" +\r\n                    params[0].marker +\r\n                    params[0].seriesName +\r\n                    \":\" +\r\n                    params[0].value +\r\n                    yunit\r\n                );\r\n            },\r\n        },\r\n        grid: {\r\n            left: \"2%\",\r\n            right: gridRight,\r\n            // containLabel: true,\r\n        },\r\n        xAxis: {\r\n            name: params.xAxis.name,\r\n            boundaryGap: false,\r\n            data: xArr,\r\n        },\r\n        yAxis: {\r\n            name: params.yAxis.name,\r\n            // splitLine: {\r\n            //     show: false,\r\n            // },\r\n            // max: function (value) {\r\n            //     return Math.ceil(value.max * 1.1);\r\n            // },\r\n        },\r\n        dataZoom: [\r\n            {\r\n                type: \"inside\",\r\n            },\r\n            {\r\n                type: \"slider\",\r\n            },\r\n        ],\r\n        // visualMap: {\r\n        //     top: 10,\r\n        //     right: 10,\r\n        //     pieces: [\r\n        //         {\r\n        //             gt: 0,\r\n        //             lte: level[0],\r\n        //             color: \"#096\",\r\n        //         },\r\n        //         {\r\n        //             gt: level[0],\r\n        //             lte: level[1],\r\n        //             color: \"#ffde33\",\r\n        //         },\r\n        //         {\r\n        //             gt: level[1],\r\n        //             lte: level[2],\r\n        //             color: \"#ff9933\",\r\n        //         },\r\n        //         {\r\n        //             gt: level[2],\r\n        //             lte: level[3],\r\n        //             color: \"#cc0033\",\r\n        //         },\r\n        //         {\r\n        //             gt: level[3],\r\n        //             lte: level[4],\r\n        //             color: \"#660099\",\r\n        //         },\r\n        //         {\r\n        //             gt: level[4],\r\n        //             color: \"#7e0023\",\r\n        //         },\r\n        //     ],\r\n        //     outOfRange: {\r\n        //         color: \"#999\",\r\n        //     },\r\n        // },\r\n        series: {\r\n            type: \"line\",\r\n            data: yArr,\r\n            name: params.yAxis.name ? params.yAxis.name : \"\",\r\n            itemStyle: {\r\n                normal: {\r\n                    // color: \"#8cd5c2\", //改变折线点的颜色\r\n                    lineStyle: {\r\n                        color: \"#18a0ff\", //改变折线颜色\r\n                    },\r\n                },\r\n            },\r\n            // markLine: {\r\n            //     silent: true,\r\n            //     data: [\r\n            //         {\r\n            //             yAxis: level[0],\r\n            //         },\r\n            //         {\r\n            //             yAxis: level[1],\r\n            //         },\r\n            //         {\r\n            //             yAxis: level[2],\r\n            //         },\r\n            //         {\r\n            //             yAxis: level[3],\r\n            //         },\r\n            //         {\r\n            //             yAxis: level[4],\r\n            //         },\r\n            //     ],\r\n            // },\r\n        },\r\n    };\r\n    return Object.assign(params, option);\r\n};\r\nlet getMulLineOption = (params) => {\r\n    let gridRight = params.gridRight ? params.gridRight : \"6%\";\r\n    let list = params.data;\r\n    let xArr = list.x;\r\n    let legendArr = [];\r\n    let series = list.y.map((item) => {\r\n        // console.log(item);\r\n        legendArr.push(item.name);\r\n        return {\r\n            ...item,\r\n            type: \"line\",\r\n        };\r\n    });\r\n    let option = {\r\n        theme: \"light\",\r\n        tooltip: {\r\n            trigger: \"axis\",\r\n        },\r\n        legend: {\r\n            data: legendArr,\r\n        },\r\n        grid: {\r\n            left: \"4%\",\r\n            right: gridRight,\r\n            boundaryGap: false,\r\n            containLabel: true,\r\n        },\r\n        xAxis: {\r\n            name: params.xAxis.name,\r\n            type: \"category\",\r\n            boundaryGap: false,\r\n            data: xArr,\r\n        },\r\n        yAxis: {\r\n            name: params.yAxis.name,\r\n            type: \"value\",\r\n        },\r\n        series: series,\r\n    };\r\n    return Object.assign(params, option);\r\n};\r\n\r\nexport { getBarOption, getLineOption, getMulLineOption };\r\n"]},"metadata":{},"sourceType":"module"}