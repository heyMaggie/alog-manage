{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport _defineProperty from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nvar _jsxFileName = \"D:\\\\company\\\\algo-manage\\\\src\\\\algo\\\\modules\\\\chart\\\\pages\\\\ram\\\\index.js\";\nimport React from \"react\";\nimport styles from \"./style.module.less\";\nimport echarts from \"echarts\";\nvar RangePicker = _DatePicker.RangePicker;\nvar Option = _Select.Option;\n\nvar Ram =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Ram, _React$PureComponent);\n\n  function Ram() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Ram);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Ram)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      searchLoading: false,\n      info: [],\n      pagination: {\n        total: 0\n      },\n      username: \"\"\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          console.log(\"Received values of form: \", values);\n        }\n      });\n    };\n\n    _this.getData = function (params) {\n      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      http.post({\n        url: \"/ssh/ram\"\n      }).then(function (res) {\n        console.log(res.data, \"请求成功\");\n        var list = res.data;\n\n        if (res.code == 0) {\n          var _ref;\n\n          var seriesList = list.series;\n          var maxGB = (list.memTotal / 1024 / 2024).toFixed(0);\n          console.log(maxGB);\n          seriesList.forEach(function (item) {\n            item.data = item.y;\n            item.smooth = true;\n            item.showSymbol = false;\n            item.itemStyle = {\n              normal: {\n                color: \"#65A6FF\"\n              }\n            };\n          });\n          var option = {\n            textStyle: {\n              color: \"#333\"\n            },\n            tooltip: {\n              trigger: \"axis\",\n              backgroundColor: \"#1F2329\",\n              boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\n              borderColor: \"#1F2329\",\n              textStyle: {\n                color: \"#fff\"\n              }\n            },\n            dataset: {\n              dimensions: [\"x\", \"y\"],\n              source: res.data\n            },\n            legend: {\n              data: [\"CPU1\"],\n              left: 0\n            },\n            grid: {\n              left: \"1%\",\n              right: \"4%\",\n              bottom: \"9%\",\n              top: \"60px\",\n              containLabel: true\n            },\n            xAxis: {\n              type: \"category\",\n              boundaryGap: false,\n              splitLine: {\n                show: true,\n                lineStyle: {\n                  color: \"#E9E9E9\",\n                  type: \"dashed\"\n                }\n              },\n              axisTick: {\n                show: true,\n                //显示X轴刻度\n                lineStyle: {\n                  color: \"#E9E9E9\"\n                }\n              },\n              axisLine: {\n                // 刻度线的颜色\n                show: false\n              },\n              axisPointer: {\n                type: \"line\",\n                lineStyle: {\n                  color: \"#BDBEBF\"\n                }\n              }\n            },\n            yAxis: [(_ref = {\n              type: \"value\",\n              name: \"单位：（GB）\",\n              nameLocation: \"end\",\n              axisLine: {\n                show: false\n              },\n              nameTextStyle: {\n                color: \"#666\"\n              },\n              axisTick: {\n                show: false //隐藏X轴刻度\n\n              },\n              splitLine: {\n                show: true,\n                lineStyle: {\n                  color: \"#E9E9E9\",\n                  type: \"dashed\"\n                }\n              },\n              axisLabel: {\n                formatter: \"{value} GB\"\n              }\n            }, _defineProperty(_ref, \"nameTextStyle\", {\n              padding: [0, 15, 0, 0]\n            }), _defineProperty(_ref, \"min\", \"0\"), _ref), {\n              gridIndex: 0,\n              type: \"value\",\n              name: \"单位（%）\",\n              splitLine: {\n                show: false\n              },\n              axisTick: {\n                show: false //隐藏X轴刻度\n\n              },\n              axisLine: {\n                show: false\n              },\n              // min: \"0\",\n              // max: \"100\",\n              axisLabel: {\n                formatter: \"{value}%\"\n              },\n              nameTextStyle: {\n                padding: [0, 0, 0, 34]\n              }\n            }],\n            series: list.series,\n            //  [\n            //     {\n            //         name: \"CPU1\",\n            //         type: \"line\",\n            //         smooth: true,\n            //         showSymbol: false,\n            //         itemStyle: {\n            //             normal: {\n            //                 color: \"#65A6FF\",\n            //             },\n            //         },\n            //     },\n            // ],\n            dataZoom: [{\n              type: \"inside\"\n            }, {\n              type: \"slider\",\n              height: \"20px\"\n            }]\n          };\n          var myChart = echarts.init(document.getElementById(\"main2\"));\n          myChart.setOption(option);\n        } else {\n          message.error(\"服务异常\");\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Ram, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n\n      function onChange(value) {\n        console.log(\"selected \".concat(value));\n      }\n\n      function onSearch(val) {\n        console.log(\"search:\", val);\n      }\n\n      return React.createElement(\"div\", {\n        className: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: styles.search,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(_Form, {\n        layout: \"inline\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(_Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, getFieldDecorator(\"arithmetic\")(React.createElement(_Select, {\n        showSearch: true,\n        style: {\n          width: 160\n        },\n        placeholder: \"\\u9009\\u62E9\\u5185\\u5B58\",\n        optionFilterProp: \"children\",\n        onChange: onChange,\n        onSearch: onSearch,\n        filterOption: function filterOption(input, option) {\n          return option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(Option, {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \"\\u5168\\u90E8\"), React.createElement(Option, {\n        value: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, \"CPU1\")))), React.createElement(_Form.Item, {\n        style: {\n          marginLeft: \"12px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, getFieldDecorator(\"range-time-picker\")(React.createElement(RangePicker, {\n        style: {\n          width: 432\n        },\n        showTime: true,\n        format: \"YYYY-MM-DD HH:mm:ss\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, {\n        style: {\n          float: \"right\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(_Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        style: {\n          width: 76\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, \"\\u786E\\u5B9A\")))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main2\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Ram;\n}(React.PureComponent);\n\nexport default _Form.create()(Ram);","map":{"version":3,"sources":["D:/company/algo-manage/src/algo/modules/chart/pages/ram/index.js"],"names":["React","styles","echarts","RangePicker","Option","Ram","state","searchLoading","info","pagination","total","username","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","getData","params","count","http","post","url","then","res","data","list","code","seriesList","series","maxGB","memTotal","toFixed","forEach","item","y","smooth","showSymbol","itemStyle","normal","color","option","textStyle","tooltip","trigger","backgroundColor","boxShadow","borderColor","dataset","dimensions","source","legend","left","grid","right","bottom","top","containLabel","xAxis","type","boundaryGap","splitLine","show","lineStyle","axisTick","axisLine","axisPointer","yAxis","name","nameLocation","nameTextStyle","axisLabel","formatter","padding","gridIndex","dataZoom","height","myChart","init","document","getElementById","setOption","message","error","getFieldDecorator","onChange","value","onSearch","val","container","search","width","input","children","toLowerCase","indexOf","marginLeft","float","PureComponent","create"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styles from \"./style.module.less\";\r\nimport echarts from \"echarts\";\r\nimport {\r\n    SearchForm,\r\n    Input,\r\n    TimePicker,\r\n    Form,\r\n    Button,\r\n    Icon,\r\n    DatePicker,\r\n    Select,\r\n} from \"antd\";\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\nclass Ram extends React.PureComponent {\r\n    state = {\r\n        searchLoading: false,\r\n        info: [],\r\n        pagination: { total: 0 },\r\n        username: \"\",\r\n    };\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log(\"Received values of form: \", values);\r\n            }\r\n        });\r\n    };\r\n    getData = (params, count = 0) => {\r\n        http.post({\r\n            url: \"/ssh/ram\",\r\n        }).then((res) => {\r\n            console.log(res.data, \"请求成功\");\r\n            let list = res.data;\r\n            if (res.code == 0) {\r\n                let seriesList = list.series;\r\n                let maxGB = (list.memTotal / 1024 / 2024).toFixed(0);\r\n                console.log(maxGB);\r\n                seriesList.forEach((item) => {\r\n                    item.data = item.y;\r\n                    item.smooth = true;\r\n                    item.showSymbol = false;\r\n                    item.itemStyle = {\r\n                        normal: {\r\n                            color: \"#65A6FF\",\r\n                        },\r\n                    };\r\n                });\r\n                let option = {\r\n                    textStyle: {\r\n                        color: \"#333\",\r\n                    },\r\n                    tooltip: {\r\n                        trigger: \"axis\",\r\n                        backgroundColor: \"#1F2329\",\r\n                        boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\r\n                        borderColor: \"#1F2329\",\r\n                        textStyle: {\r\n                            color: \"#fff\",\r\n                        },\r\n                    },\r\n                    dataset: {\r\n                        dimensions: [\"x\", \"y\"],\r\n                        source: res.data,\r\n                    },\r\n                    legend: {\r\n                        data: [\"CPU1\"],\r\n                        left: 0,\r\n                    },\r\n                    grid: {\r\n                        left: \"1%\",\r\n                        right: \"4%\",\r\n                        bottom: \"9%\",\r\n                        top: \"60px\",\r\n                        containLabel: true,\r\n                    },\r\n                    xAxis: {\r\n                        type: \"category\",\r\n                        boundaryGap: false,\r\n                        splitLine: {\r\n                            show: true,\r\n                            lineStyle: {\r\n                                color: \"#E9E9E9\",\r\n                                type: \"dashed\",\r\n                            },\r\n                        },\r\n                        axisTick: {\r\n                            show: true, //显示X轴刻度\r\n                            lineStyle: {\r\n                                color: \"#E9E9E9\",\r\n                            },\r\n                        },\r\n                        axisLine: {\r\n                            // 刻度线的颜色\r\n                            show: false,\r\n                        },\r\n                        axisPointer: {\r\n                            type: \"line\",\r\n                            lineStyle: { color: \"#BDBEBF\" },\r\n                        },\r\n                    },\r\n                    yAxis: [\r\n                        {\r\n                            type: \"value\",\r\n                            name: \"单位：（GB）\",\r\n                            nameLocation: \"end\",\r\n                            axisLine: {\r\n                                show: false,\r\n                            },\r\n                            nameTextStyle: {\r\n                                color: \"#666\",\r\n                            },\r\n                            axisTick: {\r\n                                show: false, //隐藏X轴刻度\r\n                            },\r\n                            splitLine: {\r\n                                show: true,\r\n                                lineStyle: {\r\n                                    color: \"#E9E9E9\",\r\n                                    type: \"dashed\",\r\n                                },\r\n                            },\r\n                            axisLabel: {\r\n                                formatter: \"{value} GB\",\r\n                            },\r\n                            nameTextStyle: {\r\n                                padding: [0, 15, 0, 0],\r\n                            },\r\n                            min: \"0\",\r\n                        },\r\n                        {\r\n                            gridIndex: 0,\r\n                            type: \"value\",\r\n                            name: \"单位（%）\",\r\n                            splitLine: {\r\n                                show: false,\r\n                            },\r\n                            axisTick: {\r\n                                show: false, //隐藏X轴刻度\r\n                            },\r\n                            axisLine: {\r\n                                show: false,\r\n                            },\r\n                            // min: \"0\",\r\n                            // max: \"100\",\r\n                            axisLabel: {\r\n                                formatter: \"{value}%\",\r\n                            },\r\n                            nameTextStyle: {\r\n                                padding: [0, 0, 0, 34],\r\n                            },\r\n                        },\r\n                    ],\r\n                    series: list.series,\r\n                    //  [\r\n                    //     {\r\n                    //         name: \"CPU1\",\r\n                    //         type: \"line\",\r\n                    //         smooth: true,\r\n                    //         showSymbol: false,\r\n                    //         itemStyle: {\r\n                    //             normal: {\r\n                    //                 color: \"#65A6FF\",\r\n                    //             },\r\n                    //         },\r\n                    //     },\r\n                    // ],\r\n                    dataZoom: [\r\n                        {\r\n                            type: \"inside\",\r\n                        },\r\n                        {\r\n                            type: \"slider\",\r\n                            height: \"20px\",\r\n                        },\r\n                    ],\r\n                };\r\n                var myChart = echarts.init(document.getElementById(\"main2\"));\r\n                myChart.setOption(option);\r\n            } else {\r\n                message.error(\"服务异常\");\r\n            }\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        function onChange(value) {\r\n            console.log(`selected ${value}`);\r\n        }\r\n\r\n        function onSearch(val) {\r\n            console.log(\"search:\", val);\r\n        }\r\n        return (\r\n            <div className={styles.container}>\r\n                <div className={styles.search}>\r\n                    <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"arithmetic\")(\r\n                                <Select\r\n                                    showSearch\r\n                                    style={{ width: 160 }}\r\n                                    placeholder=\"选择内存\"\r\n                                    optionFilterProp=\"children\"\r\n                                    onChange={onChange}\r\n                                    onSearch={onSearch}\r\n                                    filterOption={(input, option) =>\r\n                                        option.props.children\r\n                                            .toLowerCase()\r\n                                            .indexOf(input.toLowerCase()) >= 0\r\n                                    }\r\n                                >\r\n                                    <Option value=\"0\">全部</Option>\r\n                                    <Option value=\"1\">CPU1</Option>\r\n                                </Select>\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item style={{ marginLeft: \"12px\" }}>\r\n                            {getFieldDecorator(\"range-time-picker\")(\r\n                                <RangePicker\r\n                                    style={{ width: 432 }}\r\n                                    showTime\r\n                                    format=\"YYYY-MM-DD HH:mm:ss\"\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item style={{ float: \"right\" }}>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                style={{ width: 76 }}\r\n                            >\r\n                                确定\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <div\r\n                        id=\"main2\"\r\n                        style={{ width: \"100%\", height: \"500px\" }}\r\n                    ></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Form.create()(Ram);\r\n"]},"metadata":{},"sourceType":"module"}