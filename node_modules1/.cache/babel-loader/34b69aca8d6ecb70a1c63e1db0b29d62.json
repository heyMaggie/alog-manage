{"ast":null,"code":"//日期格式化 函数\nDate.prototype.format = function (fmt) {\n  var o = {\n    \"M+\": this.getMonth() + 1,\n    //月份\n    \"d+\": this.getDate(),\n    //日\n    \"h+\": this.getHours(),\n    //小时\n    \"m+\": this.getMinutes(),\n    //分\n    \"s+\": this.getSeconds(),\n    //秒\n    \"q+\": Math.floor((this.getMonth() + 3) / 3),\n    //季度\n    S: this.getMilliseconds() //毫秒\n\n  };\n  if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n\n  for (var k in o) {\n    if (new RegExp(\"(\" + k + \")\").test(fmt)) fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length));\n  }\n\n  return fmt;\n}; //给每个路由加  module 属性\n\n\nexport var routeModule = function routeModule(moduleName, routeArr) {\n  // console.log(moduleName);\n  // console.log(routeArr);\n  routeArr.forEach(function (route) {\n    route.module = moduleName;\n\n    if (route.children) {\n      routeModule(moduleName, route.children);\n    }\n  });\n  return routeArr;\n}; //获取二进制 位数\n\nwindow.getLength = function (str) {\n  var totalLength = 0;\n  var charCode;\n\n  for (var i = 0; i < str.length; i++) {\n    charCode = str.charCodeAt(i);\n\n    if (charCode < 0x007f) {\n      totalLength++;\n    } else if (0x0080 <= charCode && charCode <= 0x07ff) {\n      totalLength += 2;\n    } else if (0x0800 <= charCode && charCode <= 0xffff) {\n      totalLength += 3;\n    } else {\n      totalLength += 4;\n    }\n  }\n\n  return totalLength;\n};\n\nwindow.checkLength = function (len) {\n  return function (rule, value, callback) {\n    if (getLength(value) > len) {\n      return Promise.resolve(\"位数超过限制\");\n    } else {\n      return Promise.resolve(); //成功\n    }\n  };\n}; //解析全部数据字典-覆盖原key值\n\n\nexport var parseDict = function parseDict(dict) {\n  window.parseDict = function (resArr) {\n    var dictKeys = Object.keys(dict); // console.log(dictKeys);\n\n    resArr.forEach(function (item, index) {\n      if (!item.hasOwnProperty(\"id\")) {\n        item.id = index;\n      }\n\n      for (var i = 0; i < dictKeys.length; i++) {\n        var key = dictKeys[i];\n\n        if (item.hasOwnProperty(key)) {\n          for (var j = 0; j < dict[key].length; j++) {\n            var dictionary = dict[key][j]; // console.log(dictionary);\n\n            if (item[key] == dictionary.key) {\n              // item[key] = dictionary.value;\n              item[key] = item[key] + \"-\" + dictionary.value;\n            }\n          }\n        }\n      }\n    });\n  }; //解析全部数据字典-新增value字段\n\n\n  window.parseDictValue = function (resArr) {\n    var dictKeys = Object.keys(dict); // console.log(dictKeys);\n\n    resArr.forEach(function (item, index) {\n      if (!item.hasOwnProperty(\"id\")) {\n        item.id = index;\n      }\n\n      for (var i = 0; i < dictKeys.length; i++) {\n        var key = dictKeys[i];\n\n        if (item.hasOwnProperty(key)) {\n          item[key + \"Value\"] = item[key];\n\n          for (var j = 0; j < dict[key].length; j++) {\n            var dictionary = dict[key][j]; // console.log(dictionary);\n\n            if (item[key] == dictionary.key) {\n              // item[key] = dictionary.value;\n              item[key + \"Value\"] = item[key] + \"-\" + dictionary.value;\n            }\n          }\n        }\n      }\n    });\n  }; // 单个字典-覆盖原key值\n\n\n  window.parseArrDict = function (arr, mykey, realKey) {\n    var dictArr = dict[realKey];\n\n    for (var i = 0; i < arr.length; i++) {\n      for (var j = 0; j < dictArr.length; j++) {\n        if (dictArr[j].key == arr[i][mykey]) {\n          arr[i][mykey] = arr[i][mykey] + \"-\" + dictArr[j].value;\n          break;\n        }\n      }\n    }\n\n    return arr;\n  }; // 单个字典-新增value字段\n\n\n  window.parseArrDictValue = function (arr, mykey, realKey) {\n    var dictArr = dict[realKey];\n\n    for (var i = 0; i < arr.length; i++) {\n      for (var j = 0; j < dictArr.length; j++) {\n        if (dictArr[j].key == arr[i][mykey]) {\n          arr[i][mykey + \"Value\"] = arr[i][mykey] + \"-\" + dictArr[j].value; // arr[i][mykey] = arr[i][mykey] + \"-\" + dictArr[j].value;\n\n          break;\n        }\n      }\n    }\n\n    return arr;\n  };\n};","map":{"version":3,"sources":["D:/company/algo-manage/src/utils/util.js"],"names":["Date","prototype","format","fmt","o","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","S","getMilliseconds","test","replace","RegExp","$1","getFullYear","substr","length","k","routeModule","moduleName","routeArr","forEach","route","module","children","window","getLength","str","totalLength","charCode","i","charCodeAt","checkLength","len","rule","value","callback","Promise","resolve","parseDict","dict","resArr","dictKeys","Object","keys","item","index","hasOwnProperty","id","key","j","dictionary","parseDictValue","parseArrDict","arr","mykey","realKey","dictArr","parseArrDictValue"],"mappings":"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","sourcesContent":["//日期格式化 函数\r\nDate.prototype.format = function (fmt) {\r\n    var o = {\r\n        \"M+\": this.getMonth() + 1, //月份\r\n        \"d+\": this.getDate(), //日\r\n        \"h+\": this.getHours(), //小时\r\n        \"m+\": this.getMinutes(), //分\r\n        \"s+\": this.getSeconds(), //秒\r\n        \"q+\": Math.floor((this.getMonth() + 3) / 3), //季度\r\n        S: this.getMilliseconds(), //毫秒\r\n    };\r\n    if (/(y+)/.test(fmt))\r\n        fmt = fmt.replace(\r\n            RegExp.$1,\r\n            (this.getFullYear() + \"\").substr(4 - RegExp.$1.length)\r\n        );\r\n    for (var k in o)\r\n        if (new RegExp(\"(\" + k + \")\").test(fmt))\r\n            fmt = fmt.replace(\r\n                RegExp.$1,\r\n                RegExp.$1.length == 1\r\n                    ? o[k]\r\n                    : (\"00\" + o[k]).substr((\"\" + o[k]).length)\r\n            );\r\n    return fmt;\r\n};\r\n\r\n//给每个路由加  module 属性\r\nexport let routeModule = (moduleName, routeArr) => {\r\n    // console.log(moduleName);\r\n    // console.log(routeArr);\r\n    routeArr.forEach((route) => {\r\n        route.module = moduleName;\r\n        if (route.children) {\r\n            routeModule(moduleName, route.children);\r\n        }\r\n    });\r\n    return routeArr;\r\n};\r\n//获取二进制 位数\r\nwindow.getLength = function (str) {\r\n    var totalLength = 0;\r\n    var charCode;\r\n    for (var i = 0; i < str.length; i++) {\r\n        charCode = str.charCodeAt(i);\r\n        if (charCode < 0x007f) {\r\n            totalLength++;\r\n        } else if (0x0080 <= charCode && charCode <= 0x07ff) {\r\n            totalLength += 2;\r\n        } else if (0x0800 <= charCode && charCode <= 0xffff) {\r\n            totalLength += 3;\r\n        } else {\r\n            totalLength += 4;\r\n        }\r\n    }\r\n    return totalLength;\r\n};\r\nwindow.checkLength = (len) => {\r\n    return (rule, value, callback) => {\r\n        if (getLength(value) > len) {\r\n            return Promise.resolve(\"位数超过限制\");\r\n        } else {\r\n            return Promise.resolve(); //成功\r\n        }\r\n    };\r\n};\r\n//解析全部数据字典-覆盖原key值\r\nexport let parseDict = (dict) => {\r\n    window.parseDict = (resArr) => {\r\n        let dictKeys = Object.keys(dict);\r\n        // console.log(dictKeys);\r\n        resArr.forEach((item, index) => {\r\n            if (!item.hasOwnProperty(\"id\")) {\r\n                item.id = index;\r\n            }\r\n            for (let i = 0; i < dictKeys.length; i++) {\r\n                let key = dictKeys[i];\r\n                if (item.hasOwnProperty(key)) {\r\n                    for (let j = 0; j < dict[key].length; j++) {\r\n                        let dictionary = dict[key][j];\r\n                        // console.log(dictionary);\r\n                        if (item[key] == dictionary.key) {\r\n                            // item[key] = dictionary.value;\r\n                            item[key] = item[key] + \"-\" + dictionary.value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    //解析全部数据字典-新增value字段\r\n    window.parseDictValue = (resArr) => {\r\n        let dictKeys = Object.keys(dict);\r\n        // console.log(dictKeys);\r\n        resArr.forEach((item, index) => {\r\n            if (!item.hasOwnProperty(\"id\")) {\r\n                item.id = index;\r\n            }\r\n            for (let i = 0; i < dictKeys.length; i++) {\r\n                let key = dictKeys[i];\r\n                if (item.hasOwnProperty(key)) {\r\n                    item[key + \"Value\"] = item[key];\r\n                    for (let j = 0; j < dict[key].length; j++) {\r\n                        let dictionary = dict[key][j];\r\n                        // console.log(dictionary);\r\n                        if (item[key] == dictionary.key) {\r\n                            // item[key] = dictionary.value;\r\n                            item[key + \"Value\"] =\r\n                                item[key] + \"-\" + dictionary.value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    // 单个字典-覆盖原key值\r\n    window.parseArrDict = (arr, mykey, realKey) => {\r\n        let dictArr = dict[realKey];\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < dictArr.length; j++) {\r\n                if (dictArr[j].key == arr[i][mykey]) {\r\n                    arr[i][mykey] = arr[i][mykey] + \"-\" + dictArr[j].value;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return arr;\r\n    };\r\n    // 单个字典-新增value字段\r\n    window.parseArrDictValue = (arr, mykey, realKey) => {\r\n        let dictArr = dict[realKey];\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0; j < dictArr.length; j++) {\r\n                if (dictArr[j].key == arr[i][mykey]) {\r\n                    arr[i][mykey + \"Value\"] =\r\n                        arr[i][mykey] + \"-\" + dictArr[j].value;\r\n                    // arr[i][mykey] = arr[i][mykey] + \"-\" + dictArr[j].value;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return arr;\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}