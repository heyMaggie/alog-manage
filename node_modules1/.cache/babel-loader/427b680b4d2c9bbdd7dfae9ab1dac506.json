{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport _classCallCheck from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nvar _jsxFileName = \"D:\\\\company\\\\algo-manage\\\\src\\\\algo\\\\modules\\\\algostatis\\\\pages\\\\algoStatis\\\\index.js\";\nimport React from \"react\";\nimport styles from \"./style.module.less\";\nimport echarts from \"echarts\";\nimport { connect } from \"react-redux\";\nvar RangePicker = _DatePicker.RangePicker;\nvar Option = _Select.Option;\n\nvar AlgorithmStatistical =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(AlgorithmStatistical, _React$PureComponent);\n\n  function AlgorithmStatistical() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AlgorithmStatistical);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AlgorithmStatistical)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      userList: []\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        var noTime = values[\"pickerTime\"].length < 1;\n        var params = {\n          algorithmId: values.algorithmId,\n          startTime: noTime ? \"\" : Date.parse(values[\"pickerTime\"][0]) * 1000,\n          endTime: noTime ? \"\" : Date.parse(values[\"pickerTime\"][1]) * 1000\n        };\n\n        _this.getData(params);\n      });\n    };\n\n    _this.getData = function (params) {\n      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      http.post({\n        data: params,\n        url: \"/statistics/algorithmStatistics\"\n      }).then(function (res) {\n        if (res.code == 0) {\n          var chartList = res.data;\n          var dom1 = document.getElementById(\"main4\");\n          var isNull = false;\n\n          if (chartList.length == 0) {\n            message.error(\"该时间段暂无数据\");\n            isNull = true;\n          } else {\n            isNull = false;\n          } // else {\n\n\n          var option = {\n            textStyle: {\n              color: \"#333\"\n            },\n            dataset: {\n              dimensions: [\"x\", \"y1\", \"y2\"],\n              source: chartList\n            },\n            tooltip: {\n              trigger: \"axis\",\n              backgroundColor: \"#1F2329\",\n              boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\n              borderColor: \"#1F2329\",\n              textStyle: {\n                color: \"#fff\"\n              }\n            },\n            legend: {\n              data: [\"标的数量\", \"人数\"],\n              left: 0\n            },\n            grid: {\n              left: \"1%\",\n              right: \"20px\",\n              bottom: \"9%\",\n              top: \"60px\",\n              containLabel: true\n            },\n            xAxis: {\n              type: \"category\",\n              boundaryGap: false,\n              splitLine: {\n                show: true,\n                lineStyle: {\n                  color: \"#E9E9E9\",\n                  type: \"dashed\"\n                }\n              },\n              axisTick: {\n                show: true,\n                //显示X轴刻度\n                lineStyle: {\n                  color: \"#E9E9E9\"\n                }\n              },\n              axisLine: {\n                // 刻度线的颜色\n                show: false\n              },\n              axisPointer: {\n                type: \"line\",\n                lineStyle: {\n                  color: \"#BDBEBF\"\n                }\n              }\n            },\n            yAxis: [{\n              type: \"value\",\n              name: \"单位：（股）\",\n              nameLocation: \"end\",\n              axisLine: {\n                show: false\n              },\n              nameTextStyle: {\n                color: \"#666\"\n              },\n              axisTick: {\n                show: false //隐藏X轴刻度\n\n              },\n              splitLine: {\n                show: true,\n                lineStyle: {\n                  color: \"#E9E9E9\",\n                  type: \"dashed\"\n                }\n              },\n              min: isNull ? 0 : null,\n              max: isNull ? 100 : null // nameGap: \"40\",\n              // nameTextStyle: {\n              //     padding: [0, 83, 0, 0],\n              // },\n\n            }, {\n              gridIndex: 0,\n              type: \"value\",\n              name: \"单位：（个）\",\n              splitLine: {\n                show: false\n              },\n              axisTick: {\n                show: false //隐藏X轴刻度\n\n              },\n              axisLine: {\n                show: false\n              },\n              min: \"0\",\n              max: \"100\"\n            }],\n            series: [{\n              name: \"标的数量\",\n              type: \"line\",\n              smooth: true,\n              showSymbol: false,\n              itemStyle: {\n                normal: {\n                  color: \"#83BDFF\"\n                }\n              },\n              areaStyle: {\n                normal: {\n                  color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                    offset: 0,\n                    color: \"rgba(50, 129, 255, 0.2)\"\n                  }, {\n                    offset: 1,\n                    color: \"rgba(255,255,255,0)\"\n                  }], false),\n                  shadowColor: \"rgba(0, 0, 0, 0.1)\",\n                  shadowBlur: 10\n                }\n              }\n            }, {\n              name: \"人数\",\n              type: \"line\",\n              stack: \"总量\",\n              smooth: true,\n              showSymbol: false,\n              itemStyle: {\n                normal: {\n                  color: \"#FFD747\"\n                }\n              },\n              areaStyle: {\n                normal: {\n                  color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                    offset: 0,\n                    color: \"rgba(255, 215, 71, 0.2)\"\n                  }, {\n                    offset: 1,\n                    color: \"rgba(255, 255, 255, 0)\"\n                  }], false),\n                  shadowColor: \"rgba(0, 0, 0, 0.1)\",\n                  shadowBlur: 10\n                }\n              }\n            }]\n          };\n          var myChart = echarts.init(dom1);\n          myChart.resize();\n          myChart.setOption(option); // }\n        } else {\n          message.error(\"服务异常\");\n        }\n      });\n    };\n\n    _this.chartResize = function () {\n      var dom1 = document.getElementById(\"main4\");\n      echarts.init(dom1).resize();\n    };\n\n    _this.getSelectList = function () {\n      // 用户\n      http.get({\n        url: \"/user/listAll\"\n      }).then(function (res3) {\n        _this.setState({\n          userList: res3.data\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AlgorithmStatistical, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData({\n        algorithmId: \"\",\n        startTime: \"\",\n        endTime: \"\"\n      });\n      this.getSelectList();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      window.cpuResize = this.chartResize;\n\n      if (this.props.path == \"/main/algostatis/algoStatis\") {\n        window.addEventListener(\"resize\", window.cpuResize);\n      } else {\n        window.removeEventListener(\"resize\", window.cpuResize);\n      }\n\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var userList = this.state.userList;\n      var children = userList.map(function (d) {\n        return React.createElement(Option, {\n          key: d.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259\n          },\n          __self: this\n        }, d.userName);\n      });\n      return React.createElement(\"div\", {\n        className: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: styles.search,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, React.createElement(_Form, {\n        layout: \"inline\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(_Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, getFieldDecorator(\"algorithmId\")( // <Input placeholder=\"请输入算法ID\" />\n      React.createElement(_Select, {\n        allowClear: true,\n        placeholder: \"\\u8BF7\\u8F93\\u5165\\u7B97\\u6CD5ID\",\n        showSearch: true,\n        style: {\n          width: 160\n        },\n        optionFilterProp: \"children\",\n        filterOption: function filterOption(input, option) {\n          return option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, children))), React.createElement(_Form.Item, {\n        style: {\n          marginLeft: \"12px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, getFieldDecorator(\"pickerTime\", {\n        initialValue: []\n      })(React.createElement(RangePicker, {\n        style: {\n          width: 432\n        },\n        showTime: true,\n        format: \"YYYY-MM-DD HH:mm:ss\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, {\n        style: {\n          float: \"right\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, React.createElement(_Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        style: {\n          width: 76\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, \"\\u786E\\u5B9A\")))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main4\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AlgorithmStatistical;\n}(React.PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    path: state.RouterModel.path\n  };\n};\n\nexport default connect(mapStateToProps, null)(_Form.create()(AlgorithmStatistical));","map":{"version":3,"sources":["D:/company/algo-manage/src/algo/modules/algostatis/pages/algoStatis/index.js"],"names":["React","styles","echarts","connect","RangePicker","Option","AlgorithmStatistical","state","userList","handleSubmit","e","preventDefault","props","form","validateFields","err","values","noTime","length","params","algorithmId","startTime","Date","parse","endTime","getData","count","http","post","data","url","then","res","code","chartList","dom1","document","getElementById","isNull","message","error","option","textStyle","color","dataset","dimensions","source","tooltip","trigger","backgroundColor","boxShadow","borderColor","legend","left","grid","right","bottom","top","containLabel","xAxis","type","boundaryGap","splitLine","show","lineStyle","axisTick","axisLine","axisPointer","yAxis","name","nameLocation","nameTextStyle","min","max","gridIndex","series","smooth","showSymbol","itemStyle","normal","areaStyle","graphic","LinearGradient","offset","shadowColor","shadowBlur","stack","myChart","init","resize","setOption","chartResize","getSelectList","get","res3","setState","window","cpuResize","path","addEventListener","removeEventListener","getFieldDecorator","children","map","d","id","userName","container","search","width","input","toLowerCase","indexOf","marginLeft","initialValue","float","height","PureComponent","mapStateToProps","ownProps","RouterModel","create"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styles from \"./style.module.less\";\r\nimport echarts from \"echarts\";\r\nimport {\r\n    SearchForm,\r\n    Input,\r\n    TimePicker,\r\n    Form,\r\n    Button,\r\n    Icon,\r\n    DatePicker,\r\n    Select,\r\n} from \"antd\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\nclass AlgorithmStatistical extends React.PureComponent {\r\n    state = { userList: [] };\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            let noTime = values[\"pickerTime\"].length < 1;\r\n            let params = {\r\n                algorithmId: values.algorithmId,\r\n                startTime: noTime\r\n                    ? \"\"\r\n                    : Date.parse(values[\"pickerTime\"][0]) * 1000,\r\n                endTime: noTime\r\n                    ? \"\"\r\n                    : Date.parse(values[\"pickerTime\"][1]) * 1000,\r\n            };\r\n            this.getData(params);\r\n        });\r\n    };\r\n    getData = (params, count = 0) => {\r\n        http.post({\r\n            data: params,\r\n            url: \"/statistics/algorithmStatistics\",\r\n        }).then((res) => {\r\n            if (res.code == 0) {\r\n                let chartList = res.data;\r\n                let dom1 = document.getElementById(\"main4\");\r\n                let isNull = false;\r\n                if (chartList.length == 0) {\r\n                    message.error(\"该时间段暂无数据\");\r\n                    isNull = true;\r\n                } else {\r\n                    isNull = false;\r\n                }\r\n                // else {\r\n                let option = {\r\n                    textStyle: {\r\n                        color: \"#333\",\r\n                    },\r\n                    dataset: {\r\n                        dimensions: [\"x\", \"y1\", \"y2\"],\r\n                        source: chartList,\r\n                    },\r\n                    tooltip: {\r\n                        trigger: \"axis\",\r\n                        backgroundColor: \"#1F2329\",\r\n                        boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\r\n                        borderColor: \"#1F2329\",\r\n                        textStyle: {\r\n                            color: \"#fff\",\r\n                        },\r\n                    },\r\n                    legend: {\r\n                        data: [\"标的数量\", \"人数\"],\r\n                        left: 0,\r\n                    },\r\n                    grid: {\r\n                        left: \"1%\",\r\n                        right: \"20px\",\r\n                        bottom: \"9%\",\r\n                        top: \"60px\",\r\n                        containLabel: true,\r\n                    },\r\n                    xAxis: {\r\n                        type: \"category\",\r\n                        boundaryGap: false,\r\n                        splitLine: {\r\n                            show: true,\r\n                            lineStyle: {\r\n                                color: \"#E9E9E9\",\r\n                                type: \"dashed\",\r\n                            },\r\n                        },\r\n                        axisTick: {\r\n                            show: true, //显示X轴刻度\r\n                            lineStyle: {\r\n                                color: \"#E9E9E9\",\r\n                            },\r\n                        },\r\n                        axisLine: {\r\n                            // 刻度线的颜色\r\n                            show: false,\r\n                        },\r\n                        axisPointer: {\r\n                            type: \"line\",\r\n                            lineStyle: { color: \"#BDBEBF\" },\r\n                        },\r\n                    },\r\n                    yAxis: [\r\n                        {\r\n                            type: \"value\",\r\n                            name: \"单位：（股）\",\r\n                            nameLocation: \"end\",\r\n                            axisLine: {\r\n                                show: false,\r\n                            },\r\n                            nameTextStyle: {\r\n                                color: \"#666\",\r\n                            },\r\n                            axisTick: {\r\n                                show: false, //隐藏X轴刻度\r\n                            },\r\n                            splitLine: {\r\n                                show: true,\r\n                                lineStyle: {\r\n                                    color: \"#E9E9E9\",\r\n                                    type: \"dashed\",\r\n                                },\r\n                            },\r\n                            min: isNull ? 0 : null,\r\n                            max: isNull ? 100 : null,\r\n                            // nameGap: \"40\",\r\n                            // nameTextStyle: {\r\n                            //     padding: [0, 83, 0, 0],\r\n                            // },\r\n                        },\r\n                        {\r\n                            gridIndex: 0,\r\n                            type: \"value\",\r\n                            name: \"单位：（个）\",\r\n                            splitLine: {\r\n                                show: false,\r\n                            },\r\n                            axisTick: {\r\n                                show: false, //隐藏X轴刻度\r\n                            },\r\n                            axisLine: {\r\n                                show: false,\r\n                            },\r\n                            min: \"0\",\r\n                            max: \"100\",\r\n                        },\r\n                    ],\r\n                    series: [\r\n                        {\r\n                            name: \"标的数量\",\r\n                            type: \"line\",\r\n                            smooth: true,\r\n                            showSymbol: false,\r\n                            itemStyle: {\r\n                                normal: {\r\n                                    color: \"#83BDFF\",\r\n                                },\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: new echarts.graphic.LinearGradient(\r\n                                        0,\r\n                                        0,\r\n                                        0,\r\n                                        1,\r\n                                        [\r\n                                            {\r\n                                                offset: 0,\r\n                                                color: \"rgba(50, 129, 255, 0.2)\",\r\n                                            },\r\n                                            {\r\n                                                offset: 1,\r\n                                                color: \"rgba(255,255,255,0)\",\r\n                                            },\r\n                                        ],\r\n                                        false\r\n                                    ),\r\n                                    shadowColor: \"rgba(0, 0, 0, 0.1)\",\r\n                                    shadowBlur: 10,\r\n                                },\r\n                            },\r\n                        },\r\n                        {\r\n                            name: \"人数\",\r\n                            type: \"line\",\r\n                            stack: \"总量\",\r\n                            smooth: true,\r\n                            showSymbol: false,\r\n                            itemStyle: {\r\n                                normal: {\r\n                                    color: \"#FFD747\",\r\n                                },\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: new echarts.graphic.LinearGradient(\r\n                                        0,\r\n                                        0,\r\n                                        0,\r\n                                        1,\r\n                                        [\r\n                                            {\r\n                                                offset: 0,\r\n                                                color: \"rgba(255, 215, 71, 0.2)\",\r\n                                            },\r\n                                            {\r\n                                                offset: 1,\r\n                                                color: \"rgba(255, 255, 255, 0)\",\r\n                                            },\r\n                                        ],\r\n                                        false\r\n                                    ),\r\n                                    shadowColor: \"rgba(0, 0, 0, 0.1)\",\r\n                                    shadowBlur: 10,\r\n                                },\r\n                            },\r\n                        },\r\n                    ],\r\n                };\r\n                let myChart = echarts.init(dom1);\r\n                myChart.resize();\r\n                myChart.setOption(option);\r\n                // }\r\n            } else {\r\n                message.error(\"服务异常\");\r\n            }\r\n        });\r\n    };\r\n    chartResize = () => {\r\n        var dom1 = document.getElementById(\"main4\");\r\n        echarts.init(dom1).resize();\r\n    };\r\n    componentDidMount() {\r\n        this.getData({ algorithmId: \"\", startTime: \"\", endTime: \"\" });\r\n        this.getSelectList();\r\n    }\r\n    getSelectList = () => {\r\n        // 用户\r\n        http.get({\r\n            url: \"/user/listAll\",\r\n        }).then((res3) => {\r\n            this.setState({\r\n                userList: res3.data,\r\n            });\r\n        });\r\n    };\r\n    render() {\r\n        window.cpuResize = this.chartResize;\r\n        if (this.props.path == \"/main/algostatis/algoStatis\") {\r\n            window.addEventListener(\"resize\", window.cpuResize);\r\n        } else {\r\n            window.removeEventListener(\"resize\", window.cpuResize);\r\n        }\r\n        const { getFieldDecorator } = this.props.form;\r\n        const { userList } = this.state;\r\n        const children = userList.map((d) => (\r\n            <Option key={d.id}>{d.userName}</Option>\r\n        ));\r\n        return (\r\n            <div className={styles.container}>\r\n                <div className={styles.search}>\r\n                    <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"algorithmId\")(\r\n                                // <Input placeholder=\"请输入算法ID\" />\r\n                                <Select\r\n                                    allowClear={true}\r\n                                    placeholder=\"请输入算法ID\"\r\n                                    showSearch\r\n                                    style={{ width: 160 }}\r\n                                    optionFilterProp=\"children\"\r\n                                    filterOption={(input, option) =>\r\n                                        option.props.children\r\n                                            .toLowerCase()\r\n                                            .indexOf(input.toLowerCase()) >= 0\r\n                                    }\r\n                                >\r\n                                    {children}\r\n                                </Select>\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item style={{ marginLeft: \"12px\" }}>\r\n                            {getFieldDecorator(\"pickerTime\", {\r\n                                initialValue: [],\r\n                            })(\r\n                                <RangePicker\r\n                                    style={{ width: 432 }}\r\n                                    showTime\r\n                                    format=\"YYYY-MM-DD HH:mm:ss\"\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item style={{ float: \"right\" }}>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                style={{ width: 76 }}\r\n                            >\r\n                                确定\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <div\r\n                        id=\"main4\"\r\n                        style={{ width: \"100%\", height: \"500px\" }}\r\n                    ></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        path: state.RouterModel.path,\r\n    };\r\n};\r\nexport default connect(\r\n    mapStateToProps,\r\n    null\r\n)(Form.create()(AlgorithmStatistical));\r\n"]},"metadata":{},"sourceType":"module"}