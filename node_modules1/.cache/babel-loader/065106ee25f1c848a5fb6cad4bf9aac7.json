{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport _classCallCheck from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nvar _jsxFileName = \"D:\\\\company\\\\algo-manage\\\\src\\\\algo\\\\modules\\\\chart\\\\pages\\\\systemMonitor\\\\index.js\";\nimport React from \"react\";\nimport styles from \"./style.module.less\";\nimport echarts from \"echarts\";\nimport { connect } from \"react-redux\";\nvar RangePicker = _DatePicker.RangePicker;\n\nvar OnlineUser =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(OnlineUser, _React$PureComponent);\n\n  function OnlineUser() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, OnlineUser);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OnlineUser)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          var noTime = values[\"pickerTime\"].length < 1;\n          var params = {\n            startTime: noTime ? \"\" : Date.parse(values[\"pickerTime\"][0]) * 1000,\n            endTime: noTime ? \"\" : Date.parse(values[\"pickerTime\"][1]) * 1000\n          };\n\n          _this.getData(params);\n        }\n      });\n    };\n\n    _this.getData = function (params) {\n      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      http.post({\n        url: \"/session/getOnline\",\n        data: params\n      }).then(function (res) {\n        if (res.code == 0) {\n          var isNull = false;\n\n          if (res.data.length == 0) {\n            message.error(\"该时间段暂无数据\");\n            isNull = true;\n          } else {\n            isNull = false;\n          }\n\n          var option = {\n            textStyle: {\n              color: \"#333\"\n            },\n            tooltip: {\n              trigger: \"axis\",\n              backgroundColor: \"#1F2329\",\n              boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\n              borderColor: \"#1F2329\",\n              textStyle: {\n                color: \"#fff\"\n              }\n            },\n            dataset: {\n              dimensions: [\"x\", \"y\"],\n              source: res.data\n            },\n            grid: {\n              left: \"35px\",\n              right: \"50px\",\n              bottom: \"9%\",\n              top: \"33px\",\n              containLabel: true\n            },\n            xAxis: {\n              type: \"category\",\n              boundaryGap: false,\n              // axisTick: {\n              //     interval: \"auto\",\n              //     alignWithLabel: true,\n              // },\n              splitLine: {\n                show: true,\n                lineStyle: {\n                  color: \"#E9E9E9\",\n                  type: \"dashed\"\n                }\n              },\n              axisLabel: {// interval: 0,\n                // rotate: 30,\n                // showMaxLabel: true,\n              },\n              axisTick: {\n                show: true,\n                //显示X轴刻度\n                lineStyle: {\n                  color: \"#E9E9E9\"\n                }\n              },\n              axisLine: {\n                // 刻度线的颜色\n                show: false\n              },\n              axisPointer: {\n                type: \"line\",\n                lineStyle: {\n                  color: \"#BDBEBF\"\n                }\n              }\n            },\n            yAxis: [{\n              type: \"value\",\n              name: \"单位：（个）\",\n              nameLocation: \"end\",\n              axisLine: {\n                show: false\n              },\n              nameTextStyle: {\n                color: \"#666\"\n              },\n              axisTick: {\n                show: false //隐藏X轴刻度\n\n              },\n              splitLine: {\n                show: true,\n                lineStyle: {\n                  color: \"#E9E9E9\",\n                  type: \"dashed\"\n                }\n              },\n              min: isNull ? 0 : null,\n              max: isNull ? 100 : null // nameTextStyle: {\n              //     padding: [0, 0, 0, 40],\n              // },\n\n            }],\n            series: [{\n              name: \"在线人数\",\n              type: \"line\",\n              smooth: true,\n              showSymbol: false,\n              // symbol: \"circle\",\n              itemStyle: {\n                normal: {\n                  color: \"#65A6FF\"\n                }\n              },\n              areaStyle: {\n                normal: {\n                  color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                    offset: 0,\n                    color: \"rgba(50, 129, 255, 0.2)\"\n                  }, {\n                    offset: 1,\n                    color: \"rgba(255,255,255,0)\"\n                  }], false),\n                  shadowColor: \"rgba(0, 0, 0, 0.1)\",\n                  shadowBlur: 10\n                }\n              }\n            }]\n          };\n          var myChart = echarts.init(document.getElementById(\"main3\"));\n          myChart.resize();\n          myChart.setOption(option);\n        } else {\n          message.error(\"服务异常\");\n        }\n      });\n    };\n\n    _this.chartResize = function () {\n      var dom1 = document.getElementById(\"main3\");\n      echarts.init(dom1).resize();\n    };\n\n    return _this;\n  }\n\n  _createClass(OnlineUser, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData({\n        startTime: \"\",\n        endTime: \"\"\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      window.cpuResize = this.chartResize;\n\n      if (this.props.path == \"/main/chart/onlineUser\") {\n        window.addEventListener(\"resize\", window.cpuResize);\n      } else {\n        window.removeEventListener(\"resize\", window.cpuResize);\n      }\n\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      return React.createElement(\"div\", {\n        className: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: styles.search,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(_Form, {\n        layout: \"inline\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(_Form.Item, {\n        label: \"\\u65F6\\u95F4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, getFieldDecorator(\"pickerTime\", {\n        initialValue: []\n      })(React.createElement(RangePicker, {\n        style: {\n          width: 432\n        },\n        showTime: true,\n        format: \"YYYY-MM-DD HH:mm:ss\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, {\n        style: {\n          float: \"right\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(_Button, {\n        type: \"ghost\",\n        htmlType: \"submit\",\n        style: {\n          width: 76\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"\\u786E\\u5B9A\")))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main3\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return OnlineUser;\n}(React.PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    path: state.RouterModel.path\n  };\n};\n\nexport default connect(mapStateToProps, null)(_Form.create()(OnlineUser));","map":{"version":3,"sources":["D:/company/algo-manage/src/algo/modules/chart/pages/systemMonitor/index.js"],"names":["React","styles","echarts","connect","RangePicker","OnlineUser","state","handleSubmit","e","preventDefault","props","form","validateFields","err","values","noTime","length","params","startTime","Date","parse","endTime","getData","count","http","post","url","data","then","res","code","isNull","message","error","option","textStyle","color","tooltip","trigger","backgroundColor","boxShadow","borderColor","dataset","dimensions","source","grid","left","right","bottom","top","containLabel","xAxis","type","boundaryGap","splitLine","show","lineStyle","axisLabel","axisTick","axisLine","axisPointer","yAxis","name","nameLocation","nameTextStyle","min","max","series","smooth","showSymbol","itemStyle","normal","areaStyle","graphic","LinearGradient","offset","shadowColor","shadowBlur","myChart","init","document","getElementById","resize","setOption","chartResize","dom1","window","cpuResize","path","addEventListener","removeEventListener","getFieldDecorator","container","search","initialValue","width","float","height","PureComponent","mapStateToProps","ownProps","RouterModel","create"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styles from \"./style.module.less\";\r\nimport echarts from \"echarts\";\r\nimport { TimePicker, Form, Button, Icon, DatePicker, Select } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst { RangePicker } = DatePicker;\r\nclass OnlineUser extends React.PureComponent {\r\n    state = {};\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                let noTime = values[\"pickerTime\"].length < 1;\r\n                let params = {\r\n                    startTime: noTime\r\n                        ? \"\"\r\n                        : Date.parse(values[\"pickerTime\"][0]) * 1000,\r\n                    endTime: noTime\r\n                        ? \"\"\r\n                        : Date.parse(values[\"pickerTime\"][1]) * 1000,\r\n                };\r\n                this.getData(params);\r\n            }\r\n        });\r\n    };\r\n    getData = (params, count = 0) => {\r\n        http.post({\r\n            url: \"/session/getOnline\",\r\n            data: params,\r\n        }).then((res) => {\r\n            if (res.code == 0) {\r\n                let isNull = false;\r\n                if (res.data.length == 0) {\r\n                    message.error(\"该时间段暂无数据\");\r\n                    isNull = true;\r\n                } else {\r\n                    isNull = false;\r\n                }\r\n                let option = {\r\n                    textStyle: {\r\n                        color: \"#333\",\r\n                    },\r\n                    tooltip: {\r\n                        trigger: \"axis\",\r\n                        backgroundColor: \"#1F2329\",\r\n                        boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\r\n                        borderColor: \"#1F2329\",\r\n                        textStyle: {\r\n                            color: \"#fff\",\r\n                        },\r\n                    },\r\n                    dataset: {\r\n                        dimensions: [\"x\", \"y\"],\r\n                        source: res.data,\r\n                    },\r\n                    grid: {\r\n                        left: \"35px\",\r\n                        right: \"50px\",\r\n                        bottom: \"9%\",\r\n                        top: \"33px\",\r\n                        containLabel: true,\r\n                    },\r\n                    xAxis: {\r\n                        type: \"category\",\r\n                        boundaryGap: false,\r\n                        // axisTick: {\r\n                        //     interval: \"auto\",\r\n                        //     alignWithLabel: true,\r\n                        // },\r\n                        splitLine: {\r\n                            show: true,\r\n                            lineStyle: {\r\n                                color: \"#E9E9E9\",\r\n                                type: \"dashed\",\r\n                            },\r\n                        },\r\n                        axisLabel: {\r\n                            // interval: 0,\r\n                            // rotate: 30,\r\n                            // showMaxLabel: true,\r\n                        },\r\n                        axisTick: {\r\n                            show: true, //显示X轴刻度\r\n                            lineStyle: {\r\n                                color: \"#E9E9E9\",\r\n                            },\r\n                        },\r\n                        axisLine: {\r\n                            // 刻度线的颜色\r\n                            show: false,\r\n                        },\r\n                        axisPointer: {\r\n                            type: \"line\",\r\n                            lineStyle: { color: \"#BDBEBF\" },\r\n                        },\r\n                    },\r\n                    yAxis: [\r\n                        {\r\n                            type: \"value\",\r\n                            name: \"单位：（个）\",\r\n                            nameLocation: \"end\",\r\n                            axisLine: {\r\n                                show: false,\r\n                            },\r\n                            nameTextStyle: {\r\n                                color: \"#666\",\r\n                            },\r\n                            axisTick: {\r\n                                show: false, //隐藏X轴刻度\r\n                            },\r\n                            splitLine: {\r\n                                show: true,\r\n                                lineStyle: {\r\n                                    color: \"#E9E9E9\",\r\n                                    type: \"dashed\",\r\n                                },\r\n                            },\r\n                            min: isNull ? 0 : null,\r\n                            max: isNull ? 100 : null,\r\n                            // nameTextStyle: {\r\n                            //     padding: [0, 0, 0, 40],\r\n                            // },\r\n                        },\r\n                    ],\r\n                    series: [\r\n                        {\r\n                            name: \"在线人数\",\r\n                            type: \"line\",\r\n                            smooth: true,\r\n                            showSymbol: false,\r\n                            // symbol: \"circle\",\r\n                            itemStyle: {\r\n                                normal: {\r\n                                    color: \"#65A6FF\",\r\n                                },\r\n                            },\r\n                            areaStyle: {\r\n                                normal: {\r\n                                    color: new echarts.graphic.LinearGradient(\r\n                                        0,\r\n                                        0,\r\n                                        0,\r\n                                        1,\r\n                                        [\r\n                                            {\r\n                                                offset: 0,\r\n                                                color: \"rgba(50, 129, 255, 0.2)\",\r\n                                            },\r\n                                            {\r\n                                                offset: 1,\r\n                                                color: \"rgba(255,255,255,0)\",\r\n                                            },\r\n                                        ],\r\n                                        false\r\n                                    ),\r\n                                    shadowColor: \"rgba(0, 0, 0, 0.1)\",\r\n                                    shadowBlur: 10,\r\n                                },\r\n                            },\r\n                        },\r\n                    ],\r\n                };\r\n                var myChart = echarts.init(document.getElementById(\"main3\"));\r\n                myChart.resize();\r\n                myChart.setOption(option);\r\n            } else {\r\n                message.error(\"服务异常\");\r\n            }\r\n        });\r\n    };\r\n    chartResize = () => {\r\n        var dom1 = document.getElementById(\"main3\");\r\n        echarts.init(dom1).resize();\r\n    };\r\n    componentDidMount() {\r\n        this.getData({ startTime: \"\", endTime: \"\" });\r\n    }\r\n    render() {\r\n        window.cpuResize = this.chartResize;\r\n        if (this.props.path == \"/main/chart/onlineUser\") {\r\n            window.addEventListener(\"resize\", window.cpuResize);\r\n        } else {\r\n            window.removeEventListener(\"resize\", window.cpuResize);\r\n        }\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <div className={styles.container}>\r\n                <div className={styles.search}>\r\n                    <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n                        <Form.Item label=\"时间\">\r\n                            {getFieldDecorator(\"pickerTime\", {\r\n                                initialValue: [],\r\n                            })(\r\n                                <RangePicker\r\n                                    style={{ width: 432 }}\r\n                                    showTime\r\n                                    format=\"YYYY-MM-DD HH:mm:ss\"\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item style={{ float: \"right\" }}>\r\n                            <Button\r\n                                type=\"ghost\"\r\n                                htmlType=\"submit\"\r\n                                style={{ width: 76 }}\r\n                            >\r\n                                确定\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <div\r\n                        id=\"main3\"\r\n                        style={{ width: \"100%\", height: \"500px\" }}\r\n                    ></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        path: state.RouterModel.path,\r\n    };\r\n};\r\nexport default connect(mapStateToProps, null)(Form.create()(OnlineUser));\r\n"]},"metadata":{},"sourceType":"module"}