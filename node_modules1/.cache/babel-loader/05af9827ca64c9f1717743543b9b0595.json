{"ast":null,"code":"// import React from \"react\";\n// // import { DatePicker, Select } from \"antd\";\n// import ChartComponent from \"@/components/ChartComponent\";\n// import SelectOption from \"@/components/SelectOption\";\n// import echarts from \"echarts\";\n// // import \"echarts/lib/chart/bar\";\n// // import \"echarts/lib/chart/line\";\n// // import \"echarts/lib/chart/gauge\";\n// // //引入提示框和标题组件\n// // import \"echarts/lib/component/tooltip\";\n// // import \"echarts/lib/component/title\";\n// // import \"echarts/lib/component/grid\";\n// // import \"echarts/lib/component/legend\";\n// // //引入滑动条\n// // import \"echarts/lib/component/dataZoom\";\n// // import \"echarts/lib/component/dataZoomInside\";\n// // import \"echarts/lib/component/dataZoomSlider\";\n// // import \"echarts/lib/component/visualMap\";\n// // import \"echarts/lib/component/markLine\";\n// let secArr = [\n//     { key: \"theme1000SnapMktNum\", value: \"主题1000快照行情数目\" },\n//     { key: \"theme1001SnapMktNum\", value: \"主题1001快照行情数目\" },\n// ];\n// const upColor = '#00da3c';\n// const downColor = '#ec0000';\n// function splitData(rawData) {\n//   let categoryData = [];\n//   let values = [];\n//   let volumes = [];\n//   for (let i = 0; i < rawData.length; i++) {\n//     categoryData.push(rawData[i].splice(0, 1)[0]);\n//     values.push(rawData[i]);\n//     volumes.push([i, rawData[i][4], rawData[i][0] > rawData[i][1] ? 1 : -1]);\n//   }\n//   return {\n//     categoryData: categoryData,\n//     values: values,\n//     volumes: volumes\n//   };\n// }\n// function calculateMA(dayCount, data) {\n//   var result = [];\n//   for (var i = 0, len = data.values.length; i < len; i++) {\n//     if (i < dayCount) {\n//       result.push('-');\n//       continue;\n//     }\n//     var sum = 0;\n//     for (var j = 0; j < dayCount; j++) {\n//       sum += data.values[i - j][1];\n//     }\n//     result.push(+(sum / dayCount).toFixed(3));\n//   }\n//   return result;\n// }\n// export default class onlineUser extends React.PureComponent {\n//     state = {\n//         info: {},\n//         formArr: [\n//             {\n//                 label: \"查询类别\",\n//                 id: \"qryType\",\n//                 initialValue: \"theme1000SnapMktNum\",\n//                 rules: [\n//                     {\n//                         required: true,\n//                         message: \"查询类别不能为空\",\n//                     },\n//                 ],\n//                 component: SelectOption(secArr, { width: \"200px\" }),\n//             },\n//         ],\n//     };\n//     getSearchList = (params, form) => {\n//         console.log(params);\n//         this.getData(params);\n//     };\n//     getData = (params, count = 0) => {\n//         http.get({\n//             url: \"/tb-online-time/onlineNum\",\n//             // data: params,\n//         }).then((res) => {\n//             // console.log(res);\n//             let list = res.data;\n//             let params = {\n//                 theme: \"light\",\n//                 title: {\n//                     // text: \"用户登录曲线图,当前总登录数：1693\",\n//                     text: \"当前时刻总登录数：\" + count,\n//                 },\n//                 data: list,\n//                 xAxis: {\n//                     name: \"时间\",\n//                 },\n//                 yAxis: {\n//                     name: \"人数\",\n//                 },\n//                 // xSeriesUnit:\"\",  //x轴单位\n//                 ySeriesUnit: \"\",\n//                 gridRight: \"10%\",\n//                 // level:[200,400,600,800,1000]\n//             };\n//             let option = getLineOption(params);\n//             console.log(option);\n//             this.setState({\n//                 info: option,\n//             });\n//         });\n//     };\n//     getCount = (params) => {\n//         http.get({\n//             url: \"/tb-session-first/currentOnline\",\n//             // data: params,\n//         }).then((res) => {\n//             let count = res.data;\n//             // console.log(\"人数 \", count);\n//             this.getData({}, count);\n//         });\n//     };\n//     getData2 = (params, count = 0) => {\n//         let rawData = [[\"2016-01-13\",16526.63,16151.41,16123.2,16593.51,153530000],[\"2016-01-14\",16159.01,16379.05,16075.12,16482.05,158830000],[\"2016-01-15\",16354.33,15988.08,15842.11,16354.33,239210000],[\"2016-01-19\",16009.45,16016.02,15900.25,16171.96,144360000],[\"2016-01-20\",15989.45,15766.74,15450.56,15989.45,191870000],[\"2016-01-21\",15768.87,15882.68,15704.66,16038.59,145140000],[\"2016-01-22\",15921.1,16093.51,15921.1,16136.79,145850000],[\"2016-01-25\",16086.46,15885.22,15880.15,16086.46,123250000],[\"2016-01-26\",15893.16,16167.23,15893.16,16185.79,118210000],[\"2016-01-27\",16168.74,15944.46,15878.3,16235.03,138350000],[\"2016-01-28\",15960.28,16069.64,15863.72,16102.14,130120000],[\"2016-01-29\",16090.26,16466.3,16090.26,16466.3,217940000],[\"2016-02-01\",16453.63,16449.18,16299.47,16510.98,114450000],[\"2016-02-02\",16420.21,16153.54,16108.44,16420.21,126210000],[\"2016-02-03\",16186.2,16336.66,15960.45,16381.69,141870000],[\"2016-02-04\",16329.67,16416.58,16266.16,16485.84,131490000],[\"2016-02-05\",16417.95,16204.97,16129.81,16423.63,139010000],[\"2016-02-08\",16147.51,16027.05,15803.55,16147.51,165880000],[\"2016-02-09\",16005.41,16014.38,15881.11,16136.62,127740000],[\"2016-02-10\",16035.61,15914.74,15899.91,16201.89,122290000],[\"2016-02-11\",15897.82,15660.18,15503.01,15897.82,172070000],[\"2016-02-12\",15691.62,15973.84,15691.62,15974.04,132550000],[\"2016-02-16\",16012.39,16196.41,16012.39,16196.41,142030000],[\"2016-02-17\",16217.98,16453.83,16217.98,16486.12,124080000],[\"2016-02-18\",16483.76,16413.43,16390.43,16511.84,104950000],[\"2016-02-19\",16410.96,16391.99,16278,16410.96,134340000],[\"2016-02-22\",16417.13,16620.66,16417.13,16664.24,102240000],[\"2016-02-23\",16610.39,16431.78,16403.53,16610.39,98170000],[\"2016-02-24\",16418.84,16484.99,16165.86,16507.39,93620000],[\"2016-02-25\",16504.38,16697.29,16458.42,16697.98,94120000],[\"2016-02-26\",16712.7,16639.97,16623.91,16795.98,98480000],[\"2016-02-29\",16634.15,16516.5,16510.4,16726.12,126220000],[\"2016-03-01\",16545.67,16865.08,16545.67,16865.56,105050000],[\"2016-03-02\",16851.17,16899.32,16766.32,16900.17,104470000],[\"2016-03-03\",16896.17,16943.9,16820.73,16944.31,91110000],[\"2016-03-04\",16945,17006.77,16898.84,17062.38,106910000],[\"2016-03-07\",16991.29,17073.95,16940.48,17099.25,100290000],[\"2016-03-08\",17050.67,16964.1,16921.51,17072.79,108380000],[\"2016-03-09\",16969.17,17000.36,16947.94,17048.5,116690000],[\"2016-03-10\",17006.05,16995.13,16821.86,17130.11,117570000],[\"2016-03-11\",17014.99,17213.31,17014.99,17220.09,123420000],[\"2016-03-14\",17207.49,17229.13,17161.16,17275.07,96350000],[\"2016-03-15\",17217.15,17251.53,17120.35,17251.7,92830000],[\"2016-03-16\",17249.34,17325.76,17204.07,17379.18,118710000],[\"2016-03-17\",17321.38,17481.49,17297.65,17529.01,117990000],[\"2016-03-18\",17481.49,17602.3,17481.49,17620.58,321230016],[\"2016-03-21\",17589.7,17623.87,17551.28,17644.97,84410000],[\"2016-03-22\",17602.71,17582.57,17540.42,17648.94,95450000],[\"2016-03-23\",17588.81,17502.59,17486.27,17588.81,84240000],[\"2016-03-24\",17485.33,17515.73,17399.01,17517.14,84100000],[\"2016-03-28\",17526.08,17535.39,17493.03,17583.81,70460000],[\"2016-03-29\",17512.58,17633.11,17434.27,17642.81,86160000],[\"2016-03-30\",17652.36,17716.66,17652.36,17790.11,79330000],[\"2016-03-31\",17716.05,17685.09,17669.72,17755.7,102600000],[\"2016-04-01\",17661.74,17792.75,17568.02,17811.48,104890000],[\"2016-04-04\",17799.39,17737,17710.67,17806.38,85230000],[\"2016-04-05\",17718.03,17603.32,17579.56,17718.03,115230000],[\"2016-04-06\",17605.45,17716.05,17542.54,17723.55,99410000],[\"2016-04-07\",17687.28,17541.96,17484.23,17687.28,90120000],[\"2016-04-08\",17555.39,17576.96,17528.16,17694.51,79990000],[\"2016-04-11\",17586.48,17556.41,17555.9,17731.63,107100000],[\"2016-04-12\",17571.34,17721.25,17553.57,17744.43,81020000],[\"2016-04-13\",17741.66,17908.28,17741.66,17918.35,91710000],[\"2016-04-14\",17912.25,17926.43,17885.44,17962.14,84510000],[\"2016-04-15\",17925.95,17897.46,17867.41,17937.65,118160000],[\"2016-04-18\",17890.2,18004.16,17848.22,18009.53,89390000],[\"2016-04-19\",18012.1,18053.6,17984.43,18103.46,89820000],[\"2016-04-20\",18059.49,18096.27,18031.21,18167.63,100210000],[\"2016-04-21\",18092.84,17982.52,17963.89,18107.29,102720000],[\"2016-04-22\",17985.05,18003.75,17909.89,18026.85,134120000],[\"2016-04-25\",17990.94,17977.24,17855.55,17990.94,83770000],[\"2016-04-26\",17987.38,17990.32,17934.17,18043.77,92570000],[\"2016-04-27\",17996.14,18041.55,17920.26,18084.66,109090000],[\"2016-04-28\",18023.88,17830.76,17796.55,18035.73,100920000],[\"2016-04-29\",17813.09,17773.64,17651.98,17814.83,136670000],[\"2016-05-02\",17783.78,17891.16,17773.71,17912.35,80100000],[\"2016-05-03\",17870.75,17750.91,17670.88,17870.75,97060000],[\"2016-05-04\",17735.02,17651.26,17609.01,17738.06,95020000],[\"2016-05-05\",17664.48,17660.71,17615.82,17736.11,81530000],[\"2016-05-06\",17650.3,17740.63,17580.38,17744.54,80020000],[\"2016-05-09\",17743.85,17705.91,17668.38,17783.16,85590000],[\"2016-05-10\",17726.66,17928.35,17726.66,17934.61,75790000],[\"2016-05-11\",17919.03,17711.12,17711.05,17919.03,87390000],[\"2016-05-12\",17711.12,17720.5,17625.38,17798.19,88560000],[\"2016-05-13\",17711.12,17535.32,17512.48,17734.74,86640000],[\"2016-05-16\",17531.76,17710.71,17531.76,17755.8,88440000],[\"2016-05-17\",17701.46,17529.98,17469.92,17701.46,103260000],[\"2016-05-18\",17501.28,17526.62,17418.21,17636.22,79120000],[\"2016-05-19\",17514.16,17435.4,17331.07,17514.16,95530000],[\"2016-05-20\",17437.32,17500.94,17437.32,17571.75,111990000],[\"2016-05-23\",17507.04,17492.93,17480.05,17550.7,87790000],[\"2016-05-24\",17525.19,17706.05,17525.19,17742.59,86480000],[\"2016-05-25\",17735.09,17851.51,17735.09,17891.71,79180000],[\"2016-05-26\",17859.52,17828.29,17803.82,17888.66,68940000],[\"2016-05-27\",17826.85,17873.22,17824.73,17873.22,73190000],[\"2016-05-31\",17891.5,17787.2,17724.03,17899.24,147390000],[\"2016-06-01\",17754.55,17789.67,17664.79,17809.18,78530000],[\"2016-06-02\",17789.05,17838.56,17703.55,17838.56,75560000],[\"2016-06-03\",17799.8,17807.06,17689.68,17833.17,82270000],[\"2016-06-06\",17825.69,17920.33,17822.81,17949.68,71870000],[\"2016-06-07\",17936.22,17938.28,17936.22,18003.23,78750000],[\"2016-06-08\",17931.91,18005.05,17931.91,18016,71260000],[\"2016-06-09\",17969.98,17985.19,17915.88,18005.22,69690000],[\"2016-06-10\",17938.82,17865.34,17812.34,17938.82,90540000],[\"2016-06-13\",17830.5,17732.48,17731.35,17893.28,101690000],[\"2016-06-14\",17710.77,17674.82,17595.79,17733.92,93740000],[\"2016-06-15\",17703.65,17640.17,17629.01,17762.96,94130000],[\"2016-06-16\",17602.23,17733.1,17471.29,17754.91,91950000],[\"2016-06-17\",17733.44,17675.16,17602.78,17733.44,248680000],[\"2016-06-20\",17736.87,17804.87,17736.87,17946.36,99380000],[\"2016-06-21\",17827.33,17829.73,17799.8,17877.84,85130000],[\"2016-06-22\",17832.67,17780.83,17770.36,17920.16,89440000]];\n//         var data = splitData(rawData);\n//         console.log(data);\n//         let option = {\n//             animation: false,\n//             legend: {\n//               top: 10,\n//               left: 'center',\n//               data: ['MA5', 'MA10', 'MA20', 'MA30']\n//             },\n//             tooltip: {\n//               trigger: 'axis',\n//               backgroundColor:\"rgb(50,50,50,0.9)\",\n//               axisPointer: {\n//                 type: 'cross'\n//               },\n//               borderWidth: 1,\n//               borderColor: '#ccc',\n//               padding: 10,\n//             //   textStyle: {\n//             //     color: '#000'\n//             //   },\n//             //   position: function (pos, params, el, elRect, size) {\n//             //     const obj = {\n//             //       top: 10\n//             //     };\n//             //     obj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 30;\n//             //     return obj;\n//             //   }\n//               // extraCssText: 'width: 170px'\n//             },\n//             axisPointer: {\n//               link: [\n//                 {\n//                   xAxisIndex: 'all'\n//                 }\n//               ],\n//               label: {\n//                 backgroundColor: '#777'\n//               }\n//             },\n//             visualMap: {\n//               show: false,\n//               seriesIndex: 5,\n//               dimension: 2,\n//               pieces: [\n//                 {\n//                   value: 1,\n//                   color: downColor\n//                 },\n//                 {\n//                   value: -1,\n//                   color: upColor\n//                 }\n//               ]\n//             },\n//             grid: [\n//               {\n//                 left: '10%',\n//                 right: '8%',\n//                 height: '60%'\n//               },\n//               {\n//                 left: '10%',\n//                 right: '8%',\n//                 top: '75%',\n//                 height: '15%'\n//               },\n//             //   {\n//             //     left: '10%',\n//             //     right: '8%',\n//             //     top: '85%',\n//             //     height: '15%'\n//             //   }\n//             ],\n//             xAxis: [\n//               {\n//                 type: 'category',\n//                 data: data.categoryData,\n//                 boundaryGap: false,\n//                 axisLine: { onZero: false },\n//                 splitLine: { show: false },\n//                 min: 'dataMin',\n//                 max: 'dataMax',\n//                 axisPointer: {\n//                   z: 100\n//                 }\n//               },\n//               {\n//                 type: 'category',\n//                 gridIndex: 1,\n//                 data: data.categoryData,\n//                 boundaryGap: false,\n//                 axisLine: { onZero: false },\n//                 axisTick: { show: false },\n//                 splitLine: { show: false },\n//                 axisLabel: { show: false },\n//                 min: 'dataMin',\n//                 max: 'dataMax'\n//               },\n//             ],\n//             yAxis: [\n//               {\n//                 scale: true,\n//                 splitArea: {\n//                   show: true\n//                 }\n//               },\n//               {\n//                 scale: true,\n//                 gridIndex: 1,\n//                 splitNumber: 2,\n//                 axisLabel: { show: false },\n//                 axisLine: { show: false },\n//                 axisTick: { show: false },\n//                 splitLine: { show: false }\n//               }\n//             ],\n//             dataZoom: [\n//               {\n//                 type: 'inside',\n//                 xAxisIndex: [0, 1],\n//                 start: 0,\n//                 end: 100\n//               },\n//             //   {\n//             //     show: true,\n//             //     xAxisIndex: [0, 1],\n//             //     type: 'slider',\n//             //     top: '85%',\n//             //     start: 0,\n//             //     end: 100\n//             //   }\n//             ],\n//             series: [\n//             //   {\n//             //     name: 'Dow-Jones index',\n//             //     type: 'candlestick',\n//             //     data: data.values,\n//             //     itemStyle: {\n//             //       color: upColor,\n//             //       color0: downColor,\n//             //       borderColor: undefined,\n//             //       borderColor0: undefined\n//             //     },\n//             //     tooltip: {\n//             //       formatter: function (param) {\n//             //         param = param[0];\n//             //         return [\n//             //           'Date: ' + param.name + '<hr size=1 style=\"margin: 3px 0\">',\n//             //           'Open: ' + param.data[0] + '<br/>',\n//             //           'Close: ' + param.data[1] + '<br/>',\n//             //           'Lowest: ' + param.data[2] + '<br/>',\n//             //           'Highest: ' + param.data[3] + '<br/>'\n//             //         ].join('');\n//             //       }\n//             //     }\n//             //   },\n//               {\n//                 name: 'MA5',\n//                 type: 'line',\n//                 data: calculateMA(5, data),\n//                 smooth: true,\n//                 itemStyle: {\n//                     color: upColor,\n//                     color0: downColor,\n//                     borderColor: undefined,\n//                     borderColor0: undefined\n//                   },\n//                 lineStyle: {\n//                   opacity: 0.5\n//                 }\n//               },\n//               {\n//                 name: 'MA10',\n//                 type: 'line',\n//                 data: calculateMA(10, data),\n//                 smooth: true,\n//                 lineStyle: {\n//                   opacity: 0.5\n//                 }\n//               },\n//               {\n//                 name: 'MA20',\n//                 type: 'line',\n//                 data: calculateMA(20, data),\n//                 smooth: true,\n//                 lineStyle: {\n//                   opacity: 0.5\n//                 }\n//               },\n//               {\n//                 name: 'MA30',\n//                 type: 'line',\n//                 data: calculateMA(30, data),\n//                 smooth: true,\n//                 lineStyle: {\n//                   opacity: 0.5\n//                 }\n//               },\n//               {\n//                 name: 'Volume',\n//                 type: 'bar',\n//                 xAxisIndex: 1,\n//                 yAxisIndex: 1,\n//                 data: data.volumes\n//               },\n//             //   {\n//             //     name: 'Volume',\n//             //     type: 'bar',\n//             //     xAxisIndex: 2,\n//             //     yAxisIndex: 1,\n//             //     data: data.volumes\n//             //   }\n//             ]\n//         };\n//         console.log(option);\n//         // this.setState({\n//         //     info: option,\n//         // });\n//         // console.log(document.getElementById('main'));\n//         var myChart = echarts.init(document.getElementById('main'));\n//         myChart.setOption(option);\n//         var myChart2 = echarts.init(document.getElementById('main2'));\n//         let option2 =  {\n//             xAxis: {\n//               type: 'category',\n//               data: data.categoryData,\n//               boundaryGap: false,\n//               axisLine: { onZero: false },\n//               axisTick: { show: false },\n//               splitLine: { show: false },\n//               axisLabel: { show: false },\n//               min: 'dataMin',\n//               max: 'dataMax'\n//             },\n//             yAxis: {\n//               type: 'value',\n//               show:false\n//             },\n//             grid: [\n//                 {\n//                   left: '10%',\n//                   right: '8%',\n//                   top: '5%',\n//                   height: '80%'\n//                 }\n//             ],\n//             tooltip: {\n//                 trigger: \"axis\",\n//                 backgroundColor:\"rgb(50,50,50,0.9)\",\n//                 // backgroundColor:\"white\",\n//                 // textStyle:{\n//                 //     color:\"#333\"\n//                 // }\n//                 // formatter: function (params) {\n//                 //     return (\n//                 //         params[0].name +\n//                 //         // xunit +\n//                 //         \"<br />\" +\n//                 //         params[0].marker +\n//                 //         params.seriesName +\n//                 //         \":\" +\n//                 //         params[0].value\n//                 //         // yunit\n//                 //     );\n//                 // },\n//             },\n//             dataZoom: [\n//                 {\n//                     type: \"inside\",\n//                     show: false,\n//                 },\n//             ],\n//             series: [\n//               {\n//                 name:\"参数\",\n//                 data: data.volumes,\n//                 itemStyle: {\n//                     color: \"#61a0a8\",\n//                 },\n//                 type: 'bar'\n//               }\n//             ]\n//           };\n//         myChart2.setOption(option2,\"light\");\n//         var myChart3 = echarts.init(document.getElementById('main3'));\n//         let option3 = JSON.parse(JSON.stringify(option2))\n//         option3.series[0].itemStyle.color=\"#749f83\"\n//         myChart3.setOption(option3);\n//     };\n//     componentDidMount() {\n//         // this.getCount();\n//         this.getData2();\n//     }\n//     render() {\n//         let info = this.state.info;\n//         return (\n//             <div>\n//                 <div id=\"main\" style={{width: \"1000px\",height:\"600px\"}}></div>\n//                 <div id=\"main2\" style={{width: \"1000px\",height:\"150px\"}}></div>\n//                 <div id=\"main3\" style={{width: \"1000px\",height:\"150px\"}}></div>\n//             </div>\n//         );\n//     }\n// }","map":{"version":3,"sources":["D:/company/algo-manage/src/algo/modules/chart/pages/onlineUser/index.js"],"names":[],"mappingssourcesContent":["// import React from \"react\";\r\n// // import { DatePicker, Select } from \"antd\";\r\n// import ChartComponent from \"@/components/ChartComponent\";\r\n// import SelectOption from \"@/components/SelectOption\";\r\n// import echarts from \"echarts\";\r\n// // import \"echarts/lib/chart/bar\";\r\n// // import \"echarts/lib/chart/line\";\r\n// // import \"echarts/lib/chart/gauge\";\r\n// // //引入提示框和标题组件\r\n// // import \"echarts/lib/component/tooltip\";\r\n// // import \"echarts/lib/component/title\";\r\n// // import \"echarts/lib/component/grid\";\r\n// // import \"echarts/lib/component/legend\";\r\n// // //引入滑动条\r\n// // import \"echarts/lib/component/dataZoom\";\r\n// // import \"echarts/lib/component/dataZoomInside\";\r\n// // import \"echarts/lib/component/dataZoomSlider\";\r\n\r\n// // import \"echarts/lib/component/visualMap\";\r\n// // import \"echarts/lib/component/markLine\";\r\n\r\n// let secArr = [\r\n//     { key: \"theme1000SnapMktNum\", value: \"主题1000快照行情数目\" },\r\n//     { key: \"theme1001SnapMktNum\", value: \"主题1001快照行情数目\" },\r\n// ];\r\n// const upColor = '#00da3c';\r\n// const downColor = '#ec0000';\r\n// function splitData(rawData) {\r\n//   let categoryData = [];\r\n//   let values = [];\r\n//   let volumes = [];\r\n//   for (let i = 0; i < rawData.length; i++) {\r\n//     categoryData.push(rawData[i].splice(0, 1)[0]);\r\n//     values.push(rawData[i]);\r\n//     volumes.push([i, rawData[i][4], rawData[i][0] > rawData[i][1] ? 1 : -1]);\r\n//   }\r\n//   return {\r\n//     categoryData: categoryData,\r\n//     values: values,\r\n//     volumes: volumes\r\n//   };\r\n// }\r\n// function calculateMA(dayCount, data) {\r\n//   var result = [];\r\n//   for (var i = 0, len = data.values.length; i < len; i++) {\r\n//     if (i < dayCount) {\r\n//       result.push('-');\r\n//       continue;\r\n//     }\r\n//     var sum = 0;\r\n//     for (var j = 0; j < dayCount; j++) {\r\n//       sum += data.values[i - j][1];\r\n//     }\r\n//     result.push(+(sum / dayCount).toFixed(3));\r\n//   }\r\n//   return result;\r\n// }\r\n// export default class onlineUser extends React.PureComponent {\r\n//     state = {\r\n//         info: {},\r\n//         formArr: [\r\n//             {\r\n//                 label: \"查询类别\",\r\n//                 id: \"qryType\",\r\n//                 initialValue: \"theme1000SnapMktNum\",\r\n//                 rules: [\r\n//                     {\r\n//                         required: true,\r\n//                         message: \"查询类别不能为空\",\r\n//                     },\r\n//                 ],\r\n//                 component: SelectOption(secArr, { width: \"200px\" }),\r\n//             },\r\n//         ],\r\n//     };\r\n//     getSearchList = (params, form) => {\r\n//         console.log(params);\r\n//         this.getData(params);\r\n//     };\r\n//     getData = (params, count = 0) => {\r\n//         http.get({\r\n//             url: \"/tb-online-time/onlineNum\",\r\n//             // data: params,\r\n//         }).then((res) => {\r\n//             // console.log(res);\r\n//             let list = res.data;\r\n//             let params = {\r\n//                 theme: \"light\",\r\n//                 title: {\r\n//                     // text: \"用户登录曲线图,当前总登录数：1693\",\r\n//                     text: \"当前时刻总登录数：\" + count,\r\n//                 },\r\n//                 data: list,\r\n//                 xAxis: {\r\n//                     name: \"时间\",\r\n//                 },\r\n//                 yAxis: {\r\n//                     name: \"人数\",\r\n//                 },\r\n//                 // xSeriesUnit:\"\",  //x轴单位\r\n//                 ySeriesUnit: \"\",\r\n//                 gridRight: \"10%\",\r\n//                 // level:[200,400,600,800,1000]\r\n//             };\r\n//             let option = getLineOption(params);\r\n//             console.log(option);\r\n//             this.setState({\r\n//                 info: option,\r\n//             });\r\n//         });\r\n//     };\r\n//     getCount = (params) => {\r\n//         http.get({\r\n//             url: \"/tb-session-first/currentOnline\",\r\n//             // data: params,\r\n//         }).then((res) => {\r\n//             let count = res.data;\r\n//             // console.log(\"人数 \", count);\r\n//             this.getData({}, count);\r\n//         });\r\n//     };\r\n//     getData2 = (params, count = 0) => {\r\n//         let rawData = [[\"2016-01-13\",16526.63,16151.41,16123.2,16593.51,153530000],[\"2016-01-14\",16159.01,16379.05,16075.12,16482.05,158830000],[\"2016-01-15\",16354.33,15988.08,15842.11,16354.33,239210000],[\"2016-01-19\",16009.45,16016.02,15900.25,16171.96,144360000],[\"2016-01-20\",15989.45,15766.74,15450.56,15989.45,191870000],[\"2016-01-21\",15768.87,15882.68,15704.66,16038.59,145140000],[\"2016-01-22\",15921.1,16093.51,15921.1,16136.79,145850000],[\"2016-01-25\",16086.46,15885.22,15880.15,16086.46,123250000],[\"2016-01-26\",15893.16,16167.23,15893.16,16185.79,118210000],[\"2016-01-27\",16168.74,15944.46,15878.3,16235.03,138350000],[\"2016-01-28\",15960.28,16069.64,15863.72,16102.14,130120000],[\"2016-01-29\",16090.26,16466.3,16090.26,16466.3,217940000],[\"2016-02-01\",16453.63,16449.18,16299.47,16510.98,114450000],[\"2016-02-02\",16420.21,16153.54,16108.44,16420.21,126210000],[\"2016-02-03\",16186.2,16336.66,15960.45,16381.69,141870000],[\"2016-02-04\",16329.67,16416.58,16266.16,16485.84,131490000],[\"2016-02-05\",16417.95,16204.97,16129.81,16423.63,139010000],[\"2016-02-08\",16147.51,16027.05,15803.55,16147.51,165880000],[\"2016-02-09\",16005.41,16014.38,15881.11,16136.62,127740000],[\"2016-02-10\",16035.61,15914.74,15899.91,16201.89,122290000],[\"2016-02-11\",15897.82,15660.18,15503.01,15897.82,172070000],[\"2016-02-12\",15691.62,15973.84,15691.62,15974.04,132550000],[\"2016-02-16\",16012.39,16196.41,16012.39,16196.41,142030000],[\"2016-02-17\",16217.98,16453.83,16217.98,16486.12,124080000],[\"2016-02-18\",16483.76,16413.43,16390.43,16511.84,104950000],[\"2016-02-19\",16410.96,16391.99,16278,16410.96,134340000],[\"2016-02-22\",16417.13,16620.66,16417.13,16664.24,102240000],[\"2016-02-23\",16610.39,16431.78,16403.53,16610.39,98170000],[\"2016-02-24\",16418.84,16484.99,16165.86,16507.39,93620000],[\"2016-02-25\",16504.38,16697.29,16458.42,16697.98,94120000],[\"2016-02-26\",16712.7,16639.97,16623.91,16795.98,98480000],[\"2016-02-29\",16634.15,16516.5,16510.4,16726.12,126220000],[\"2016-03-01\",16545.67,16865.08,16545.67,16865.56,105050000],[\"2016-03-02\",16851.17,16899.32,16766.32,16900.17,104470000],[\"2016-03-03\",16896.17,16943.9,16820.73,16944.31,91110000],[\"2016-03-04\",16945,17006.77,16898.84,17062.38,106910000],[\"2016-03-07\",16991.29,17073.95,16940.48,17099.25,100290000],[\"2016-03-08\",17050.67,16964.1,16921.51,17072.79,108380000],[\"2016-03-09\",16969.17,17000.36,16947.94,17048.5,116690000],[\"2016-03-10\",17006.05,16995.13,16821.86,17130.11,117570000],[\"2016-03-11\",17014.99,17213.31,17014.99,17220.09,123420000],[\"2016-03-14\",17207.49,17229.13,17161.16,17275.07,96350000],[\"2016-03-15\",17217.15,17251.53,17120.35,17251.7,92830000],[\"2016-03-16\",17249.34,17325.76,17204.07,17379.18,118710000],[\"2016-03-17\",17321.38,17481.49,17297.65,17529.01,117990000],[\"2016-03-18\",17481.49,17602.3,17481.49,17620.58,321230016],[\"2016-03-21\",17589.7,17623.87,17551.28,17644.97,84410000],[\"2016-03-22\",17602.71,17582.57,17540.42,17648.94,95450000],[\"2016-03-23\",17588.81,17502.59,17486.27,17588.81,84240000],[\"2016-03-24\",17485.33,17515.73,17399.01,17517.14,84100000],[\"2016-03-28\",17526.08,17535.39,17493.03,17583.81,70460000],[\"2016-03-29\",17512.58,17633.11,17434.27,17642.81,86160000],[\"2016-03-30\",17652.36,17716.66,17652.36,17790.11,79330000],[\"2016-03-31\",17716.05,17685.09,17669.72,17755.7,102600000],[\"2016-04-01\",17661.74,17792.75,17568.02,17811.48,104890000],[\"2016-04-04\",17799.39,17737,17710.67,17806.38,85230000],[\"2016-04-05\",17718.03,17603.32,17579.56,17718.03,115230000],[\"2016-04-06\",17605.45,17716.05,17542.54,17723.55,99410000],[\"2016-04-07\",17687.28,17541.96,17484.23,17687.28,90120000],[\"2016-04-08\",17555.39,17576.96,17528.16,17694.51,79990000],[\"2016-04-11\",17586.48,17556.41,17555.9,17731.63,107100000],[\"2016-04-12\",17571.34,17721.25,17553.57,17744.43,81020000],[\"2016-04-13\",17741.66,17908.28,17741.66,17918.35,91710000],[\"2016-04-14\",17912.25,17926.43,17885.44,17962.14,84510000],[\"2016-04-15\",17925.95,17897.46,17867.41,17937.65,118160000],[\"2016-04-18\",17890.2,18004.16,17848.22,18009.53,89390000],[\"2016-04-19\",18012.1,18053.6,17984.43,18103.46,89820000],[\"2016-04-20\",18059.49,18096.27,18031.21,18167.63,100210000],[\"2016-04-21\",18092.84,17982.52,17963.89,18107.29,102720000],[\"2016-04-22\",17985.05,18003.75,17909.89,18026.85,134120000],[\"2016-04-25\",17990.94,17977.24,17855.55,17990.94,83770000],[\"2016-04-26\",17987.38,17990.32,17934.17,18043.77,92570000],[\"2016-04-27\",17996.14,18041.55,17920.26,18084.66,109090000],[\"2016-04-28\",18023.88,17830.76,17796.55,18035.73,100920000],[\"2016-04-29\",17813.09,17773.64,17651.98,17814.83,136670000],[\"2016-05-02\",17783.78,17891.16,17773.71,17912.35,80100000],[\"2016-05-03\",17870.75,17750.91,17670.88,17870.75,97060000],[\"2016-05-04\",17735.02,17651.26,17609.01,17738.06,95020000],[\"2016-05-05\",17664.48,17660.71,17615.82,17736.11,81530000],[\"2016-05-06\",17650.3,17740.63,17580.38,17744.54,80020000],[\"2016-05-09\",17743.85,17705.91,17668.38,17783.16,85590000],[\"2016-05-10\",17726.66,17928.35,17726.66,17934.61,75790000],[\"2016-05-11\",17919.03,17711.12,17711.05,17919.03,87390000],[\"2016-05-12\",17711.12,17720.5,17625.38,17798.19,88560000],[\"2016-05-13\",17711.12,17535.32,17512.48,17734.74,86640000],[\"2016-05-16\",17531.76,17710.71,17531.76,17755.8,88440000],[\"2016-05-17\",17701.46,17529.98,17469.92,17701.46,103260000],[\"2016-05-18\",17501.28,17526.62,17418.21,17636.22,79120000],[\"2016-05-19\",17514.16,17435.4,17331.07,17514.16,95530000],[\"2016-05-20\",17437.32,17500.94,17437.32,17571.75,111990000],[\"2016-05-23\",17507.04,17492.93,17480.05,17550.7,87790000],[\"2016-05-24\",17525.19,17706.05,17525.19,17742.59,86480000],[\"2016-05-25\",17735.09,17851.51,17735.09,17891.71,79180000],[\"2016-05-26\",17859.52,17828.29,17803.82,17888.66,68940000],[\"2016-05-27\",17826.85,17873.22,17824.73,17873.22,73190000],[\"2016-05-31\",17891.5,17787.2,17724.03,17899.24,147390000],[\"2016-06-01\",17754.55,17789.67,17664.79,17809.18,78530000],[\"2016-06-02\",17789.05,17838.56,17703.55,17838.56,75560000],[\"2016-06-03\",17799.8,17807.06,17689.68,17833.17,82270000],[\"2016-06-06\",17825.69,17920.33,17822.81,17949.68,71870000],[\"2016-06-07\",17936.22,17938.28,17936.22,18003.23,78750000],[\"2016-06-08\",17931.91,18005.05,17931.91,18016,71260000],[\"2016-06-09\",17969.98,17985.19,17915.88,18005.22,69690000],[\"2016-06-10\",17938.82,17865.34,17812.34,17938.82,90540000],[\"2016-06-13\",17830.5,17732.48,17731.35,17893.28,101690000],[\"2016-06-14\",17710.77,17674.82,17595.79,17733.92,93740000],[\"2016-06-15\",17703.65,17640.17,17629.01,17762.96,94130000],[\"2016-06-16\",17602.23,17733.1,17471.29,17754.91,91950000],[\"2016-06-17\",17733.44,17675.16,17602.78,17733.44,248680000],[\"2016-06-20\",17736.87,17804.87,17736.87,17946.36,99380000],[\"2016-06-21\",17827.33,17829.73,17799.8,17877.84,85130000],[\"2016-06-22\",17832.67,17780.83,17770.36,17920.16,89440000]];\r\n//         var data = splitData(rawData);\r\n//         console.log(data);\r\n//         let option = {\r\n//             animation: false,\r\n//             legend: {\r\n//               top: 10,\r\n//               left: 'center',\r\n//               data: ['MA5', 'MA10', 'MA20', 'MA30']\r\n//             },\r\n//             tooltip: {\r\n//               trigger: 'axis',\r\n//               backgroundColor:\"rgb(50,50,50,0.9)\",\r\n//               axisPointer: {\r\n//                 type: 'cross'\r\n//               },\r\n//               borderWidth: 1,\r\n//               borderColor: '#ccc',\r\n//               padding: 10,\r\n//             //   textStyle: {\r\n//             //     color: '#000'\r\n//             //   },\r\n//             //   position: function (pos, params, el, elRect, size) {\r\n//             //     const obj = {\r\n//             //       top: 10\r\n//             //     };\r\n//             //     obj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 30;\r\n//             //     return obj;\r\n//             //   }\r\n//               // extraCssText: 'width: 170px'\r\n//             },\r\n//             axisPointer: {\r\n//               link: [\r\n//                 {\r\n//                   xAxisIndex: 'all'\r\n//                 }\r\n//               ],\r\n//               label: {\r\n//                 backgroundColor: '#777'\r\n//               }\r\n//             },\r\n//             visualMap: {\r\n//               show: false,\r\n//               seriesIndex: 5,\r\n//               dimension: 2,\r\n//               pieces: [\r\n//                 {\r\n//                   value: 1,\r\n//                   color: downColor\r\n//                 },\r\n//                 {\r\n//                   value: -1,\r\n//                   color: upColor\r\n//                 }\r\n//               ]\r\n//             },\r\n//             grid: [\r\n//               {\r\n//                 left: '10%',\r\n//                 right: '8%',\r\n//                 height: '60%'\r\n//               },\r\n//               {\r\n//                 left: '10%',\r\n//                 right: '8%',\r\n//                 top: '75%',\r\n//                 height: '15%'\r\n//               },\r\n//             //   {\r\n//             //     left: '10%',\r\n//             //     right: '8%',\r\n//             //     top: '85%',\r\n//             //     height: '15%'\r\n//             //   }\r\n//             ],\r\n//             xAxis: [\r\n//               {\r\n//                 type: 'category',\r\n//                 data: data.categoryData,\r\n//                 boundaryGap: false,\r\n//                 axisLine: { onZero: false },\r\n//                 splitLine: { show: false },\r\n//                 min: 'dataMin',\r\n//                 max: 'dataMax',\r\n//                 axisPointer: {\r\n//                   z: 100\r\n//                 }\r\n//               },\r\n//               {\r\n//                 type: 'category',\r\n//                 gridIndex: 1,\r\n//                 data: data.categoryData,\r\n//                 boundaryGap: false,\r\n//                 axisLine: { onZero: false },\r\n//                 axisTick: { show: false },\r\n//                 splitLine: { show: false },\r\n//                 axisLabel: { show: false },\r\n//                 min: 'dataMin',\r\n//                 max: 'dataMax'\r\n//               },\r\n//             ],\r\n//             yAxis: [\r\n//               {\r\n//                 scale: true,\r\n//                 splitArea: {\r\n//                   show: true\r\n//                 }\r\n//               },\r\n//               {\r\n//                 scale: true,\r\n//                 gridIndex: 1,\r\n//                 splitNumber: 2,\r\n//                 axisLabel: { show: false },\r\n//                 axisLine: { show: false },\r\n//                 axisTick: { show: false },\r\n//                 splitLine: { show: false }\r\n//               }\r\n//             ],\r\n//             dataZoom: [\r\n//               {\r\n//                 type: 'inside',\r\n//                 xAxisIndex: [0, 1],\r\n//                 start: 0,\r\n//                 end: 100\r\n//               },\r\n//             //   {\r\n//             //     show: true,\r\n//             //     xAxisIndex: [0, 1],\r\n//             //     type: 'slider',\r\n//             //     top: '85%',\r\n//             //     start: 0,\r\n//             //     end: 100\r\n//             //   }\r\n//             ],\r\n//             series: [\r\n//             //   {\r\n//             //     name: 'Dow-Jones index',\r\n//             //     type: 'candlestick',\r\n//             //     data: data.values,\r\n//             //     itemStyle: {\r\n//             //       color: upColor,\r\n//             //       color0: downColor,\r\n//             //       borderColor: undefined,\r\n//             //       borderColor0: undefined\r\n//             //     },\r\n//             //     tooltip: {\r\n//             //       formatter: function (param) {\r\n//             //         param = param[0];\r\n//             //         return [\r\n//             //           'Date: ' + param.name + '<hr size=1 style=\"margin: 3px 0\">',\r\n//             //           'Open: ' + param.data[0] + '<br/>',\r\n//             //           'Close: ' + param.data[1] + '<br/>',\r\n//             //           'Lowest: ' + param.data[2] + '<br/>',\r\n//             //           'Highest: ' + param.data[3] + '<br/>'\r\n//             //         ].join('');\r\n//             //       }\r\n//             //     }\r\n//             //   },\r\n//               {\r\n//                 name: 'MA5',\r\n//                 type: 'line',\r\n//                 data: calculateMA(5, data),\r\n//                 smooth: true,\r\n//                 itemStyle: {\r\n//                     color: upColor,\r\n//                     color0: downColor,\r\n//                     borderColor: undefined,\r\n//                     borderColor0: undefined\r\n//                   },\r\n//                 lineStyle: {\r\n//                   opacity: 0.5\r\n//                 }\r\n//               },\r\n//               {\r\n//                 name: 'MA10',\r\n//                 type: 'line',\r\n//                 data: calculateMA(10, data),\r\n//                 smooth: true,\r\n//                 lineStyle: {\r\n//                   opacity: 0.5\r\n//                 }\r\n//               },\r\n//               {\r\n//                 name: 'MA20',\r\n//                 type: 'line',\r\n//                 data: calculateMA(20, data),\r\n//                 smooth: true,\r\n//                 lineStyle: {\r\n//                   opacity: 0.5\r\n//                 }\r\n//               },\r\n//               {\r\n//                 name: 'MA30',\r\n//                 type: 'line',\r\n//                 data: calculateMA(30, data),\r\n//                 smooth: true,\r\n//                 lineStyle: {\r\n//                   opacity: 0.5\r\n//                 }\r\n//               },\r\n//               {\r\n//                 name: 'Volume',\r\n//                 type: 'bar',\r\n//                 xAxisIndex: 1,\r\n//                 yAxisIndex: 1,\r\n//                 data: data.volumes\r\n//               },\r\n//             //   {\r\n//             //     name: 'Volume',\r\n//             //     type: 'bar',\r\n//             //     xAxisIndex: 2,\r\n//             //     yAxisIndex: 1,\r\n//             //     data: data.volumes\r\n//             //   }\r\n//             ]\r\n//         };\r\n//         console.log(option);\r\n//         // this.setState({\r\n//         //     info: option,\r\n//         // });\r\n//         // console.log(document.getElementById('main'));\r\n//         var myChart = echarts.init(document.getElementById('main'));\r\n//         myChart.setOption(option);\r\n//         var myChart2 = echarts.init(document.getElementById('main2'));\r\n\r\n//         let option2 =  {\r\n//             xAxis: {\r\n//               type: 'category',\r\n//               data: data.categoryData,\r\n//               boundaryGap: false,\r\n//               axisLine: { onZero: false },\r\n//               axisTick: { show: false },\r\n//               splitLine: { show: false },\r\n//               axisLabel: { show: false },\r\n//               min: 'dataMin',\r\n//               max: 'dataMax'\r\n//             },\r\n//             yAxis: {\r\n//               type: 'value',\r\n//               show:false\r\n//             },\r\n//             grid: [\r\n//                 {\r\n//                   left: '10%',\r\n//                   right: '8%',\r\n//                   top: '5%',\r\n//                   height: '80%'\r\n//                 }\r\n//             ],\r\n//             tooltip: {\r\n//                 trigger: \"axis\",\r\n//                 backgroundColor:\"rgb(50,50,50,0.9)\",\r\n//                 // backgroundColor:\"white\",\r\n//                 // textStyle:{\r\n//                 //     color:\"#333\"\r\n//                 // }\r\n//                 // formatter: function (params) {\r\n//                 //     return (\r\n//                 //         params[0].name +\r\n//                 //         // xunit +\r\n//                 //         \"<br />\" +\r\n//                 //         params[0].marker +\r\n//                 //         params.seriesName +\r\n//                 //         \":\" +\r\n//                 //         params[0].value\r\n//                 //         // yunit\r\n//                 //     );\r\n//                 // },\r\n//             },\r\n//             dataZoom: [\r\n//                 {\r\n//                     type: \"inside\",\r\n//                     show: false,\r\n//                 },\r\n//             ],\r\n//             series: [\r\n//               {\r\n//                 name:\"参数\",\r\n//                 data: data.volumes,\r\n//                 itemStyle: {\r\n//                     color: \"#61a0a8\",\r\n//                 },\r\n//                 type: 'bar'\r\n//               }\r\n//             ]\r\n//           };\r\n//         myChart2.setOption(option2,\"light\");\r\n//         var myChart3 = echarts.init(document.getElementById('main3'));\r\n//         let option3 = JSON.parse(JSON.stringify(option2))\r\n//         option3.series[0].itemStyle.color=\"#749f83\"\r\n//         myChart3.setOption(option3);\r\n//     };\r\n//     componentDidMount() {\r\n//         // this.getCount();\r\n//         this.getData2();\r\n//     }\r\n\r\n//     render() {\r\n//         let info = this.state.info;\r\n//         return (\r\n//             <div>\r\n//                 <div id=\"main\" style={{width: \"1000px\",height:\"600px\"}}></div>\r\n//                 <div id=\"main2\" style={{width: \"1000px\",height:\"150px\"}}></div>\r\n//                 <div id=\"main3\" style={{width: \"1000px\",height:\"150px\"}}></div>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}