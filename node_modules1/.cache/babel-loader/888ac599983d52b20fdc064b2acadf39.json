{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport _defineProperty from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\company\\\\algo-manage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nvar _jsxFileName = \"D:\\\\company\\\\algo-manage\\\\src\\\\algo\\\\modules\\\\chart\\\\pages\\\\ram\\\\index.js\";\nimport React from \"react\";\nimport styles from \"./style.module.less\";\nimport echarts from \"echarts\";\nimport { connect } from \"react-redux\";\nvar RangePicker = _DatePicker.RangePicker;\nvar Option = _Select.Option;\nimport moment from \"moment\";\n\nvar Ram =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Ram, _React$PureComponent);\n\n  function Ram() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Ram);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Ram)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      hostList: []\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          var noTime = values[\"pickerTime\"].length < 1;\n          var params = {\n            hostId: values.hostId,\n            startTime: noTime ? \"\" : moment(values[\"pickerTime\"][0]).format(\"YYYY-MM-DD HH:mm:ss\"),\n            endTime: noTime ? \"\" : moment(values[\"pickerTime\"][1]).format(\"YYYY-MM-DD HH:mm:ss\")\n          };\n\n          _this.getData(params);\n        }\n      });\n    };\n\n    _this.getData = function (params) {\n      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      console.log(params, \"传入的参数\");\n      http.post({\n        data: params,\n        url: \"/ssh/ram\"\n      }).then(function (res) {\n        if (res.code == 0) {\n          var _ref;\n\n          var list = res.data;\n          var seriesList = list.series;\n          var maxGB = (list.memTotal / 1024 / 1024).toFixed(0);\n          var isNull = false;\n\n          if (seriesList.length == 0) {\n            message.error(\"该时间段暂无数据\");\n            isNull = true;\n          } else {\n            isNull = false;\n            seriesList.forEach(function (item) {\n              item.data = item.y;\n              item.smooth = true;\n              item.showSymbol = false;\n              item.itemStyle = {\n                normal: {\n                  color: \"#65A6FF\"\n                }\n              };\n            });\n          }\n\n          var option = {\n            textStyle: {\n              color: \"#333\"\n            },\n            tooltip: {\n              show: false,\n              trigger: \"axis\",\n              backgroundColor: \"#1F2329\",\n              boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\n              borderColor: \"#1F2329\",\n              textStyle: {\n                color: \"#fff\"\n              }\n            },\n            legend: {\n              // data: [\"CPU1\"],\n              left: \"auto\",\n              itemWidth: 35\n            },\n            grid: {\n              left: \"-30px\",\n              right: \"0%\",\n              bottom: \"9%\",\n              top: \"60px\",\n              containLabel: true\n            },\n            xAxis: {\n              type: \"category\",\n              boundaryGap: false,\n              splitLine: {\n                show: true,\n                lineStyle: {\n                  color: \"#E9E9E9\",\n                  type: \"dashed\"\n                }\n              },\n              axisTick: {\n                show: true,\n                //显示X轴刻度\n                lineStyle: {\n                  color: \"#E9E9E9\"\n                }\n              },\n              axisLine: {\n                // 刻度线的颜色\n                show: false\n              },\n              axisPointer: {\n                type: \"line\",\n                lineStyle: {\n                  color: \"#BDBEBF\"\n                }\n              },\n              data: list.x\n            },\n            yAxis: [{\n              type: \"value\",\n              name: \"单位（%）\",\n              splitLine: {\n                show: false\n              },\n              axisTick: {\n                show: false //隐藏X轴刻度\n\n              },\n              axisLine: {\n                show: false\n              },\n              min: \"0\",\n              max: \"100\",\n              axisLabel: {\n                formatter: \"{value}%\"\n              },\n              position: \"right\" // nameTextStyle: {\n              //     padding: [0, 0, 0, 0],\n              // },\n\n            }, (_ref = {\n              type: \"value\",\n              name: \"单位：（GB）\",\n              nameLocation: \"end\",\n              axisLine: {\n                show: false\n              },\n              nameTextStyle: {\n                color: \"#666\"\n              },\n              axisTick: {\n                show: false //隐藏X轴刻度\n\n              },\n              splitLine: {\n                show: true,\n                lineStyle: {\n                  color: \"#E9E9E9\",\n                  type: \"dashed\"\n                }\n              },\n              axisLabel: {\n                formatter: \"{value} GB\",\n                margin: 55,\n                textStyle: {\n                  align: \"left\"\n                }\n              }\n            }, _defineProperty(_ref, \"nameTextStyle\", {\n              padding: [0, 40, 0, 0] // padding: [0, 0, 0, -250],\n\n            }), _defineProperty(_ref, \"max\", isNull ? 16 : 16), _defineProperty(_ref, \"min\", \"0\"), _ref)],\n            series: list.series,\n            dataZoom: [{\n              type: \"inside\"\n            }, {\n              type: \"slider\",\n              height: \"20px\",\n              left: 130,\n              right: 130\n            }]\n          };\n          var myChart = echarts.init(document.getElementById(\"main2\"));\n          myChart.resize();\n          myChart.setOption(option);\n        } else {\n          message.error(\"服务异常\");\n        }\n      });\n    };\n\n    _this.chartResize = function () {\n      var dom1 = document.getElementById(\"main2\");\n      echarts.init(dom1).resize();\n    };\n\n    _this.getHostList = function () {\n      // 用户\n      http.get({\n        url: \"/ssh-host-info/list\"\n      }).then(function (res) {\n        _this.setState({\n          hostList: res.data\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Ram, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getHostList();\n      var yesterday = moment(new Date()).format(\"YYYY-MM-DD\");\n      this.getData({\n        hostId: \"1\",\n        startTime: \"\".concat(yesterday, \" 00:00:00\"),\n        endTime: \"\".concat(yesterday, \" 23:59:59\")\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      window.cpuResize = this.chartResize;\n\n      if (this.props.path == \"/main/chart/ram\") {\n        window.addEventListener(\"resize\", window.cpuResize);\n      } else {\n        window.removeEventListener(\"resize\", window.cpuResize);\n      }\n\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var yesterday = moment(new Date()).format(\"YYYY-MM-DD\");\n      var dataFormatter = \"YYYY-MM-DD HH:mm:ss\";\n      var hostList = this.state.hostList;\n      var children = hostList.map(function (d) {\n        return React.createElement(Option, {\n          key: d.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          },\n          __self: this\n        }, d.hostName);\n      });\n      return React.createElement(\"div\", {\n        className: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: styles.search,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(_Form, {\n        layout: \"inline\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(_Form.Item, {\n        label: \"\\u670D\\u52A1\\u5668\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, getFieldDecorator(\"hostId\", {\n        initialValue: \"1\"\n      })(React.createElement(_Select, {\n        showSearch: true,\n        style: {\n          width: 160\n        },\n        placeholder: \"\\u9009\\u62E9\\u5185\\u5B58\",\n        optionFilterProp: \"children\",\n        filterOption: function filterOption(input, option) {\n          return option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, children))), React.createElement(_Form.Item, {\n        label: \"\\u65F6\\u95F4\",\n        style: {\n          marginLeft: \"12px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, getFieldDecorator(\"pickerTime\", {\n        initialValue: [moment(\"\".concat(yesterday, \" 00:00:00\"), dataFormatter), moment(\"\".concat(yesterday, \" 23:59:59\"), dataFormatter)]\n      })(React.createElement(RangePicker, {\n        style: {\n          width: 432\n        },\n        showTime: true,\n        format: dataFormatter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, {\n        style: {\n          float: \"right\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, React.createElement(_Button, {\n        type: \"ghost\",\n        htmlType: \"submit\",\n        style: {\n          width: 76\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, \"\\u786E\\u5B9A\")))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main2\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Ram;\n}(React.PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    path: state.RouterModel.path\n  };\n};\n\nexport default connect(mapStateToProps, null)(_Form.create()(Ram)); // export default Form.create()(Ram);","map":{"version":3,"sources":["D:/company/algo-manage/src/algo/modules/chart/pages/ram/index.js"],"names":["React","styles","echarts","connect","RangePicker","Option","moment","Ram","state","hostList","handleSubmit","e","preventDefault","props","form","validateFields","err","values","noTime","length","params","hostId","startTime","format","endTime","getData","count","console","log","http","post","data","url","then","res","code","list","seriesList","series","maxGB","memTotal","toFixed","isNull","message","error","forEach","item","y","smooth","showSymbol","itemStyle","normal","color","option","textStyle","tooltip","show","trigger","backgroundColor","boxShadow","borderColor","legend","left","itemWidth","grid","right","bottom","top","containLabel","xAxis","type","boundaryGap","splitLine","lineStyle","axisTick","axisLine","axisPointer","x","yAxis","name","min","max","axisLabel","formatter","position","nameLocation","nameTextStyle","margin","align","padding","dataZoom","height","myChart","init","document","getElementById","resize","setOption","chartResize","dom1","getHostList","get","setState","yesterday","Date","window","cpuResize","path","addEventListener","removeEventListener","getFieldDecorator","dataFormatter","children","map","d","id","hostName","container","search","initialValue","width","input","toLowerCase","indexOf","marginLeft","float","PureComponent","mapStateToProps","ownProps","RouterModel","create"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styles from \"./style.module.less\";\r\nimport echarts from \"echarts\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    SearchForm,\r\n    Input,\r\n    TimePicker,\r\n    Form,\r\n    Button,\r\n    Icon,\r\n    DatePicker,\r\n    Select,\r\n} from \"antd\";\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\nimport moment from \"moment\";\r\nclass Ram extends React.PureComponent {\r\n    state = { hostList: [] };\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                let noTime = values[\"pickerTime\"].length < 1;\r\n                let params = {\r\n                    hostId: values.hostId,\r\n                    startTime: noTime\r\n                        ? \"\"\r\n                        : moment(values[\"pickerTime\"][0]).format(\r\n                              \"YYYY-MM-DD HH:mm:ss\"\r\n                          ),\r\n                    endTime: noTime\r\n                        ? \"\"\r\n                        : moment(values[\"pickerTime\"][1]).format(\r\n                              \"YYYY-MM-DD HH:mm:ss\"\r\n                          ),\r\n                };\r\n                this.getData(params);\r\n            }\r\n        });\r\n    };\r\n    getData = (params, count = 0) => {\r\n        console.log(params, \"传入的参数\");\r\n        http.post({\r\n            data: params,\r\n            url: \"/ssh/ram\",\r\n        }).then((res) => {\r\n            if (res.code == 0) {\r\n                let list = res.data;\r\n                let seriesList = list.series;\r\n                let maxGB = (list.memTotal / 1024 / 1024).toFixed(0);\r\n                let isNull = false;\r\n                if (seriesList.length == 0) {\r\n                    message.error(\"该时间段暂无数据\");\r\n                    isNull = true;\r\n                } else {\r\n                    isNull = false;\r\n                    seriesList.forEach((item) => {\r\n                        item.data = item.y;\r\n                        item.smooth = true;\r\n                        item.showSymbol = false;\r\n                        item.itemStyle = {\r\n                            normal: {\r\n                                color: \"#65A6FF\",\r\n                            },\r\n                        };\r\n                    });\r\n                }\r\n                let option = {\r\n                    textStyle: {\r\n                        color: \"#333\",\r\n                    },\r\n                    tooltip: {\r\n                        show: false,\r\n                        trigger: \"axis\",\r\n                        backgroundColor: \"#1F2329\",\r\n                        boxShadow: \"0px 2px 8px 0px rgba(0, 0, 0, 0.15)\",\r\n                        borderColor: \"#1F2329\",\r\n                        textStyle: {\r\n                            color: \"#fff\",\r\n                        },\r\n                    },\r\n                    legend: {\r\n                        // data: [\"CPU1\"],\r\n                        left: \"auto\",\r\n                        itemWidth: 35,\r\n                    },\r\n                    grid: {\r\n                        left: \"-30px\",\r\n                        right: \"0%\",\r\n                        bottom: \"9%\",\r\n                        top: \"60px\",\r\n                        containLabel: true,\r\n                    },\r\n                    xAxis: {\r\n                        type: \"category\",\r\n                        boundaryGap: false,\r\n                        splitLine: {\r\n                            show: true,\r\n                            lineStyle: {\r\n                                color: \"#E9E9E9\",\r\n                                type: \"dashed\",\r\n                            },\r\n                        },\r\n                        axisTick: {\r\n                            show: true, //显示X轴刻度\r\n                            lineStyle: {\r\n                                color: \"#E9E9E9\",\r\n                            },\r\n                        },\r\n                        axisLine: {\r\n                            // 刻度线的颜色\r\n                            show: false,\r\n                        },\r\n                        axisPointer: {\r\n                            type: \"line\",\r\n                            lineStyle: { color: \"#BDBEBF\" },\r\n                        },\r\n                        data: list.x,\r\n                    },\r\n                    yAxis: [\r\n                        {\r\n                            type: \"value\",\r\n                            name: \"单位（%）\",\r\n                            splitLine: {\r\n                                show: false,\r\n                            },\r\n                            axisTick: {\r\n                                show: false, //隐藏X轴刻度\r\n                            },\r\n                            axisLine: {\r\n                                show: false,\r\n                            },\r\n                            min: \"0\",\r\n                            max: \"100\",\r\n                            axisLabel: {\r\n                                formatter: \"{value}%\",\r\n                            },\r\n                            position: \"right\",\r\n                            // nameTextStyle: {\r\n                            //     padding: [0, 0, 0, 0],\r\n                            // },\r\n                        },\r\n                        {\r\n                            type: \"value\",\r\n                            name: \"单位：（GB）\",\r\n                            nameLocation: \"end\",\r\n                            axisLine: {\r\n                                show: false,\r\n                            },\r\n                            nameTextStyle: {\r\n                                color: \"#666\",\r\n                            },\r\n                            axisTick: {\r\n                                show: false, //隐藏X轴刻度\r\n                            },\r\n                            splitLine: {\r\n                                show: true,\r\n                                lineStyle: {\r\n                                    color: \"#E9E9E9\",\r\n                                    type: \"dashed\",\r\n                                },\r\n                            },\r\n                            axisLabel: {\r\n                                formatter: \"{value} GB\",\r\n                                margin: 55,\r\n                                textStyle: {\r\n                                    align: \"left\",\r\n                                },\r\n                            },\r\n                            nameTextStyle: {\r\n                                padding: [0, 40, 0, 0],\r\n                                // padding: [0, 0, 0, -250],\r\n                            },\r\n                            max: isNull ? 16 : 16,\r\n                            // max: isNull ? 16 : maxGB,\r\n                            min: \"0\",\r\n                            // max: maxGB,\r\n                        },\r\n                    ],\r\n                    series: list.series,\r\n                    dataZoom: [\r\n                        {\r\n                            type: \"inside\",\r\n                        },\r\n                        {\r\n                            type: \"slider\",\r\n                            height: \"20px\",\r\n                            left: 130,\r\n                            right: 130,\r\n                        },\r\n                    ],\r\n                };\r\n                var myChart = echarts.init(document.getElementById(\"main2\"));\r\n                myChart.resize();\r\n                myChart.setOption(option);\r\n            } else {\r\n                message.error(\"服务异常\");\r\n            }\r\n        });\r\n    };\r\n    chartResize = () => {\r\n        var dom1 = document.getElementById(\"main2\");\r\n        echarts.init(dom1).resize();\r\n    };\r\n    componentDidMount() {\r\n        this.getHostList();\r\n        let yesterday = moment(new Date()).format(\"YYYY-MM-DD\");\r\n        this.getData({\r\n            hostId: \"1\",\r\n            startTime: `${yesterday} 00:00:00`,\r\n            endTime: `${yesterday} 23:59:59`,\r\n        });\r\n    }\r\n    getHostList = () => {\r\n        // 用户\r\n        http.get({\r\n            url: \"/ssh-host-info/list\",\r\n        }).then((res) => {\r\n            this.setState({\r\n                hostList: res.data,\r\n            });\r\n        });\r\n    };\r\n    render() {\r\n        window.cpuResize = this.chartResize;\r\n        if (this.props.path == \"/main/chart/ram\") {\r\n            window.addEventListener(\"resize\", window.cpuResize);\r\n        } else {\r\n            window.removeEventListener(\"resize\", window.cpuResize);\r\n        }\r\n        const { getFieldDecorator } = this.props.form;\r\n        let yesterday = moment(new Date()).format(\"YYYY-MM-DD\");\r\n        let dataFormatter = \"YYYY-MM-DD HH:mm:ss\";\r\n        const { hostList } = this.state;\r\n        const children = hostList.map((d) => (\r\n            <Option key={d.id}>{d.hostName}</Option>\r\n        ));\r\n        return (\r\n            <div className={styles.container}>\r\n                <div className={styles.search}>\r\n                    <Form layout=\"inline\" onSubmit={this.handleSubmit}>\r\n                        <Form.Item label=\"服务器\">\r\n                            {getFieldDecorator(\"hostId\", {\r\n                                initialValue: \"1\",\r\n                            })(\r\n                                <Select\r\n                                    showSearch\r\n                                    style={{ width: 160 }}\r\n                                    placeholder=\"选择内存\"\r\n                                    optionFilterProp=\"children\"\r\n                                    filterOption={(input, option) =>\r\n                                        option.props.children\r\n                                            .toLowerCase()\r\n                                            .indexOf(input.toLowerCase()) >= 0\r\n                                    }\r\n                                >\r\n                                    {children}\r\n                                    {/* <Option value=\"\">全部</Option>\r\n                                    <Option value=\"1\">80</Option> */}\r\n                                </Select>\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item label=\"时间\" style={{ marginLeft: \"12px\" }}>\r\n                            {getFieldDecorator(\"pickerTime\", {\r\n                                initialValue: [\r\n                                    moment(\r\n                                        `${yesterday} 00:00:00`,\r\n                                        dataFormatter\r\n                                    ),\r\n                                    moment(\r\n                                        `${yesterday} 23:59:59`,\r\n                                        dataFormatter\r\n                                    ),\r\n                                ],\r\n                            })(\r\n                                <RangePicker\r\n                                    style={{ width: 432 }}\r\n                                    showTime\r\n                                    format={dataFormatter}\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item style={{ float: \"right\" }}>\r\n                            <Button\r\n                                type=\"ghost\"\r\n                                htmlType=\"submit\"\r\n                                style={{ width: 76 }}\r\n                            >\r\n                                确定\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <div\r\n                        id=\"main2\"\r\n                        style={{ width: \"100%\", height: \"500px\" }}\r\n                    ></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        path: state.RouterModel.path,\r\n    };\r\n};\r\nexport default connect(mapStateToProps, null)(Form.create()(Ram));\r\n// export default Form.create()(Ram);\r\n"]},"metadata":{},"sourceType":"module"}